<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sogrey</title>
  
  <subtitle>必须努力，付出不亚于任何人努力</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sogrey.github.io/"/>
  <updated>2019-03-19T03:32:52.089Z</updated>
  <id>https://sogrey.github.io/</id>
  
  <author>
    <name>Sogrey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>端口被占用,干掉它</title>
    <link href="https://sogrey.github.io/article/%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8-%E5%B9%B2%E6%8E%89%E5%AE%83/"/>
    <id>https://sogrey.github.io/article/端口被占用-干掉它/</id>
    <published>2019-03-19T03:18:22.000Z</published>
    <updated>2019-03-19T03:32:52.089Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这个问题遇到过好几次，起初是在开发Android是adb端口被占用，就连360都曾占用过；特此记录：</p><p>这次是 <code>35729</code> 被占用了，看操作：</p><p><strong>1 . 查看占用端口的进程PID</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|findstr 35729  <span class="comment"># 35729是我这边被占用的端口，你根据自己的情况下而定。</span></span><br></pre></td></tr></table></figure><p>输出如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace\VSCode\three.js\Three.js-start (master -&gt; origin)</span><br><span class="line">λ netstat -ano|findstr 35729</span><br><span class="line">  TCP    0.0.0.0:35729          0.0.0.0:0              LISTENING       8084</span><br><span class="line">  TCP    [::]:35729             [::]:0                 LISTENING       8084</span><br><span class="line">  TCP    [::1]:10082            [::1]:35729            ESTABLISHED     10804</span><br><span class="line">  TCP    [::1]:35729            [::1]:10082            ESTABLISHED     8084</span><br></pre></td></tr></table></figure></p><p><strong>2 .  看到 <code>35729</code> 端口的 PID 是 <code>8084</code>,通过PID查看所有进程,看看谁在作祟</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist /<span class="keyword">fi</span> <span class="string">"PID eq 8084"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace\VSCode\three.js\Three.js-start (master -&gt; origin)</span><br><span class="line">λ tasklist /<span class="keyword">fi</span> <span class="string">"PID eq 8084"</span></span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话<span class="comment">#       内存使用</span></span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">node.exe                     8084  Console                    1     98,516 K</span><br></pre></td></tr></table></figure><p><strong>3 . PID，干掉它：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /pid 8084 /f</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace\VSCode\three.js\Three.js-start (master -&gt; origin)</span><br><span class="line">λ taskkill /pid 8084 /f</span><br><span class="line">成功: 已终止 PID 为 8084 的进程。</span><br></pre></td></tr></table></figure><p>完工。</p><p>最初发布在 <a href="http://blog.sina.com.cn/s/blog_694394d30102wgxg.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_694394d30102wgxg.html</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="http" scheme="https://sogrey.github.io/categories/http/"/>
    
    
      <category term="http" scheme="https://sogrey.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>JS中apply()与call()的区别</title>
    <link href="https://sogrey.github.io/article/JS%E4%B8%ADapply-%E4%B8%8Ecall-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://sogrey.github.io/article/JS中apply-与call-的区别/</id>
    <published>2019-03-18T07:44:49.000Z</published>
    <updated>2019-03-18T14:39:26.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JS中apply-与call-的区别"><a href="#JS中apply-与call-的区别" class="headerlink" title="JS中apply()与call()的区别"></a>JS中apply()与call()的区别</h1><p>JavaScript中的每一个Function对象都有一个apply()方法和一个call()方法，它们的语法分别为： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*apply()方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">apply</span>(<span class="params">thisObj[, argArray]</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">/*<span class="title">call</span>(<span class="params"></span>)方法*/</span></span><br><span class="line"><span class="function"><span class="title">function</span>.<span class="title">call</span>(<span class="params">thisObj[, arg1[, arg2[, [,...argN]]]]</span>);</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>apply：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.apply(A, arguments);即A对象应用B对象的方法。</li><li>call：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.call(A, args1,args2);即A对象调用B对象的方法。</li></ul><p><strong>它们的共同之处：</strong></p><p>都“可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象”。</p><p><strong>它们的不同之处：</strong></p><ul><li>apply：最多只能有两个参数——新this对象和一个数组argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里。如果argArray不是一个有效的数组或arguments对象，那么将导致一个TypeError。如果没有提供argArray和thisObj任何一个参数，那么Global对象将被用作thisObj，并且无法被传递任何参数。</li><li>call：它可以接受多个参数，第一个参数与apply一样，后面则是一串参数列表。这个方法主要用在js对象各方法相互调用的时候，使当前this实例指针保持一致，或者在特殊情况下需要改变this指针。如果没有提供thisObj参数，那么 Global 对象被用作thisObj。 </li></ul><p>实际上，apply和call的功能是一样的，只是传入的参数列表形式不同。</p><h3 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a1 = add.apply(sub,[<span class="number">4</span>,<span class="number">2</span>]);　　<span class="comment">//sub调用add的方法</span></span><br><span class="line"><span class="keyword">var</span> a2 = sub.apply(add,[<span class="number">4</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(a1);  <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(a2);  <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*call的用法*/</span></span><br><span class="line"><span class="keyword">var</span> a1 = add.call(sub,<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a1);</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.apply(<span class="keyword">this</span>,[name]);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">"咕咕"</span>);</span><br><span class="line">cat.showName();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*call的用法*/</span></span><br><span class="line">Animal.call(<span class="keyword">this</span>,name);</span><br></pre></td></tr></table></figure><p>多重继承 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class10</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.showSub = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        alert(a - b);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class11</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.showAdd = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        alert(a + b);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class12</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Class10.apply(<span class="keyword">this</span>);</span><br><span class="line">  Class11.apply(<span class="keyword">this</span>);   </span><br><span class="line">  <span class="comment">//Class10.call(this);</span></span><br><span class="line">  <span class="comment">//Class11.call(this);  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c2 = <span class="keyword">new</span> Class12();</span><br><span class="line">c2.showSub(<span class="number">3</span>,<span class="number">1</span>);    <span class="comment">//2</span></span><br><span class="line">c2.showAdd(<span class="number">3</span>,<span class="number">1</span>);    <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2 id="apply的一些其他巧妙用法"><a href="#apply的一些其他巧妙用法" class="headerlink" title="apply的一些其他巧妙用法"></a><strong>apply的一些其他巧妙用法</strong></h2><p>(1) Math.max 可以实现得到数组中最大的一项： </p><p>因为Math.max不支持<code>Math.max([param1,param2])</code>也就是数组，但是它支持<code>Math.max(param1,param2...)</code>，所以可以根据apply的特点来解决 <code>var max=Math.max.apply(null,array)</code>，这样就轻易的可以得到一个数组中的最大项（apply会将一个数组转换为一个参数接一个参数的方式传递给方法）</p><p>这块在调用的时候第一个参数给了null，这是因为没有对象去调用这个方法，我只需要用这个方法帮我运算，得到返回的结果就行，所以直接传递了一个null过去。</p><p>用这种方法也可以实现得到数组中的最小项：Math.min.apply(null,array)</p><p>(2）Array.prototype.push可以实现两个数组的合并 </p><p>同样push方法没有提供push一个数组，但是它提供了push(param1,param2…paramN)，同样也可以用apply来转换一下这个数组 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>);</span><br><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>);</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1,arr2);    <span class="comment">//得到合并后数组的长度，因为push就是返回一个数组的长度</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：apply 传入参数长度是有限制的，超出限制会报出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Uncaught RangeError: Maximum call stack size exceeded</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>这是只能使用传统方法 for 循环来解决。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS中apply-与call-的区别&quot;&gt;&lt;a href=&quot;#JS中apply-与call-的区别&quot; class=&quot;headerlink&quot; title=&quot;JS中apply()与call()的区别&quot;&gt;&lt;/a&gt;JS中apply()与call()的区别&lt;/h1&gt;&lt;p&gt;JavaScript中的每一个Function对象都有一个apply()方法和一个call()方法，它们的语法分别为： &lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*apply()方法*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;thisObj[, argArray]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;/*&lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)方法*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;thisObj[, arg1[, arg2[, [,...argN]]]]&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="https://sogrey.github.io/categories/JS/"/>
    
    
      <category term="JS" scheme="https://sogrey.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>前端调试之把玩console</title>
    <link href="https://sogrey.github.io/article/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E4%B9%8B%E6%8A%8A%E7%8E%A9console/"/>
    <id>https://sogrey.github.io/article/前端调试之把玩console/</id>
    <published>2019-03-15T04:02:58.000Z</published>
    <updated>2019-03-18T14:47:56.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Console 对象用于 JavaScript 调试。</p><p>JavaScript 原生中默认是没有 Console 对象,这是宿主对象（也就是游览器）提供的内置对象。 用于访问调试控制台, 在不同的浏览器里效果可能不同。</p><p>Console 对象常见的两个用途：</p><ul><li>显示网页代码运行时的错误信息。</li><li>提供了一个命令行接口，用来与网页代码互动。</li></ul><a id="more"></a><h2 id="Console-对象方法"><a href="#Console-对象方法" class="headerlink" title="Console 对象方法"></a>Console 对象方法</h2><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p> ssert方法接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。 </p><p>实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(<span class="literal">true</span> === <span class="literal">false</span>, <span class="string">"判断条件不成立"</span>)</span><br><span class="line"><span class="comment">// Assertion failed: 判断条件不成立</span></span><br></pre></td></tr></table></figure></p><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>清除当前控制台的所有输出，将光标回置到第一行。   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.clear()</span><br></pre></td></tr></table></figure><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>用于计数，输出它被调用了多少次。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  </span><br><span class="line">    <span class="built_in">console</span>.count(<span class="string">'count'</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h3 id="error"><a href="#error" class="headerlink" title="error()"></a>error()</h3><p> 输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.error(<span class="string">"Error: %s (%i)"</span>, <span class="string">"Server is not responding"</span>,<span class="number">500</span>)</span><br></pre></td></tr></table></figure><h3 id="group"><a href="#group" class="headerlink" title="group()"></a>group()</h3><p>用于将显示的信息分组，可以把信息进行折叠和展开。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">'第一层'</span>);</span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">'第二层'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'error'</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'error'</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure></p><h3 id="groupCollapsed"><a href="#groupCollapsed" class="headerlink" title="groupCollapsed()"></a>groupCollapsed()</h3><p>与console.group方法很类似，唯一的区别是该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.groupCollapsed(<span class="string">'第一层'</span>); </span><br><span class="line"><span class="built_in">console</span>.groupCollapsed(<span class="string">'第二层'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'error'</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'error'</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure></p><h3 id="groupEnd"><a href="#groupEnd" class="headerlink" title="groupEnd()"></a>groupEnd()</h3><p>结束内联分组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">'Group One'</span>);</span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">'Group Two'</span>);</span><br><span class="line"><span class="comment">// some code</span></span><br><span class="line"><span class="built_in">console</span>.groupEnd(); <span class="comment">// Group Two 结束 </span></span><br><span class="line"><span class="built_in">console</span>.groupEnd(); <span class="comment">// Group One 结束</span></span><br></pre></td></tr></table></figure></p><h3 id="info"><a href="#info" class="headerlink" title="info()"></a>info()</h3><p>onsole.log 别名，输出信息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="string">"runoob"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="log"><a href="#log" class="headerlink" title="log()"></a>log()</h3><p>输出信息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"runoob"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="table"><a href="#table" class="headerlink" title="table()"></a>table()</h3><p>将复合类型的数据转为表格显示。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr= [ </span><br><span class="line">         &#123; <span class="attr">num</span>: <span class="string">"1"</span>&#125;,</span><br><span class="line">         &#123; <span class="attr">num</span>: <span class="string">"2"</span>&#125;, </span><br><span class="line">         &#123; <span class="attr">num</span>: <span class="string">"3"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"><span class="built_in">console</span>.table(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj= &#123;</span><br><span class="line">     a:&#123; <span class="attr">num</span>: <span class="string">"1"</span>&#125;,</span><br><span class="line">     b:&#123; <span class="attr">num</span>: <span class="string">"2"</span>&#125;,</span><br><span class="line">     c:&#123; <span class="attr">num</span>: <span class="string">"3"</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.table(obj);</span><br></pre></td></tr></table></figure></p><h3 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h3><p> 计时开始<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'计时器1'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'计时器1'</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'计时器2'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'计时器2'</span>);</span><br></pre></td></tr></table></figure></p><h3 id="timeEnd"><a href="#timeEnd" class="headerlink" title="timeEnd()"></a>timeEnd()</h3><p>计时结束<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'计时器1'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'计时器1'</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'计时器2'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'计时器2'</span>);</span><br></pre></td></tr></table></figure></p><h3 id="trace"><a href="#trace" class="headerlink" title="trace()"></a>trace()</h3><p>追踪函数的调用过程<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">a</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.trace();</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">a</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> c(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">a</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> d(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = b(<span class="string">'123'</span>);</span><br></pre></td></tr></table></figure></p><h3 id="warn"><a href="#warn" class="headerlink" title="warn()"></a>warn()</h3><p>输出警告信息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.warn(<span class="string">"警告"</span>)</span><br></pre></td></tr></table></figure></p><p><a href="http://www.runoob.com/w3cnote/javascript-console-object.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/javascript-console-object.html</a></p><p><a href="https://www.cnblogs.com/alantao/p/5859358.html" target="_blank" rel="noopener">https://www.cnblogs.com/alantao/p/5859358.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Console 对象用于 JavaScript 调试。&lt;/p&gt;
&lt;p&gt;JavaScript 原生中默认是没有 Console 对象,这是宿主对象（也就是游览器）提供的内置对象。 用于访问调试控制台, 在不同的浏览器里效果可能不同。&lt;/p&gt;
&lt;p&gt;Console 对象常见的两个用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示网页代码运行时的错误信息。&lt;/li&gt;
&lt;li&gt;提供了一个命令行接口，用来与网页代码互动。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sogrey.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://sogrey.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>下载神器 you-get</title>
    <link href="https://sogrey.github.io/article/you-get/"/>
    <id>https://sogrey.github.io/article/you-get/</id>
    <published>2019-03-14T06:44:22.000Z</published>
    <updated>2019-03-17T03:27:51.576Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在windows 上：</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><ol><li><p>从<a href="https://github.com/soimort/you-get/releases/latest" target="_blank" rel="noopener">https://github.com/soimort/you-get/releases/latest</a>下载，解压后在cmd中切换至目录下执行you-get即可</p></li><li><p>安装python,执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install you-get <span class="comment">#安装</span></span><br><span class="line">$ pip3 install --upgrade you-get <span class="comment">#更新</span></span><br><span class="line">$ pip3 install --upgrade git+https://github.com/soimort/you-get@develop <span class="comment">#更新</span></span><br></pre></td></tr></table></figure><p><a href="https://you-get.org/" target="_blank" rel="noopener">https://you-get.org/ </a></p><p><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">github</a></p><p>下载ffmpeg从<a href="http://www.ffmpeg.org/" target="_blank" rel="noopener">ffmpeg.org</a>并添加到PATH </p></li><li><p>即可在任意目录下使用you-get </p></li></ol><h2 id="2-用法"><a href="#2-用法" class="headerlink" title="2 用法"></a>2 用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Usage: you-get [OPTION]... [URL]...</span><br><span class="line"></span><br><span class="line">Startup options:</span><br><span class="line">    -V | --version                      版本信息</span><br><span class="line">    -h | --<span class="built_in">help</span>                         帮助</span><br><span class="line">    </span><br><span class="line">Dry-run options: (no actual downloading)</span><br><span class="line">    -i | --info                         列出所有可获取的视频信息</span><br><span class="line">    -u | --url                          打印URLs的提取出信息，真实链接地址</span><br><span class="line">         --json                         打印URLs的JSON格式</span><br><span class="line">    </span><br><span class="line">Download options:</span><br><span class="line">    -n | --no-merge                     不合并分片</span><br><span class="line">         --no-caption                   不下载其他文件（字幕，歌词，弹幕。。。）</span><br><span class="line">    -f | --force                        覆盖存在的文件</span><br><span class="line">    -F | --format &lt;STREAM_ID&gt;           选择下载那种清晰度的视频</span><br><span class="line">    -O | --output-filename &lt;FILE&gt;       设置输出文件名</span><br><span class="line">    -o | --output-dir &lt;PATH&gt;            输出文件夹（相对位置可用，如：~/video/）</span><br><span class="line">    -p | --player &lt;PLAYER [OPTIONS]&gt;    将提取出的真实地址传给播放器</span><br><span class="line">    -c | --cookies &lt;COOKIES_FILE&gt;       导入cookies.txt或cookies.sqlite（firefox下使用<span class="built_in">export</span>-cookies插件）</span><br><span class="line">    -x | --http-proxy &lt;HOST:PORT&gt;       使用HTTP代理下载</span><br><span class="line">    -y | --extractor-proxy &lt;HOST:PORT&gt;  仅对真实地址视频文件的下载使用HTTP代理</span><br><span class="line">         --no-proxy                     不使用代理</span><br><span class="line">    -s | --socks-proxy &lt;HOST:PORT&gt;      使用SOCKS5协议代理</span><br><span class="line">    -t | --timeout &lt;SECONDS&gt;            设置代理的timeout</span><br><span class="line">    -d | --debug                        显示traceback和其他的debug信息</span><br><span class="line">    -I | --input-file                   仅下载链接的视频不下载列表</span><br></pre></td></tr></table></figure><h2 id="3-注意"><a href="#3-注意" class="headerlink" title="3 注意"></a>3 注意</h2><p>默认情况下，下载最高清晰度视频<br>输入任意内容如：you-get “i love china” 可以从Google内搜索并下载视频，youtube-dl也有类似功能<br>bug地址：<a href="https://github.com/soimort/you-get/issues" target="_blank" rel="noopener">https://github.com/soimort/you-get/issues</a><br>-c和-p参数非常好用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="you-get" scheme="https://sogrey.github.io/categories/you-get/"/>
    
    
      <category term="you-get" scheme="https://sogrey.github.io/tags/you-get/"/>
    
      <category term="下载" scheme="https://sogrey.github.io/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>[诗歌]千古岐山</title>
    <link href="https://sogrey.github.io/article/%E2%80%9C-%E8%AF%97%E6%AD%8C-%E5%8D%83%E5%8F%A4%E5%B2%90%E5%B1%B1/"/>
    <id>https://sogrey.github.io/article/“-诗歌-千古岐山/</id>
    <published>2019-02-23T06:13:48.000Z</published>
    <updated>2019-02-23T06:20:48.474Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="千古岐山"><a href="#千古岐山" class="headerlink" title="千古岐山"></a>千古岐山</h1><blockquote><p>​    依依故乡情，乡情浓于酒。俺是在外的岐山人，偶回故乡，觉得2009中国·岐山周文化艺术节上的瞿玄和、凯丽的《千古岐山》诗朗诵令人感动，果断转了，以飨在外滴和在家滴岐山乡党们。 </p></blockquote><a id="more"></a><p>这方凤凰展翅的地方叫岐山，</p><p>这团冶炼青铜的火焰叫岐山，</p><p>这片写满沧桑的甲骨叫岐山，</p><p>这眼润德载物的清泉叫岐山，</p><p>这条西去长安的古道叫岐山，</p><p>这片演义封神的平原叫岐山，</p><p>这棵洒下千年荫凉的槐柏叫岐山，</p><p>这片蕴育五千年文明的沃土叫岐山，</p><p>啊 岐山</p><p>华夏在这里生根</p><p>周礼在这里溯源，</p><p>周公在这里称圣</p><p>薪火在这里相传，</p><p>你是东方文明圣洁的起点啊</p><p>你是天下华夏儿女心中共有的千古岐山</p><p>放眼大秦川</p><p>周文王在这里一统天下</p><p>涉过渭水河</p><p>姜子牙在这里垂钓休闲</p><p>走过古卷阿</p><p>周公姬旦在这里制礼作乐</p><p>登上五丈原</p><p>诸葛亮在这里跃马扬鞭</p><p>古公亶父 来朝走马</p><p>我们的老祖先</p><p>在这里刀耕火种 露宿风餐</p><p>率西水浒 至于岐下</p><p>那甘棠遣爱的清凉</p><p>就是让梦想响起飞的家园</p><p>当声声礼乐</p><p>唤醒了周原大地第一行温暖的炊烟</p><p>就会有一长串关于仁政德治的传说</p><p>从远古讲述到今天</p><p>啊 当新世纪的太阳</p><p>照亮了古老而又年轻的周原</p><p>一个延续了几千的梦幻正在我们的手中实现</p><p>皮影 剪纸 刺绣 社火</p><p>是“全国先进县”的烫金封面</p><p>汽车 电子 医药 化纤 </p><p>是“全国科技先进县”的丰厚内涵</p><p>臊子面 小吃宴 文王锅盔</p><p>是“全国食品先进县”的真实写照</p><p>“转鼓之乡”“陕菜之乡”</p><p>一个个美誉香飘万里名不虚传</p><p>啊 岐山</p><p>你这中华文明的摇篮</p><p>摇大了一个伟岸的民族</p><p>你让炎黄子孙血脉相连</p><p>你是我们从昨天到永远共同守候的家园</p><p>这曲凤凰婉转的鸣唱叫岐山</p><p>这阵雄辉激昂的鼓点叫岐山</p><p>这里纯朴善良的民风叫岐山</p><p>这种锐意进取的精神叫岐山</p><p>啊 岐山</p><p>厚重的岐山</p><p>崭新的岐山</p><p>充满魅力的岐山</p><p>我们深深爱恋的千古岐山</p><p>最初发布在 <a href="http://blog.sina.com.cn/s/blog_694394d301011jho.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_694394d301011jho.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;千古岐山&quot;&gt;&lt;a href=&quot;#千古岐山&quot; class=&quot;headerlink&quot; title=&quot;千古岐山&quot;&gt;&lt;/a&gt;千古岐山&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;​    依依故乡情，乡情浓于酒。俺是在外的岐山人，偶回故乡，觉得2009中国·岐山周文化艺术节上的瞿玄和、凯丽的《千古岐山》诗朗诵令人感动，果断转了，以飨在外滴和在家滴岐山乡党们。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Flutter" scheme="https://sogrey.github.io/categories/Flutter/"/>
    
    
      <category term="诗歌" scheme="https://sogrey.github.io/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>使用 npm 安装 gitbook</title>
    <link href="https://sogrey.github.io/article/%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-gitbook/"/>
    <id>https://sogrey.github.io/article/使用-npm-安装-gitbook/</id>
    <published>2019-02-14T01:50:14.000Z</published>
    <updated>2019-02-14T04:26:56.297Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>近期项目中写接口API使用了gitbook，现特意记录下以便以后查阅。</p><a id="more"></a><h2 id="本地通过npm安装Gitbook命令行工具"><a href="#本地通过npm安装Gitbook命令行工具" class="headerlink" title="本地通过npm安装Gitbook命令行工具"></a>本地通过<code>npm</code>安装<code>Gitbook</code>命令行工具</h2><p>安装 <code>node.js</code>就不说了，去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a>找到对应平台安装包安装即可。</p><p>安装好<code>node.js</code>执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p>其中 <a href="https://www.npmjs.com/package/gitbook-cli" target="_blank" rel="noopener">gitbook-cli</a> 是 gitbook 的一个命令行工具, 通过它可以在电脑上安装和管理 gitbook 的多个版本. </p><p>有时会因为权限不足报错，可提升权限安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p>安装完毕，是的，安装结束了。</p><p>检查一下是否安装成功,执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook -V</span><br></pre></td></tr></table></figure><p>查看当前安装的gitbook版本，此命令会默认同时安装 GitBook，正常输出则安装成功。</p><h2 id="Gitbook创建及使用"><a href="#Gitbook创建及使用" class="headerlink" title="Gitbook创建及使用"></a>Gitbook创建及使用</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>打开指定目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook init</span><br></pre></td></tr></table></figure><p>会自动生成两个必要的文件 README.md 和 SUMMARY.md。 </p><ul><li><strong>README.md</strong>: 书的介绍文字，如前言、简介，在章节中也可做为章节的简介。</li><li><strong>SUMMARY.md</strong>: 定制书籍的章节结构和顺序。</li></ul><blockquote><p>README.md 和 SUMMARY.md 是 GitBook 制作电子书的必要文件，可用 gitbook init 命令自动生成。 </p></blockquote><h2 id="编辑书籍目录"><a href="#编辑书籍目录" class="headerlink" title="编辑书籍目录"></a>编辑书籍目录</h2><p>GitBook 使用 <code>SUMMARY.md</code> 文件作为书籍的目录结构，可以用来制作书籍目录。</p><p>使用缩进表示目录层级结构。</p><p>编辑<code>SUMMARY.md</code>:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>[<span class="string">Introduction</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">Part I</span>](<span class="link">part1/README.md</span>)</span><br><span class="line"><span class="code">    * [Writing is nice](part1/writing.md)</span></span><br><span class="line"><span class="code">    * [GitBook is nice](part1/gitbook.md)</span></span><br><span class="line"><span class="bullet">* </span>[<span class="string">Part II</span>](<span class="link">part2/README.md</span>)</span><br><span class="line"><span class="code">    * [We love feedback](part2/feedback_please.md)</span></span><br><span class="line"><span class="code">    * [Better tools for authors](part2/better_tools.md)</span></span><br></pre></td></tr></table></figure><blockquote><p>记得编辑完保存后执行 <code>gitbook init</code>来自动生成md文件。</p></blockquote><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>执行命令 gitbook serve ，会在当前目录生成一个<code>_book</code>的目录，gitbook 会启动一个 4000 端口用于预览。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve</span><br></pre></td></tr></table></figure><p>你可以你的浏览器中打开这个网址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 预览电子书效果。 </p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook build</span><br></pre></td></tr></table></figure><p>会在书籍的文件夹中生成一个 _book 文件夹, 里面的内容即为生成的 html 文件. 我们可以使用下面命令来生成网页而不开启服务器。 </p><p>到此一个简单的book就建好了。为了更好的体验可以配置需要的插件，请自行百度，配置不是必需的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期项目中写接口API使用了gitbook，现特意记录下以便以后查阅。&lt;/p&gt;
    
    </summary>
    
      <category term="Gitbook" scheme="https://sogrey.github.io/categories/Gitbook/"/>
    
    
      <category term="node.js" scheme="https://sogrey.github.io/tags/node-js/"/>
    
      <category term="npm" scheme="https://sogrey.github.io/tags/npm/"/>
    
      <category term="gitbook" scheme="https://sogrey.github.io/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>再见2018，你好2019</title>
    <link href="https://sogrey.github.io/article/%E5%86%8D%E8%A7%812018%EF%BC%8C%E4%BD%A0%E5%A5%BD2019/"/>
    <id>https://sogrey.github.io/article/再见2018，你好2019/</id>
    <published>2019-01-15T14:53:19.000Z</published>
    <updated>2019-01-30T07:02:38.477Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>时光飞逝，2018，转眼已是过去，回首过去这一年，取得过成绩也有过不足，经过同事间的协作与共同努力，发现问题并解决问题。</p><p>2019，新的起点，新的希望。从事Android开发四余载，此时站在新的起跑点，更需要总结自己，继承并发扬过去工作中已形成的优点，汲取教训，摒弃不足以更清醒的头脑和奋发的姿态向未来目标迈进。</p><h3 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h3><p>在刚过去的2018年里，公司移动端的项目仍然分为<strong>BIM</strong>以及<strong>教育</strong>两方面。</p><p>教育项目是自从我14年入公司以来一直参与并一直维护至今的一个项目，电子书包学生端，运行在Android pad上的一款移动端项目，18年，电子书包项目并没有太大的版本变更，大多都是性能上的优化以及bug的修复，并且成功在华为pad上申请了超级权签权限。</p><p>BIM项目是公司近几年新开设并且大力宣传与开发投入的项目。移动端从最初规划的4D App到5D App,期间有过两次大的版本变更。在4D App基础上的两个4D App 非标项目，5D App 上的一个非标项目，另有上海某院BIM App项目由另外的同事负责开发。</p><p>5月份时，将公司开发的BIM引擎进行了二次封装以便用于移动开发调用，并成功用于上海BIM项目中，在此基础上又开发出纯Kotlin开发的BIM 引擎演示App并一直维护并完善以便客户能依此更方便更便捷的基于我们公司引擎开发自己的BIM App。</p><p>在开发4D、5D app时，起初api 接口文档使用word书写，随着接口数越来越多，达到近百个时，word显得非常吃力，同时需要与IOS进行公网api对接，最终废弃word，采用gitbook管理，分类管理、目录清晰，可以部署到外网多方协同。</p><h3 id="个人技能提升"><a href="#个人技能提升" class="headerlink" title="个人技能提升"></a>个人技能提升</h3><p>2018年，除了提升自己Android方面的技能，还学习了新的开发语言Kotlin，谷歌公布Kotlin将作为官方开发语言起就不断地接触过这门语言，初期都是处于写个小demo的阶段，终于在18年下半年下定决心开发一款纯kotlin开发的应用，就是上面提到的演示程序。只能说用过才知道它（Kotlin）的好。</p><p>除了kotlin语言，还有Flutter、git、跨平台的Electron、Vue（刚入门）以及学习更高效的使用VS code、AS等开发工具。</p><p>闲暇的时间也会去翻翻简书、公众号、知乎（现在的知乎也没有以前好了）阅读一些很有意思的技术类软文，从中也会有很多启发。有时自己在工作中遇到一些问题解决了，并且觉得这些解决方案很有意义记录下便起笔写篇软文发到自己博客上。</p><h3 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h3><p>2019年，仍有很多需要学习提升，已经涉足的kotlin、flutter等还需要更进一步深入学习。</p><p>对于过去的得与失，我会汲取有利的因素强化自己的工作能力，把不利的因素在自己以后的工作中排除，一年的工作让我在成为一名合格的职工道路上不断前进，我相信通过我的努力和同事的合作，以及领导们的指导，我会成为一名优秀的员工，充分发挥我的社会能力，也感谢领导给我这一个合适的工作位置，让我能为社会做出自己该有的贡献。<br>一年来，我做的可能不是最好，但我相信在今后的工作中，仍会继续不断的努力。我相信，只要我在岗位上一天，我就会做出自己最大的努力，将自己所有的精力和能力用在工作上，相信自己一定能够做好!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="年终总结" scheme="https://sogrey.github.io/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年终总结" scheme="https://sogrey.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>一张图弄懂开源协议-GPL、BSD、MIT、Mozilla、Apache和LGPL 之间的差别</title>
    <link href="https://sogrey.github.io/article/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%BC%84%E6%87%82%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE-GPL%E3%80%81BSD%E3%80%81MIT%E3%80%81Mozilla%E3%80%81Apache%E5%92%8CLGPL-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%88%AB/"/>
    <id>https://sogrey.github.io/article/一张图弄懂开源协议-GPL、BSD、MIT、Mozilla、Apache和LGPL-之间的差别/</id>
    <published>2019-01-07T04:12:44.000Z</published>
    <updated>2019-01-07T04:17:29.329Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一张 <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮大神</a>的图秒懂各大开源协议差异</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201105/bg2011050101.png" alt=""></p><ol><li><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">阮一峰的网络日志</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="开源协议" scheme="https://sogrey.github.io/categories/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="开源协议" scheme="https://sogrey.github.io/tags/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Activity启动模式(lauchMode)</title>
    <link href="https://sogrey.github.io/article/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-lauchMode/"/>
    <id>https://sogrey.github.io/article/Activity启动模式-lauchMode/</id>
    <published>2018-12-22T05:59:21.000Z</published>
    <updated>2019-01-15T07:41:12.694Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>launchMode在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。这里简单介绍一下task的概念，task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task。</p><a id="more"></a><p>Activity一共有以下四种launchMode：</p><p>1.standard</p><p>2.singleTop</p><p>3.singleTask</p><p>4.singleInstance</p><p>我们可以在AndroidManifest.xml配置<activity>的android:launchMode属性为以上四种之一即可。</activity></p><p>下面我们结合实例一一介绍这四种lanchMode：</p><p><strong>1.standard</strong>  <strong>标准模式</strong></p><p>standard模式是默认的启动模式，不用为<activity>配置android:launchMode属性即可，当然也可以指定值为standard。</activity></p><p><strong>说明：</strong> Android创建Activity时的默认模式，假设没有为Activity设置启动模式的话，默觉得标准模式。每次启动一个Activity都会又一次创建一个新的实例入栈，无论这个实例是否存在。</p><p><strong>生命周期：</strong>如上所看到的，每次被创建的实例Activity 的生命周期符合典型情况，它的onCreate、onStart、onResume都会被调用。</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity，此时C处于栈顶，启动模式为<strong>Standard 模式</strong>。</p><p><strong>简单点理解：standard启动模式Activity栈从栈底到栈顶顺序为A1 -&gt; B -&gt; C -&gt; A2…。（其中A、B、C等都表示不同的Activity实例，A1、A2则表示属于具有同一Activity类的不同实例）</strong></p><p><strong>2.singleTop</strong>  <strong>栈顶复用模式</strong></p><p>我们在上面的基础上为<activity>指定属性android:launchMode=”singleTop”，系统就会按照singleTop启动模式处理跳转行为。</activity></p><p><strong>说明：</strong>分两种处理情况：须要创建的Activity已经处于栈顶时，此时会直接复用栈顶的Activity。不会再创建新的Activity；若须要创建的Activity不处于栈顶，此时会又一次创建一个新的Activity入栈，同Standard模式一样。</p><p><strong>生命周期：</strong>若情况一中栈顶的Activity被直接复用时，它的onCreate、onStart不会被系统调用，由于它并没有发生改变。可是一个新的方法 <strong>onNewIntent</strong>会被回调（Activity被正常创建时不会回调此方法）。</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity，此时C处于栈顶，启动模式为<strong>SingleTop 模式</strong>。情况一：在C Activity中加入点击事件，须要跳转到还有一个同类型的C Activity。</p><p>结果是直接复用栈顶的C Activity。</p><p>情况二：在C Activity中加入点击事件，须要跳转到还有一个A Activity。结果是创建一个新的Activity入栈。成为栈顶。</p><p><strong>这就是singleTop启动模式，如果发现有对应的Activity实例正位于栈顶，则重复利用，不再生成新的实例。</strong></p><p><strong>简单点理解，singleTop即表示当前Activity栈中“栈顶唯一”，Activity跳转顺序或standard模式下栈结构如果为：A -&gt; B -&gt; C -&gt; D1 -&gt; D2，则singleTop启动模式为：A -&gt; B -&gt; C -&gt; D1(此时回调D1的onNewIntent()..)。</strong></p><p><strong>3.singleTask</strong>  <strong>栈内复用模式</strong></p><p><strong>说明：</strong>若须要创建的Activity已经处于栈中时，此时不会创建新的Activity，而是将存在栈中的Activity上面的其他Activity所有销毁，使它成为栈顶。</p><p><strong>生命周期：</strong>同SingleTop 模式中的情况一同样。仅仅会又一次回调Activity中的 <strong>onNewIntent</strong>方法</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity。此时C处于栈顶，启动模式为<strong>SingleTask 模式</strong>。</p><p>情况一：在C Activity中加入点击事件，须要跳转到还有一个同类型的C Activity。结果是直接用栈顶的C Activity。情况二：在C Activity中加入点击事件，须要跳转到还有一个A Activity。</p><p>结果是将A Activity上面的B、C所有销毁，使A Activity成为栈顶。 </p><p>在上面的基础上我们修改FirstActivity的属性android:launchMode=”singleTask”。</p><p><strong>这就是singleTask模式，如果发现所在Activity栈中有对应的Activity实例，则使此Activity实例之上的其他Activity实例统统出栈，使此Activity实例成为栈顶对象，显示到幕前。</strong></p><p><strong>简单点理解，singleTask表示当前Activity栈中“实例唯一”，Activity跳转顺序或standard模式下栈结构如果为：A -&gt; B1 -&gt; C -&gt; D -&gt; B2，则singleTask启动模式为：A -&gt; B1(此时回调onNewIntent()..)</strong></p><p><strong>4.singleInstance</strong>  <strong>单实例模式</strong></p><p><strong>说明：</strong> SingleInstance比較特殊，是全局单例模式，是一种加强的SingleTask模式。它除了具有它所有特性外，还加强了一点：具有此模式的Activity仅仅能单独位于一个任务栈中。</p><p>这个经常使用于系统中的应用，比如Launch、锁屏键的应用等等，整个系统中仅仅有一个！所以在我们的应用中一般不会用到。了解就可以。</p><p><strong>举例：</strong>比方 A Activity是该模式，启动A后。系统会为它创建一个单独的任务栈，由于栈内复用的特性。兴许的请求均不会创建新的Activity，除非这个独特的任务栈被系统销毁。</p><p>这种启动模式比较特殊，因为它会启用一个新的栈结构，将Acitvity放置于这个新的栈结构中，并保证不再有其他Activity实例进入。</p><p><strong>简单点理解，singleInstance所标识的Activity，当被启动时，系统会首先判断系统其他栈中是否已经存在此Activity实例，有则直接使用，并且其所在的Activity栈理论上只有它一个Activity元素。所以启动它的Activity与它并不在一个task中，所以才需要特别注意Back的问题。一般表示为：task1 A -&gt; task2 B。</strong></p><p><strong>singleInstance表示该Activity在系统范围内“实例唯一”。由此我们发现，singInstance和singleTask主要区别在与系统范围内的“实例唯一”还是当前Activity栈“实例唯一”。</strong></p><h1 id="二-启动模式的使用方式"><a href="#二-启动模式的使用方式" class="headerlink" title="二.启动模式的使用方式"></a><strong>二.启动模式的使用方式</strong></h1><h2 id="1-在-Manifest-xml中指定Activity启动模式"><a href="#1-在-Manifest-xml中指定Activity启动模式" class="headerlink" title="1. 在 Manifest.xml中指定Activity启动模式"></a><strong>1. 在 Manifest.xml中指定Activity启动模式</strong></h2><p>一种静态的指定方法，在Manifest.xml文件里声明Activity的同一时候指定它的启动模式，这样在代码中跳转时会依照指定的模式来创建Activity。样例例如以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=&quot;..activity.MultiportActivity&quot; android:launchMode=&quot;singleTask&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="2-启动Activity时。在Intent中指定启动模式去创建Activity"><a href="#2-启动Activity时。在Intent中指定启动模式去创建Activity" class="headerlink" title="2. 启动Activity时。在Intent中指定启动模式去创建Activity"></a><strong>2. 启动Activity时。在Intent中指定启动模式去创建Activity</strong></h2><p>一种动态的启动模式，在new 一个Intent后，通过Intent的addFlags方法去动态指定一个启动模式。样例例如以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent();</span><br><span class="line">intent.setClass(context, MainActivity.class);</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">context.startActivity(intent);</span><br></pre></td></tr></table></figure><hr><p><strong>注意：</strong>以上两种方式都能够为Activity指定启动模式，可是二者还是有差别的。</p><p><strong>（1）优先级</strong>：动态指定方式即另外一种比第一种优先级要<strong>高</strong>，若两者同一时候存在，以另外一种方式为准。</p><p><strong>（2）限定范围</strong>：第一种方式无法为Activity直接指定 <strong>FLAG_ACTIVITY_CLEAR_TOP</strong> 标识，另外一种方式无法为Activity指定 <strong>singleInstance</strong> 模式。</p><hr><hr><hr><hr><h1 id="三-Activity-的-Flags"><a href="#三-Activity-的-Flags" class="headerlink" title="三. Activity 的 Flags"></a><strong>三. Activity 的 Flags</strong></h1><p>标记位既能够设定Activity的启动模式，如同上面介绍的，在动态指定启动模式，比方 <strong>FLAG_ACTIVITY_NEW_TASK</strong> 和 <strong>FLAG_ACTIVITY_SINGLE_TOP</strong> 等。它还能够影响Activity 的运行状态 ，比方 <strong>FLAG_ACTIVITY_CLEAN_TOP</strong> 和 <strong>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong> 等。</p><p>以下介绍几个基本的标记位，切勿死记，理解几个就可以，须要时再查官方文档。</p><h3 id="1-FLAG-ACTIVITY-NEW-TASK"><a href="#1-FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="1. FLAG_ACTIVITY_NEW_TASK"></a><strong>1. FLAG_ACTIVITY_NEW_TASK</strong></h3><p>作用是为Activity指定 “<strong>SingleTask</strong>”启动模式。跟在AndroidMainfest.xml指定效果同样。</p><hr><h3 id="2-FLAG-ACTIVITY-SINGLE-TOP"><a href="#2-FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="2. FLAG_ACTIVITY_SINGLE_TOP"></a><strong>2. FLAG_ACTIVITY_SINGLE_TOP</strong></h3><p>作用是为Activity指定 “<strong>SingleTop</strong>”启动模式，跟在AndroidMainfest.xml指定效果同样。</p><hr><h3 id="3-FLAG-ACTIVITY-CLEAN-TOP"><a href="#3-FLAG-ACTIVITY-CLEAN-TOP" class="headerlink" title="3. FLAG_ACTIVITY_CLEAN_TOP"></a><strong>3. FLAG_ACTIVITY_CLEAN_TOP</strong></h3><p>具有此标记位的Activity，启动时会将与该Activity在同一任务栈的其他Activity出栈。一般与SingleTask启动模式一起出现。它会完毕SingleTask的作用。但事实上SingleTask启动模式默认具有此标记位的作用</p><hr><h3 id="4-FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS"><a href="#4-FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS" class="headerlink" title="4.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS"></a><strong>4.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong></h3><p>具有此标记位的Activity不会出如今历史Activity的列表中，使用场景：当某些情况下我们不希望用户通过历史列表回到Activity时，此标记位便体现了它的效果。它等同于在xml中指定Activity的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:excludeFromRecents=&quot;trure&quot;</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h1 id="四-启动模式的实际应用场景"><a href="#四-启动模式的实际应用场景" class="headerlink" title="四. 启动模式的实际应用场景"></a><strong>四. 启动模式的实际应用场景</strong></h1><p>这四种模式中的Standard模式是最普通的一种，没有什么特别注意。而SingleInstance模式是整个系统的单例模式，在我们的应用中一般不会应用到。所以，这里就具体解说 <strong>SingleTop</strong> 和 <strong>SingleTask</strong>模式的运用场景：</p><h2 id="1-SingleTask模式的运用场景"><a href="#1-SingleTask模式的运用场景" class="headerlink" title="1. SingleTask模式的运用场景"></a><strong>1. SingleTask模式的运用场景</strong></h2><p>最常见的应用场景就是保持我们应用开启后仅仅有一个Activity的实例。最典型的样例就是应用中展示的主页（Home页）。</p><p>假设用户在主页跳转到其他页面，运行多次操作后想返回到主页，假设不使用SingleTask模式，在点击返回的过程中会多次看到主页，这明显就是设计不合理了。</p><hr><hr><hr><h2 id="2-SingleTop模式的运用场景"><a href="#2-SingleTop模式的运用场景" class="headerlink" title="2. SingleTop模式的运用场景"></a><strong>2. SingleTop模式的运用场景</strong></h2><p>假设你在当前的Activity中又要启动同类型的Activity，此时建议将此类型Activity的启动模式指定为SingleTop，能够降低Activity的创建，节省内存！</p><hr><hr><hr><h2 id="3-注意：复用Activity时的生命周期回调"><a href="#3-注意：复用Activity时的生命周期回调" class="headerlink" title="3. 注意：复用Activity时的生命周期回调"></a><strong>3. 注意：复用Activity时的生命周期回调</strong></h2><p>这里还须要考虑一个<strong>Activity跳转时携带页面參数的问题</strong>。</p><p>由于当一个Activity设置了SingleTop或者SingleTask模式后，跳转此Activity出现<strong>复用原有Activity</strong>的情况时，<strong>此Activity的onCreate方法将不会再次运行。onCreate方法仅仅会在第一次创建Activity时被运行。</strong></p><p>而一般onCreate方法中会进行该页面的数据初始化、UI初始化，假设页面的展示数据无关页面跳转传递的參数，则不必操心此问题，若页面展示的数据就是通过getInten() 方法来获取，那么问题就会出现：getInten()获取的一直都是老数据，根本无法接收跳转时传送的新数据！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;launchMode在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。这里简单介绍一下task的概念，task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
      <category term="Activity" scheme="https://sogrey.github.io/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Java对象转json时空值(null)处理</title>
    <link href="https://sogrey.github.io/article/Java%E5%AF%B9%E8%B1%A1%E8%BD%ACjson%E6%97%B6%E7%A9%BA%E5%80%BC-null-%E5%A4%84%E7%90%86/"/>
    <id>https://sogrey.github.io/article/Java对象转json时空值-null-处理/</id>
    <published>2018-12-20T01:33:23.000Z</published>
    <updated>2019-01-15T07:43:32.292Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java对象在转json的时候，如果对象里面有属性值为null的话，那么在json序列化的时候要不要序列出来呢？</p></blockquote><a id="more"></a><h2 id="1-fastjson"><a href="#1-fastjson" class="headerlink" title="1 fastjson"></a>1 fastjson</h2><p>fastJson在转换java对象为json的时候，默认是不序列化null值对应的key的也就是说当对象里面的属性为空的时候，在转换成json时，不序列化那些为null值的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.java2Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sogrey.java2Json.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fastjson 版本是 1.2.54</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fastjsonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">"Sogrey"</span>);</span><br><span class="line">String str = JSONObject.toJSONString(user);<span class="comment">// fastjson默认转换是不序列化null值对应的key的</span></span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 输出结果是：&#123;"age":0,"userName":"Sogrey"&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果想把null对应的key序列化出来呢？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果需要序列化null对应的key</span></span><br><span class="line">str = JSONObject</span><br><span class="line">.toJSONString(</span><br><span class="line">user,</span><br><span class="line"><span class="keyword">new</span> SerializerFeature[] &#123; SerializerFeature.WriteMapNullValue &#125;);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 输出结果是： &#123;"age":0,"job":null,"userName":"Sogrey"&#125;</span></span><br></pre></td></tr></table></figure><p>想字符类型字段如果为null,转换输出为”“,而非null ，需要多加一个参数：WriteNullStringAsEmpty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想字符类型字段如果为null,转换输出为"",而非null ，需要多加一个参数：WriteNullStringAsEmpty</span></span><br><span class="line">str = JSONObject.toJSONString(user, <span class="keyword">new</span> SerializerFeature[] &#123;</span><br><span class="line">SerializerFeature.WriteMapNullValue,</span><br><span class="line">SerializerFeature.WriteNullStringAsEmpty &#125;);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">//输出结果是：&#123;"age":0,"job":"","userName":"Sogrey"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-Gson"><a href="#2-Gson" class="headerlink" title="2  Gson"></a>2  Gson</h2><p> gson和fastjson一样，默认是不序列化null值对应的key的</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.java2Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sogrey.java2Json.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">"Sogrey"</span>);</span><br><span class="line">Gson g = <span class="keyword">new</span> GsonBuilder().create();</span><br><span class="line">String str = g.toJson(user);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// &#123;"userName":"Sogrey","age":0&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 若是想序列化null值对应的key，只需要将以上创建代码改成以下代码就行：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">new</span> GsonBuilder().serializeNulls().create();</span><br><span class="line">str = g.toJson(user);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// &#123;"userName":"Sogrey","age":0,"job":null&#125;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/Sogrey/JavaBean2Json" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Java对象在转json的时候，如果对象里面有属性值为null的话，那么在json序列化的时候要不要序列出来呢？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Json" scheme="https://sogrey.github.io/categories/Json/"/>
    
    
      <category term="Java" scheme="https://sogrey.github.io/tags/Java/"/>
    
      <category term="Json" scheme="https://sogrey.github.io/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>Android版本和API Level对应关系</title>
    <link href="https://sogrey.github.io/article/Android%E7%89%88%E6%9C%AC%E5%92%8CAPI-Level%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/"/>
    <id>https://sogrey.github.io/article/Android版本和API-Level对应关系/</id>
    <published>2018-11-23T06:51:37.000Z</published>
    <updated>2018-12-17T09:32:00.503Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>平台版本</td><td>API 级别</td><td>VERSION_CODE</td><td>备注</td></tr><tr><td><a href="https://developer.android.com/about/versions/pie/android-9.0.html" target="_blank" rel="noopener">Android 9.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/28/changes.html" target="_blank" rel="noopener">28</a></td><td><code>Pie</code></td><td><a href="https://developer.android.com/about/versions/pie/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/oreo/android-8.1.html" target="_blank" rel="noopener">Android 8.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/27/changes.html" target="_blank" rel="noopener">27</a></td><td><code>Oreo</code></td><td><a href="https://developer.android.com/about/versions/oreo/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/oreo/android-8.0.html" target="_blank" rel="noopener">Android 8.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/26/changes.html" target="_blank" rel="noopener">26</a></td><td><code>Oreo</code></td><td><a href="https://developer.android.com/about/versions/oreo/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/nougat/android-7.1.html" target="_blank" rel="noopener">Android 7.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/25/changes.html" target="_blank" rel="noopener">25</a></td><td><code>Nougat</code></td><td><a href="https://developer.android.com/about/versions/nougat/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/nougat/android-7.0.html" target="_blank" rel="noopener">Android 7.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/24/changes.html" target="_blank" rel="noopener">24</a></td><td><code>Nougat</code></td><td><a href="https://developer.android.com/about/versions/nougat/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/marshmallow/android-6.0.html" target="_blank" rel="noopener">Android 6.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/23/changes.html" target="_blank" rel="noopener">23</a></td><td><code>Marshmallow</code></td><td><a href="https://developer.android.com/about/versions/marshmallow/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-5.1.html" target="_blank" rel="noopener">Android 5.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/22/changes.html" target="_blank" rel="noopener">22</a></td><td><code>LOLLIPOP_MR1</code></td><td><a href="https://developer.android.com/about/versions/lollipop.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-5.0.html" target="_blank" rel="noopener">Android 5.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/21/changes.html" target="_blank" rel="noopener">21</a></td><td><code>LOLLIPOP</code></td><td></td></tr><tr><td>Android 4.4W</td><td><a href="https://developer.android.com/sdk/api_diff/20/changes.html" target="_blank" rel="noopener">20</a></td><td><code>KITKAT_WATCH</code></td><td>仅限 KitKat for Wearables</td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.4.html" target="_blank" rel="noopener">Android 4.4</a></td><td><a href="https://developer.android.com/sdk/api_diff/19/changes.html" target="_blank" rel="noopener">19</a></td><td><code>KITKAT</code></td><td><a href="https://developer.android.com/about/versions/kitkat.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.3.html" target="_blank" rel="noopener">Android 4.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/18/changes.html" target="_blank" rel="noopener">18</a></td><td><code>JELLY_BEAN_MR2</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.2.html" target="_blank" rel="noopener">Android 4.2、4.2.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/17/changes.html" target="_blank" rel="noopener">17</a></td><td><code>JELLY_BEAN_MR1</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html#android-42" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.1.html" target="_blank" rel="noopener">Android 4.1、4.1.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/16/changes.html" target="_blank" rel="noopener">16</a></td><td><code>JELLY_BEAN</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html#android-41" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.0.3.html" target="_blank" rel="noopener">Android 4.0.3、4.0.4</a></td><td><a href="https://developer.android.com/sdk/api_diff/15/changes.html" target="_blank" rel="noopener">15</a></td><td><code>ICE_CREAM_SANDWICH_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-4.0-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.0.html" target="_blank" rel="noopener">Android 4.0、4.0.1、4.0.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/14/changes.html" target="_blank" rel="noopener">14</a></td><td><code>ICE_CREAM_SANDWICH</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.2.html" target="_blank" rel="noopener">Android 3.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/13/changes.html" target="_blank" rel="noopener">13</a></td><td><code>HONEYCOMB_MR2</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.1.html" target="_blank" rel="noopener">Android 3.1.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/12/changes.html" target="_blank" rel="noopener">12</a></td><td><code>HONEYCOMB_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-3.1-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.0.html" target="_blank" rel="noopener">Android 3.0.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/11/changes.html" target="_blank" rel="noopener">11</a></td><td><code>HONEYCOMB</code></td><td><a href="https://developer.android.com/about/versions/android-3.0-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.3.3.html" target="_blank" rel="noopener">Android 2.3.4 Android 2.3.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/10/changes.html" target="_blank" rel="noopener">10</a></td><td><code>GINGERBREAD_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-2.3-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.3.html" target="_blank" rel="noopener">Android 2.3.2 Android 2.3.1 Android 2.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/9/changes.html" target="_blank" rel="noopener">9</a></td><td><code>GINGERBREAD</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.2.html" target="_blank" rel="noopener">Android 2.2.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/8/changes.html" target="_blank" rel="noopener">8</a></td><td><code>FROYO</code></td><td><a href="https://developer.android.com/about/versions/android-2.2-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.1.html" target="_blank" rel="noopener">Android 2.1.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/7/changes.html" target="_blank" rel="noopener">7</a></td><td><code>ECLAIR_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-2.0-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.0.1.html" target="_blank" rel="noopener">Android 2.0.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/6/changes.html" target="_blank" rel="noopener">6</a></td><td><code>ECLAIR_0_1</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.0.html" target="_blank" rel="noopener">Android 2.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/5/changes.html" target="_blank" rel="noopener">5</a></td><td><code>ECLAIR</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.6.html" target="_blank" rel="noopener">Android 1.6</a></td><td><a href="https://developer.android.com/sdk/api_diff/4/changes.html" target="_blank" rel="noopener">4</a></td><td><code>DONUT</code></td><td><a href="https://developer.android.com/about/versions/android-1.6-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.5.html" target="_blank" rel="noopener">Android 1.5</a></td><td><a href="https://developer.android.com/sdk/api_diff/3/changes.html" target="_blank" rel="noopener">3</a></td><td><code>CUPCAKE</code></td><td><a href="https://developer.android.com/about/versions/android-1.5-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.1.html" target="_blank" rel="noopener">Android 1.1</a></td><td>2</td><td><code>BASE_1_1</code></td><td></td></tr><tr><td>Android 1.0</td><td>1</td><td><code>BASE</code></td></tr></tbody></table><p>摘自<a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels" target="_blank" rel="noopener">Android Developers#<uses-sdk></uses-sdk></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 路由跳转</title>
    <link href="https://sogrey.github.io/article/Flutter%20%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/"/>
    <id>https://sogrey.github.io/article/Flutter 路由跳转/</id>
    <published>2018-11-17T06:01:21.000Z</published>
    <updated>2018-11-17T07:46:15.895Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><h4 id="1-注册"><a href="#1-注册" class="headerlink" title="1. 注册"></a>1. 注册</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Flutter 示例'</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> MyHomePage(title: <span class="string">'Flutter 示例主页'</span>),</span><br><span class="line">      routes: &#123; <span class="comment">//静态注册路由，不能传递参数</span></span><br><span class="line">        <span class="string">"SecondPage"</span>: (BuildContext context) =&gt; <span class="keyword">new</span> Second()</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="comment">//      routes: &lt;String, WidgetBuilder&gt;&#123;</span></span><br><span class="line"><span class="comment">//        // 这里可以定义静态路由，不能传递参数</span></span><br><span class="line"><span class="comment">//        '/router/second': (_) =&gt; new Second(),</span></span><br><span class="line"><span class="comment">//      &#125;,</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///这种路由的缺点是不能传递参数。</span></span><br><span class="line">Navigator.pushNamed(context, <span class="string">"SecondPage"</span>);</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><h4 id="有参跳转"><a href="#有参跳转" class="headerlink" title="有参跳转"></a>有参跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到新的 页面我们需要调用 navigator.push方法  -</span></span><br><span class="line">Navigator.push(context,</span><br><span class="line"><span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">    builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Second(title: <span class="string">"第二个页面"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="无参跳转"><a href="#无参跳转" class="headerlink" title="无参跳转"></a>无参跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到新的 页面我们需要调用 navigator.push方法  -</span></span><br><span class="line">Navigator.push(</span><br><span class="line">    context,</span><br><span class="line">    <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">        builder: (context) =&gt; <span class="keyword">new</span> Second()</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Sogrey/flutter-demos/blob/master/flutter_route/apks/app-release.apk?raw=true" target="_blank" rel="noopener">apk</a>，<a href="https://github.com/Sogrey/flutter-demos/tree/master/flutter_route" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Flutter" scheme="https://sogrey.github.io/categories/Flutter/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
      <category term="Flutter" scheme="https://sogrey.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Android 动态调用外部jar/dex</title>
    <link href="https://sogrey.github.io/article/Android%20%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8jar&amp;dex/"/>
    <id>https://sogrey.github.io/article/Android 动态调用外部jar&amp;dex/</id>
    <published>2018-07-25T12:42:54.000Z</published>
    <updated>2018-11-07T09:23:33.217Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>现有需求，需要做一个生成外部jar，去验证已发布App有效性，这个外部jar可更新，而App不用重新发布之需要重新发布这个jar包即可。此次记录这种需求开发，jar包中以MD5加密为例。</p><a id="more"></a><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>跟往常一样，创建android studio 项目，其中包含两个app Module和两个library Module，目前都是空项目。如下图：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813151634.jpg?raw=true" alt=""></p><p>其中：</p><ul><li><code>app</code>:发布App，需要验证的App项目。</li><li><code>app2</code>:用于直接依赖测试打包jar项目。</li><li><code>lib_interface</code>:这个项目里只有一个接口<code>interface</code>，提供了一个或多个可供调用的方法,所有用到验证jar包的项目包括发布jar项目本身都要依赖于它，比如此项目中另外三个项目都要依赖于此library Module。</li><li><code>lib_md5</code>:用于发包jar包的项目。</li></ul><h2 id="创建接口类"><a href="#创建接口类" class="headerlink" title="创建接口类"></a>创建接口类</h2><p>首先处理<code>lib_interface</code>,在<code>lib_interface</code>中新建一个<code>interface</code>接口类<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_interface/src/main/java/org/sogrey/jarinterface/Md5JarInterface.java" target="_blank" rel="noopener">Md5JarInterface.java</a></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152011.jpg?raw=true" alt=""></p><p>里面只有一个方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Md5值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getMd5</span><span class="params">(String content)</span></span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152128.jpg?raw=true" alt=""></p><h2 id="实现接口类方法"><a href="#实现接口类方法" class="headerlink" title="实现接口类方法"></a>实现接口类方法</h2><p>要实现上面接口类方法，转到<code>lib_md5</code> module,首先需要先依赖<code>lib_interface</code>:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152251.jpg?raw=true" alt=""></p><p>在<code>lib_md5</code>的<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/build.gradle" target="_blank" rel="noopener">build.gradle</a>多了句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation project(<span class="string">':lib_interface'</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152320.jpg?raw=true" alt=""></p><p>依赖好之后，在<code>lib_md5</code>新建一个<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/src/main/java/org/sogrey/md5/impl/Md5Utils.java" target="_blank" rel="noopener">Md5Utils.java</a>实现<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_interface/src/main/java/org/sogrey/jarinterface/Md5JarInterface.java" target="_blank" rel="noopener">Md5JarInterface</a>接口:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152416.jpg?raw=true" alt=""></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152504.jpg?raw=true" alt=""></p><p>下面引进<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/src/main/java/org/sogrey/md5/MD5.java" target="_blank" rel="noopener">MD5.java</a>(md5算法网上多得是)，并实现<code>getMd5()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMd5</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MD5.MD5(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时一个简单的库项目功能基本完成，测试通过后就能发包jar包了。</p><h2 id="依赖测试"><a href="#依赖测试" class="headerlink" title="依赖测试"></a>依赖测试</h2><p>完成了库项目功能开发，先直接依赖测试下结果。让<code>app2</code> module依赖于<code>lib_interface</code>和<code>lib_md5</code>：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152617.jpg?raw=true" alt=""></p><p>简单修改<a href="https://github.com/Sogrey/LoadJar/blob/master/app2/src/main/res/layout/activity_main.xml" target="_blank" rel="noopener">activity_main.xml</a>:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152751.jpg?raw=true" alt=""></p><p>在<a href="https://github.com/Sogrey/LoadJar/blob/master/app2/src/main/java/org/sogrey/app2/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a>添加下面代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TextView txtResult = findViewById(R.id.txt_result);</span><br><span class="line">txtResult.setText(<span class="keyword">new</span> Md5Utils().getMd5(<span class="string">"123456"</span>));</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153202.jpg?raw=true" alt=""></p><p>编译运行测试：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153401.jpg?raw=true" alt=""></p><p>测试正常。</p><h2 id="混淆打包jar"><a href="#混淆打包jar" class="headerlink" title="混淆打包jar"></a>混淆打包jar</h2><p>经过测试<code>lib_md5</code>项目功能正常，下面准备混淆打包。</p><p>混淆模板参考<a href="https://sogrey.github.io/notes/%E6%B7%B7%E6%B7%86%E6%A8%A1%E6%9D%BF">这里</a>。</p><p>但须注意，对外调用的接口方法是不能被混淆，否则后找不到,修改<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/proguard-rules.pro" target="_blank" rel="noopener">proguard-rules.pro</a>添加如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-keep public class org.sogrey.md5.impl.Md5Utils</span><br><span class="line">-keepclasseswithmembers public class org.sogrey.md5.impl.Md5Utils&#123;</span><br><span class="line">   public String getMd5();</span><br><span class="line">&#125;</span><br><span class="line">-keep class org.sogrey.md5.impl.Md5Utils&#123;</span><br><span class="line">   public &lt;methods&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153930.jpg?raw=true" alt=""></p><p>编辑<code>lib_md5</code>的<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/build.gradle" target="_blank" rel="noopener">build.gradle</a>,修改buildTypes.release.minifyEnabled 为 true.</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155019.jpg?raw=true" alt=""></p><p>添加task：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def SDK_BASENAME = <span class="string">"MD5"</span> //名称</span><br><span class="line">def SDK_VERSION = <span class="string">"_V1.0"</span> //版本</span><br><span class="line">def sdkDestinationPath = <span class="string">"build"</span> //生成保存位置</span><br><span class="line">def zipFile = file(<span class="string">'build/intermediates/bundles/release/classes.jar'</span>) //打包源文件</span><br><span class="line"></span><br><span class="line">task deleteBuild(<span class="built_in">type</span>: Delete) &#123;</span><br><span class="line">    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + <span class="string">".jar"</span></span><br><span class="line">&#125;</span><br><span class="line">task makeJar(<span class="built_in">type</span>: Jar) &#123;</span><br><span class="line">    from zipTree(zipFile)</span><br><span class="line">    from fileTree(dir: <span class="string">'src/main'</span>,includes: [<span class="string">'assets/**'</span>])//将assets目录打入jar包</span><br><span class="line">    baseName = SDK_BASENAME + SDK_VERSION</span><br><span class="line">    destinationDir = file(sdkDestinationPath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeJar.dependsOn(deleteBuild, build)</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813154519.jpg?raw=true" alt=""></p><p><code>makeJar</code> task作用是打包生成jar，但是生成的jar是没有混淆的，再添加task:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">task proguardJar(dependsOn: [<span class="string">'makeJar'</span>], <span class="built_in">type</span>: proguard.gradle.ProGuardTask) &#123;</span><br><span class="line">    //Android 默认的 proguard 文件</span><br><span class="line">    configuration android.getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>)</span><br><span class="line">    //manifest 注册的组件对应的 proguard 文件</span><br><span class="line">    configuration <span class="string">'proguard-rules.pro'</span></span><br><span class="line">    String inJar = makeJar.archivePath.getAbsolutePath()</span><br><span class="line">    //输入 jar</span><br><span class="line">    injars inJar</span><br><span class="line">    //输出 jar</span><br><span class="line">    outjars inJar.substring(0, inJar.lastIndexOf(File.separator)) + <span class="string">"/proguard-<span class="variable">$&#123;makeJar.archiveName&#125;</span>"</span></span><br><span class="line">    //设置不删除未引用的资源(类，方法等)</span><br><span class="line">    dontshrink</span><br><span class="line">    Plugin plugin = getPlugins().hasPlugin(<span class="string">"AppPlugin"</span>) ?</span><br><span class="line">            getPlugins().findPlugin(<span class="string">"AppPlugin"</span>) :</span><br><span class="line">            getPlugins().findPlugin(<span class="string">"LibraryPlugin"</span>)</span><br><span class="line">    <span class="keyword">if</span> (plugin != null) &#123;</span><br><span class="line">        List&lt;String&gt; runtimeJarList</span><br><span class="line">        <span class="keyword">if</span> (plugin.getMetaClass().getMetaMethod(<span class="string">"getRuntimeJarList"</span>)) &#123;</span><br><span class="line">            runtimeJarList = plugin.getRuntimeJarList()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (android.getMetaClass().getMetaMethod(<span class="string">"getBootClasspath"</span>)) &#123;</span><br><span class="line">            runtimeJarList = android.getBootClasspath()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            runtimeJarList = plugin.getBootClasspath()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String runtimeJar : runtimeJarList) &#123;</span><br><span class="line">            //给 proguard 添加 runtime</span><br><span class="line">            libraryjars(runtimeJar)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155807.jpg?raw=true" alt=""></p><p><code>proguardJar</code> task 用于混淆打包。可以看到<code>proguardJar</code>里调用了<code>makeJar</code><br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155854.jpg?raw=true" alt=""></p><p>执行task,点击android studio 右上角<code>Gradle</code>展开找到<code>:lib_md5</code>,在<code>task</code>&gt;<code>other</code>里找到我们刚定义的task：<code>makeJar</code>和<code>proguardJar</code>，直接双击执行，我们需要混淆的直接双击<code>proguardJar</code> task,等待编译完成，会在<code>build</code>里生成了两个jar包：<code>MD5_V1.0.jar</code>和<code>proguard-MD5_V1.0.jar</code>，从文件名就能看出<code>proguard-MD5_V1.0.jar</code>是混淆过的。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155922.jpg?raw=true" alt=""></p><p>直接zip解压可直接看到包结构可class文件:<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155642.jpg?raw=true" alt=""></p><h2 id="jar包dx处理"><a href="#jar包dx处理" class="headerlink" title="jar包dx处理"></a>jar包dx处理</h2><p>jar包生成好之后，下面就要进行dx处理，把生成的jar拷贝到Android SDK目录下<code>build-tools\28.0.1</code>，后面的版本根据你自己的版本：<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160050.jpg?raw=true" alt=""></p><p>执行下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dx --dex --output=proguard-MD5-dex_V1.0.jar proguard-MD5_V1.0.jar</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160501.jpg?raw=true" alt=""></p><p>将会生成目标jar包：<code>proguard-MD5-dex_V1.0.jar</code><br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160542.jpg?raw=true" alt=""></p><p>同样我们zip解压后看到的是一个dex文件。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160636.jpg?raw=true" alt=""></p><h2 id="引入外部jar测试"><a href="#引入外部jar测试" class="headerlink" title="引入外部jar测试"></a>引入外部jar测试</h2><p>jar包dx处理完毕后就可以使用<code>app</code> module加载外部jar测试了，当然首先<code>app</code>须依赖于<code>lib_interface</code>。</p><p>为方便安装测试，我们把dx处理好的jar放在assets文件夹下，app安装后拷贝到sd卡再加载。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160836.jpg?raw=true" alt=""></p><p><a href="https://github.com/Sogrey/LoadJar/blob/master/app/src/main/java/org/sogrey/loadjar/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a>中代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">File cacheFile = FileUtils.getCacheDir(getApplicationContext());</span><br><span class="line">File libFile = <span class="keyword">new</span> File(cacheFile, <span class="string">"lib"</span>);</span><br><span class="line"><span class="keyword">if</span> (!libFile.exists()) libFile.mkdirs();</span><br><span class="line">String internalPath = cacheFile.getAbsolutePath() + File.separator + <span class="string">"lib"</span> + File.separator + jarName;</span><br><span class="line">File desFile = <span class="keyword">new</span> File(internalPath);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!desFile.exists()) &#123;</span><br><span class="line">        desFile.createNewFile();</span><br><span class="line">        FileUtils.copyFiles(<span class="keyword">this</span>, jarName, desFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上是将jar拷贝到sd卡，是为测试方便，实际应用中应该是下载保存到sd卡.</span></span><br><span class="line"><span class="comment">//下面开始加载dex class</span></span><br><span class="line">DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(internalPath, libFile.getAbsolutePath(), <span class="keyword">null</span>, getClassLoader());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//加载的类名为jar文件里面完整类名，写错会找不到此类hh</span></span><br><span class="line">    Class libClazz = dexClassLoader.loadClass(className);</span><br><span class="line">    <span class="keyword">final</span> Md5JarInterface md5JarInterface = (Md5JarInterface) libClazz.newInstance();</span><br><span class="line">    <span class="keyword">if</span> (md5JarInterface != <span class="keyword">null</span>) &#123;</span><br><span class="line">        txtResult.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                txtResult.setText(md5JarInterface.getMd5(<span class="string">"123456"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码通过<code>DexClassLoader</code>类加载器找到对应的类，该类实现了<code>Md5JarInterface</code>接口方法，调用该方法得到结果。</p><p>最后因为有SD卡文件读写，别忘了添加权限：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>android 6.0动态权限申请请自行百度。</p><p>测试之：<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813162747.jpg?raw=true" alt=""></p><p>项目地址：<a href="https://github.com/Sogrey/LoadJar" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;p&gt;现有需求，需要做一个生成外部jar，去验证已发布App有效性，这个外部jar可更新，而App不用重新发布之需要重新发布这个jar包即可。此次记录这种需求开发，jar包中以MD5加密为例。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
      <category term="jar" scheme="https://sogrey.github.io/tags/jar/"/>
    
      <category term="dex" scheme="https://sogrey.github.io/tags/dex/"/>
    
  </entry>
  
  <entry>
    <title>JNI Md5加密生成so文件</title>
    <link href="https://sogrey.github.io/article/JNI%20Md5%E5%8A%A0%E5%AF%86%E7%94%9F%E6%88%90so%E6%96%87%E4%BB%B6/"/>
    <id>https://sogrey.github.io/article/JNI Md5加密生成so文件/</id>
    <published>2018-07-25T12:39:13.000Z</published>
    <updated>2018-09-02T04:34:38.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JNI Md5加密生成so文件</p><p>IDE工具:Android Studio<br>编译环境:JDK1.8+Android SDK+NDK</p><a id="more"></a><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1 新建项目"></a>1 新建项目</h2><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/新建项目-Android-jni-md5.jpg" alt=""></p><p>选中“Include C++ support”,一直“Next”.<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/选择c++Support.jpg" alt=""></p><p>等待项目构建完成后<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/项目目录结构.jpg" alt=""></p><p>看到 <code>java</code>包同级有个<code>cpp</code>的包就是存放c++代码的。</p><p>而里<code>native-lib.cpp</code>的代码很简单，就是打印出一句“Hello from C++”:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jstring</span><br><span class="line"></span><br><span class="line">JNICALL</span><br><span class="line">Java_sogrey_android_1jni_1md5_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行一下：<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803161827.jpg" alt=""></p><p>这就表示我们的C++环境正常，可以开始写我们自己的代码了。</p><h2 id="2-新建Jni工具类"><a href="#2-新建Jni工具类" class="headerlink" title="2 新建Jni工具类"></a>2 新建Jni工具类</h2><p>新建一个<code>JNIUtils.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sogrey.android_jni_md5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Sogrey on 2018/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNIUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Used to load the 'native-lib' library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A native method that is implemented by the 'native-lib' native library,</span></span><br><span class="line"><span class="comment">     * which is packaged with this application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把<code>MainActivity.java</code>中的相关代码删掉</p><blockquote><p>tv.setText(stringFromJNI());</p></blockquote><p>也改成</p><blockquote><p>tv.setText(new JNIUtils().stringFromJNI());</p></blockquote><h2 id="3-生成-h文件-编写cpp文件"><a href="#3-生成-h文件-编写cpp文件" class="headerlink" title="3 生成.h文件,编写cpp文件"></a>3 生成.h文件,编写cpp文件</h2><p>Android studio的Terminal中依次执行命令：</p><blockquote><p>cd app/src/main/java<br>javah -jni sogrey.android_jni_md5.JNIUtils</p></blockquote><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM—20180803164015.jpg" alt=""></p><p>将生成的<code>sogrey_android_jni_md5_JNIUtils.h</code>头文件剪贴到<code>cpp</code>包下，并复制一份重命名为<code>sogrey_android_jni_md5_JNIUtils.cpp</code>.<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803164408.jpg" alt=""></p><p>编辑复制的<code>.cpp</code>文件，删掉多余代码只留下需要我们实现的那个方法,加上返回方法体，并导入之前的<code>.h</code>文件<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803164549.jpg" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sogrey_android_jni_md5_JNIUtils.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    stringFromJNI</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_stringFromJNI</span><br><span class="line">        (JNIEnv *env, jobject obj)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法需要返回<code>jstring</code>,可以参照之前<code>native-lib.cpp</code>里的代码实现，引入提示需要导入<code>string</code>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM截图20180803165042.jpg" alt=""></p><p>则最终代码就是：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sogrey_android_jni_md5_JNIUtils.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    stringFromJNI</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_stringFromJNI</span><br><span class="line">        (JNIEnv *env, jobject obj)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-修改CMakeLists-txt文件"><a href="#4-修改CMakeLists-txt文件" class="headerlink" title="4 修改CMakeLists.txt文件"></a>4 修改<code>CMakeLists.txt</code>文件</h2><p>我们刚刚添加了一个新的c++文件，现将它加到CMakeLists中，刚才的<code>native-lib.cpp</code>已经没有用了，注掉它<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803165959.jpg" alt=""></p><p>重新编译运行看会不会得到和之前一样的结果。（结果是一样的）<br>在<code>build</code>&gt;<code>intermediates</code>&gt;<code>cmake</code>&gt;<code>debug</code>&gt;<code>obj</code>下就能找到生成的.so文件了<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803170704.jpg" alt=""></p><h2 id="5-添加getMd5-String-的native方法"><a href="#5-添加getMd5-String-的native方法" class="headerlink" title="5 添加getMd5(String)的native方法"></a>5 添加<code>getMd5(String)</code>的native方法</h2><p>在<code>JNIUtils.java</code>中添加下面native方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定字符串md5值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 要md5加密的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> md5加密串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getMd5</span><span class="params">(String content)</span></span>;</span><br></pre></td></tr></table></figure></p><p>重复第三步操作。或者熟练了直接在<code>sogrey_android_jni_md5_JNIUtils.h</code>文件中添加：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span><br><span class="line">        (JNIEnv *, jobject, jstring);</span><br></pre></td></tr></table></figure></p><p>同样，需要在<code>sogrey_android_jni_md5_JNIUtils.cpp</code>中去实现它：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span><br><span class="line">        (JNIEnv *env, jobject obj, jstring str)&#123;</span><br><span class="line">    <span class="comment">//TODO 实现方法逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6-实现MD5加密"><a href="#6-实现MD5加密" class="headerlink" title="6 实现MD5加密"></a>6 实现MD5加密</h2><p>md5的加密方法网上很多，这里给出一个c++实现的[<a href="https://github.com/Sogrey/AndroidJniMD5/blob/master/app/src/main/cpp/MD5.cpp" target="_blank" rel="noopener">MD5.cpp</a>,<a href="https://github.com/Sogrey/AndroidJniMD5/blob/master/app/src/main/cpp/MD5.h" target="_blank" rel="noopener">MD5.h</a>].直接将两个文件引入到cpp包下，<br>在<code>sogrey_android_jni_md5_JNIUtils.cpp</code>引入</p><blockquote><p>#include “MD5.h”</p></blockquote><p>则<code>getMD5</code>方法实现：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span><br><span class="line">        (JNIEnv *env, jobject obj, jstring str) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *originStr;</span><br><span class="line">    <span class="comment">//将jstring转化成char *类型</span></span><br><span class="line">    originStr = env-&gt;GetStringUTFChars(str,JNI_FALSE);</span><br><span class="line">    MD5 md5 = MD5(originStr);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> md5Result = md5.hexdigest();</span><br><span class="line"><span class="comment">//    //将char *类型转化成jstring返回给Java层</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(md5Result.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中：JNI_FALSE 是个宏定义表示 jboolean false<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_TRUE 1</span></span><br></pre></td></tr></table></figure></p><p>运行一把，得到md5字符串<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803225817.jpg" alt=""></p><h2 id="7-生成-so文件"><a href="#7-生成-so文件" class="headerlink" title="7 生成.so文件"></a>7 生成.so文件</h2><p>在cmake.txt中添加</p><pre><code>#设置生成的so动态库最后输出的路径set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../jniLibs/${ANDROID_ABI})</code></pre><p>用来指定生成的so文件存储路径，点击<code>build</code>&gt;<code>Make project</code>,看到在<code>jniLibs</code>文件夹下生成支持4中不同内核的so文件。<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804002050.jpg" alt=""></p><p>想要配置指定内核平台，修改<code>Module</code>下的<code>build.gradle</code>中的<code>android</code>&gt;<code>defaultConfig</code> 添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags &quot;&quot;</span><br><span class="line">                abiFilters &quot;arm64-v8a&quot;,&quot;armeabi-v7a&quot;,&quot;x86&quot;,&quot;x86_64&quot;</span><br><span class="line">//Error:ABIs [armeabi] are not supported for platform. Supported ABIs are [armeabi-v7a, arm64-v8a, x86, x86_64].</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h2 id="8-修改库名称"><a href="#8-修改库名称" class="headerlink" title="8 修改库名称"></a>8 修改库名称</h2><p>默认生成的so库名称是<code>native-lib</code>,怎么修改为自定义的名称呢。</p><p>首先，修改<code>CMakeLists.txt</code>内容：修改<code>add_library</code>和<code>target_link_libraries</code>第一个参数为我们想自定定义的名称，比如<code>md5Lib</code><br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804003217.jpg" alt=""></p><p>同样需要修改<code>JNIUtils.java</code>中<code>System.loadLibrary(String)</code>的参数为上面我们自定义的名称<code>md5Lib</code><br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804003613.jpg" alt=""></p><p>重新点击<code>build</code>&gt;<code>Make project</code>,看到在<code>jniLibs</code>文件夹下生成新的so文件。<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804004506.jpg" alt=""></p><p>项目源码地址<a href="https://github.com/Sogrey/AndroidJniMD5" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JNI Md5加密生成so文件&lt;/p&gt;
&lt;p&gt;IDE工具:Android Studio&lt;br&gt;编译环境:JDK1.8+Android SDK+NDK&lt;/p&gt;
    
    </summary>
    
      <category term="JNI" scheme="https://sogrey.github.io/categories/JNI/"/>
    
    
      <category term="JNI" scheme="https://sogrey.github.io/tags/JNI/"/>
    
      <category term="Md5" scheme="https://sogrey.github.io/tags/Md5/"/>
    
  </entry>
  
  <entry>
    <title>pe装机，开机设置启动项快捷键</title>
    <link href="https://sogrey.github.io/article/PE%E8%A3%85%E6%9C%BA%EF%BC%8C%E5%BC%80%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%90%AF%E5%8A%A8%E9%A1%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://sogrey.github.io/article/PE装机，开机设置启动项快捷键/</id>
    <published>2018-07-18T14:30:03.000Z</published>
    <updated>2018-07-18T15:08:43.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>PE装机启动键来了。</p><table><thead><tr><th style="text-align:center">组装机主板</th><th style="text-align:center"></th><th style="text-align:center">品牌笔记本</th><th style="text-align:center"></th><th style="text-align:center">品牌台式机</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">主板品牌</td><td style="text-align:center">启动按键</td><td style="text-align:center">笔记本品牌</td><td style="text-align:center">启动按键</td><td style="text-align:center">台式机品牌</td><td style="text-align:center">启动按键</td></tr><tr><td style="text-align:center">华硕</td><td style="text-align:center">F8</td><td style="text-align:center">联想</td><td style="text-align:center">F12</td><td style="text-align:center">联想</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">技嘉</td><td style="text-align:center">F12</td><td style="text-align:center">宏基</td><td style="text-align:center">F12</td><td style="text-align:center">惠普</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">微星</td><td style="text-align:center">F11</td><td style="text-align:center">华硕</td><td style="text-align:center">ESC</td><td style="text-align:center">宏基</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">映泰</td><td style="text-align:center">F9</td><td style="text-align:center">惠普</td><td style="text-align:center">F9</td><td style="text-align:center">戴尔</td><td style="text-align:center">ESC</td></tr><tr><td style="text-align:center">梅捷</td><td style="text-align:center">ESC/F12</td><td style="text-align:center">联想ThinkPad</td><td style="text-align:center">F12</td><td style="text-align:center">神舟</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">七彩虹</td><td style="text-align:center">ESC/F11</td><td style="text-align:center">戴尔</td><td style="text-align:center">F12</td><td style="text-align:center">华硕</td><td style="text-align:center">F8</td></tr><tr><td style="text-align:center">华擎</td><td style="text-align:center">F11</td><td style="text-align:center">神舟</td><td style="text-align:center">F12</td><td style="text-align:center">方正</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">斯巴达克</td><td style="text-align:center">ESC</td><td style="text-align:center">东芝</td><td style="text-align:center">F12</td><td style="text-align:center">清华同方</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">昂达</td><td style="text-align:center">F11</td><td style="text-align:center">三星</td><td style="text-align:center">F12</td><td style="text-align:center">海尔</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">双敏</td><td style="text-align:center">ESC</td><td style="text-align:center">IBM</td><td style="text-align:center">F12</td><td style="text-align:center">明基</td><td style="text-align:center">F8</td></tr><tr><td style="text-align:center">翔升</td><td style="text-align:center">F10</td><td style="text-align:center">富士通</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">精英</td><td style="text-align:center">ESC/F11</td><td style="text-align:center">海尔</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">冠盟</td><td style="text-align:center">F11/F12</td><td style="text-align:center">方正</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">富士康</td><td style="text-align:center">ESC/F12</td><td style="text-align:center">清华同方</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">顶星</td><td style="text-align:center">F11/F12</td><td style="text-align:center">微星</td><td style="text-align:center">F11</td></tr><tr><td style="text-align:center">铭瑄</td><td style="text-align:center">ESC</td><td style="text-align:center">明基</td><td style="text-align:center">F9</td></tr><tr><td style="text-align:center">盈通</td><td style="text-align:center">F8</td><td style="text-align:center">技嘉</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">捷波</td><td style="text-align:center">ESC</td><td style="text-align:center">Gateway</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">Intel</td><td style="text-align:center">F12</td><td style="text-align:center">eMachines</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="VS code" scheme="https://sogrey.github.io/categories/VS-code/"/>
    
    
      <category term="VS code" scheme="https://sogrey.github.io/tags/VS-code/"/>
    
  </entry>
  
  <entry>
    <title>VS code 插件</title>
    <link href="https://sogrey.github.io/article/VS-code-%E6%8F%92%E4%BB%B6/"/>
    <id>https://sogrey.github.io/article/VS-code-插件/</id>
    <published>2018-07-04T11:09:34.000Z</published>
    <updated>2019-01-17T05:21:15.609Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>VS CODE 插件收集<br><a id="more"></a></p><ul><li><ol><li>live-server 编辑浏览html网页</li></ol></li></ul><p><a href="https://github.com/tapio/live-server" target="_blank" rel="noopener">github</a></p><p>第一步： 安装Visual Studio Code + Node.JS</p><p>第二步：通过如下命令行安装live-server</p><p>在命令符中输入 <code>npm install -g live-server</code>进行安装</p><p>如果<code>npm install -g live-server</code>安装报错就用<code>npm install live-server -gf</code>安装</p><p>第三步：打开Visual Studio Code编写HTML代码，保存。</p><p>第四步：右击HTML文件所在的文件夹，选择“在命令提示符中打开”</p><p>第五步：输入<code>live-server</code>命令</p><p>第六步：选择HTML页面浏览即可</p><ul><li><ol><li>Markdown Preview Enhanced  作者：Yiyi Wang</li></ol></li></ul><p><a href="https://github.com/shd101wyy/vscode-markdown-preview-enhanced" target="_blank" rel="noopener">github</a></p><p>VS code 扩展直接搜索 <code>Markdown Preview Enhanced</code> 安装即可。</p><ul><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode" target="_blank" rel="noopener">Polacode</a>  可以把代码生成图片（有些地方发代码结构会乱也没有代码高亮，这时候就可以生成图片再发）。</li></ol></li></ul><ol><li>快捷键 <code>Ctrl + Shift + P</code> 呼出命令窗 输入 <code>Polacode</code> </li><li>将要生成图片的代码复制到 Polacode 窗口</li><li>点击最下面按钮保存图片</li></ol><ul><li><ol><li>另一个 <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank" rel="noopener">Live Server</a> ：可以一键在本地启动服务器。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint</a> ：检查 js 语法规范，你可以使用不同的规范，如 airbnb 、standard 、google。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="noopener">TSLint</a> ：检查 typescript 语法规范。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint" target="_blank" rel="noopener">Stylelint</a> ：检查 CSS/SCSS/Less 语法规范。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="noopener">Markdownlint</a> ：检查 markdown 语法规范。</li></ol></li><li><ol><li><a href="https://emmet.io/" target="_blank" rel="noopener">Emmet</a> ：大家应该很熟悉这个插件了（很好用），VS Code 已经内置了，很到位。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="noopener">Auto Close Tag</a> ：自动闭合 html 等标签 （&lt;/…&gt;）。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="noopener">Auto Rename Tag</a> ：修改 html 标签时，自动修改闭合标签。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense" target="_blank" rel="noopener">Path Intellisense</a> ：自动提示补全路径。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a> ：可以在编辑器里直接运行代码，查看结果。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color" target="_blank" rel="noopener">Color Picker</a> ：可以直接在编辑器里打开色板，选择各种模式的颜色。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=joelday.docthis" target="_blank" rel="noopener">Document This</a> ：可以给函数、类等自动的加上详细的注释。<br>快捷键 <code>Ctrl+Alt+D</code> and <code>again Ctrl+Alt+D</code></li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="noopener">Git History</a> ：方便的查看git版本管理的详细信息。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a> ：重点介绍下这个插件，如果你有两台电脑（比如，家里和公司）都使用 VS Code ，可是在公司或家里对 VS Code 安装了插件或者修改了配置，回到家或公司又要重新弄一次，这个插件就能解决问题，同步多台电脑设置。只需要把配置上传到GitHub，在另一个地方下载配置即可</li></ol></li></ul><p><strong>1.Settings Sync</strong></p><p>最好用的插件，没有之一，一台电脑配置好之后，其它的几台电脑都不用配置。新机器登录一下就搞定了。再也不用折腾环境了，</p><p>使用GitHub Gist同步多台计算机上的设置，代码段，主题，文件图标，启动，键绑定，工作区和扩展。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-fb7068d23d498ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/657/format/webp" alt="img"></p><p><strong>2.Debugger for Chrome</strong></p><p>从VS Code调试在Google Chrome中运行的JavaScript代码。</p><p>用于在Google Chrome浏览器或支持<a href="https://chromedevtools.github.io/debugger-protocol-viewer/" target="_blank" rel="noopener">Chrome DevTools协议的</a>其他目标中调试JavaScript代码的VS Code扩展。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-a0708139132b0af8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/690/format/webp" alt="img"></p><p><strong>3.beautify</strong></p><p>格式化代码工具</p><p>美化<code>javascript</code>，<code>JSON</code>，<code>CSS</code>，<code>Sass</code>，和<code>HTML</code>在Visual Studio代码。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-4720f7961226fb6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/639/format/webp" alt="img"></p><p><strong>4.Atuo Rename Tag</strong></p><p>修改 html 标签，自动帮你完成头部和尾部闭合标签的同步修改</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-cd4c695fa202b259.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/222/format/webp" alt="img"></p><p><strong>5.中文（简体）语言包</strong></p><p><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans" target="_blank" rel="noopener">Chinese (Simplified) Language Pack for Visual Studio Code</a></p><p>将界面转换为中文，对英语不好的人，非常友好。例如我。。。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-a5e8b1406a14df59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/948/format/webp" alt="img"></p><p><strong>6.Code Spell Checker</strong></p><p>代码拼写检查器</p><p>一个与camelCase代码配合良好的基本拼写检查程序。</p><p>此拼写检查程序的目标是帮助捕获常见的拼写错误，同时保持误报数量较低。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-45a28ae47762d653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/689/format/webp" alt="img"></p><p><strong>7.vscode-icons</strong></p><p>显示Visual Studio代码的图标，目前该插件已被vscode内部支持：”文件” -&gt; “首选项” -&gt; “文件图标主题”</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-203128b9031364a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/894/format/webp" alt="img"></p><p><strong>8.guides</strong></p><p>显示代码对齐辅助线，很好用</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-1618745c4fda4807.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600/format/webp" alt="img"></p><p>9.<a href="https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets" target="_blank" rel="noopener">Rainbow Brackets</a></p><p>为圆括号，方括号和大括号提供彩虹色。这对于Lisp或Clojure程序员，当然还有JavaScript和其他程序员特别有用。</p><p>效果如下：</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-2cdbe1b95b081ece.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/530/format/webp" alt="img"></p><p><strong>10.Bracket Pair Colorizer</strong></p><p>用于着色匹配括号</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-a977f0262f623d06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/625/format/webp" alt="img"></p><p><strong>11.Indent-Rainbow</strong></p><p>用四种不同颜色交替着色文本前面的缩进</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-62d24545140dbe18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/422/format/webp" alt="img"></p><p><strong>12.filesize</strong></p><p>在状态栏中显示当前文件大小，点击后还可以看到详细创建、修改时间</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-1357457acb1f876f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p><strong>13.Import Cost</strong></p><p>对引入的计算大小</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-3862c63254d26a9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/784/format/webp" alt="img"></p><p><strong>14.Path Intellisense</strong></p><p>可自动填充文件名。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-ba8192a422d38f39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480/format/webp" alt="img"></p><p><strong>15.<a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime" target="_blank" rel="noopener">WakaTime</a> </strong></p><p>从您的编程活动自动生成的度量标准，见解和时间跟踪。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-a82197ba581c44d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p><strong>16.GitLens</strong></p><p>git日志查看插件</p><p>GitLens 增强了 Visual Studio Code 中内置的 Git 功能。例如 commits 搜索，历史记录和和查看代码作者身份，还能通过强大的比较命令获得有价值的见解等等</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-bf9b731fc13d26ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p><strong>17..REST Client</strong></p><p>REST客户端允许您直接发送HTTP请求并在Visual Studio Code中查看响应。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-fdb6811c5c899e19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/665/format/webp" alt="img"></p><p><strong>18.<a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense" target="_blank" rel="noopener">Npm Intellisense</a> </strong></p><p>用于在 import 语句中自动填充 npm 模块</p><p>require 时的包提示（最新版的vscode已经集成此功能）</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-b07c435a84dd3d97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/921/format/webp" alt="img"></p><p><strong>19.Azure Storage</strong></p><p>VS Code的Azure存储扩展允许您部署静态网站并浏览Azure Blob容器，文件共享，表和队列。按照<a href="https://code.visualstudio.com/tutorials/static-website/getting-started" target="_blank" rel="noopener">本教程</a>从VS Code部署Web应用程序到Azure存储。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-1f1b4ac882f302aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/683/format/webp" alt="img"></p><p><strong>20.Project Manager</strong></p><p>它可以帮助您轻松访问项目，无论它们位于何处。<em>不要再错过那些重要的项目了</em>。您可以定义自己的<strong>收藏</strong>项目，或选择自动检测<strong>VSCode</strong>项目，<strong>Git</strong>，<strong>Mercurial</strong>和<strong>SVN</strong>存储库或<strong>任何</strong>文件夹。</p><p>从版本8开始，您就有了专门的项目<strong>活动栏</strong>！</p><p>以下是<strong>Project Manager</strong>提供的一些功能：</p><ul><li>将任何项目保存为<strong>收藏夹</strong> </li><li>自动检测<strong>VSCode</strong>，<strong>GIT中</strong>，<strong>水银</strong>或<strong>SVN</strong>存放区</li><li>在相同或新窗口中打开项目</li><li>识别<em>已删除/重命名的</em>项目</li><li>一个<strong>状态栏</strong>标识当前项目</li><li>专门的<strong>活动栏</strong> </li></ul><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-7d3c5f109f1ccf5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp" alt="img"></p><p><strong>21.Language Support for Java(TM) by Red Hatredhat.java</strong></p><p>这个插件，这个下载次数，安装就对了。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-b6341da4f97e7344.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/859/format/webp" alt="img"></p><p><strong>22.<a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree" target="_blank" rel="noopener">Todo Tree</a> </strong></p><p>此扩展可以快速搜索（使用<a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noopener">ripgrep</a>）您的工作区以获取TODO和FIXME等注释标记，并在资源管理器窗格的树视图中显示它们。单击树中的TODO将打开文件并将光标放在包含TODO的行上。</p><p>找到的TODO也可以在打开的文件中突出显示。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-60725a36424f0e85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><h3 id="b-VS-code-主题集合"><a href="#b-VS-code-主题集合" class="headerlink" title="b.VS code 主题集合"></a>b.VS code 主题集合</h3><h4 id="1-Night-Owl"><a href="#1-Night-Owl" class="headerlink" title="1.Night Owl"></a>1.<a href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl" target="_blank" rel="noopener">Night Owl</a></h4><p>一个非常适合夜猫子的 VS Code 主题。像是为喜欢深夜编码的人精心设计的。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-19c33539e14f5928.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/901/format/webp" alt="img"></p><h4 id="2-Atom-One-Dark-Theme"><a href="#2-Atom-One-Dark-Theme" class="headerlink" title="2.Atom One Dark Theme"></a>2.<a href="https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark" target="_blank" rel="noopener">Atom One Dark Theme</a></h4><p>一个基于Atom的黑暗主题</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-3e38dbdf95fbb2ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><h4 id="3-Dracula-Official"><a href="#3-Dracula-Official" class="headerlink" title="3.Dracula Official"></a>3.<a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula" target="_blank" rel="noopener">Dracula Official</a></h4><p>官方吸血鬼主题，博主用的就是这款，很漂亮</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-2beb37cb8fb13d11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp" alt="img"></p><p>image</p><h4 id="4-One-Dark-Pro"><a href="#4-One-Dark-Pro" class="headerlink" title="4.One Dark Pro"></a>4.<a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme" target="_blank" rel="noopener">One Dark Pro</a></h4><p>Atom标志性的One Dark主题，也是VS Code下载次数最多的主题之一！</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-f5144ce214a675b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/804/format/webp" alt="img"></p><h4 id="5-Bimbo"><a href="#5-Bimbo" class="headerlink" title="5.Bimbo"></a>5.<a href="https://marketplace.visualstudio.com/items?itemName=pawelgrzybek.bimbo-theme" target="_blank" rel="noopener">Bimbo</a></h4><p>简约而现代的神奇海洋主题</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-1467662db4e0a1af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/863/format/webp" alt="img"></p><h3 id="c-代码提示提示类"><a href="#c-代码提示提示类" class="headerlink" title="c.代码提示提示类"></a>c.代码提示提示类</h3><h4 id="1-HTML-Snippets"><a href="#1-HTML-Snippets" class="headerlink" title="1.HTML Snippets"></a>1.<a href="https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets" target="_blank" rel="noopener">HTML Snippets</a></h4><p>完整的HTML代码提示，包括HTML5</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-5f3d80192ea28514.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><h4 id="2-HTML-CSS-Support"><a href="#2-HTML-CSS-Support" class="headerlink" title="2.HTML CSS Support"></a>2.<a href="https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css" target="_blank" rel="noopener">HTML CSS Support</a></h4><p>在 html 标签上写class 智能提示css样式</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-c88c506ed0224f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/522/format/webp" alt="img"></p><h4 id="3-jQuery-Code-Snippets"><a href="#3-jQuery-Code-Snippets" class="headerlink" title="3.jQuery Code Snippets"></a>3.<a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.jquerysnippets" target="_blank" rel="noopener">jQuery Code Snippets</a></h4><p>jQuery代码提示</p><p>超过130个用于JavaScript代码的jQuery代码片段。</p><p>只需键入字母’jq’即可获得所有可用jQuery代码片段的列表。</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-cbb4ea684fbc0066.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/561/format/webp" alt="img"></p><h4 id="4-HTMLHint"><a href="#4-HTMLHint" class="headerlink" title="4.HTMLHint"></a>4.<a href="https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint" target="_blank" rel="noopener">HTMLHint</a></h4><p>html代码检测，支持html5</p><p><img src="https:////upload-images.jianshu.io/upload_images/14464859-9cb58f52216b348e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/445/format/webp" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VS CODE 插件收集&lt;br&gt;
    
    </summary>
    
      <category term="VS code" scheme="https://sogrey.github.io/categories/VS-code/"/>
    
    
      <category term="VS code" scheme="https://sogrey.github.io/tags/VS-code/"/>
    
  </entry>
  
  <entry>
    <title>遍历Map的四种方法</title>
    <link href="https://sogrey.github.io/article/%E9%81%8D%E5%8E%86Map%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://sogrey.github.io/article/遍历Map的四种方法/</id>
    <published>2018-04-04T03:05:35.000Z</published>
    <updated>2018-04-04T03:44:51.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>第一种：普遍使用，二次取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.keySet遍历key和value："</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line"> System.out.println(<span class="string">"key= "</span>+ key + <span class="string">" and value= "</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.entrySet使用iterator遍历key和value："</span>);</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"> Map.Entry entry = it.next();</span><br><span class="line"> System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三种：推荐，尤其是容量大时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.entrySet遍历key和value"</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry : map.entrySet()) &#123;</span><br><span class="line"> System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第四种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.values()遍历所有的value，但不能遍历key"</span>);</span><br><span class="line"><span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line"> System.out.println(<span class="string">"value= "</span> + v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="https://sogrey.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sogrey.github.io/tags/Java/"/>
    
      <category term="Map" scheme="https://sogrey.github.io/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>15种CSS居中方式</title>
    <link href="https://sogrey.github.io/article/15%E7%A7%8DCSS%E5%B1%85%E4%B8%AD%E6%96%B9%E5%BC%8F/"/>
    <id>https://sogrey.github.io/article/15种CSS居中方式/</id>
    <published>2018-03-29T16:05:49.000Z</published>
    <updated>2018-03-29T16:20:55.181Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h1><p>CSS居中是前端工程师经常要面对的问题，也是基本技能之一。今天有时间把CSS居中的方案汇编整理了一下，目前包括水平居中，垂直居中及水平垂直居中方案共15种。如有漏掉的，还会陆续的补充进来，算做是一个备忘录吧。</p><a id="more"></a><h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1 水平居中"></a>1 水平居中</h1><h2 id="1-1-内联元素水平居中"><a href="#1-1-内联元素水平居中" class="headerlink" title="1.1 内联元素水平居中"></a>1.1 内联元素水平居中</h2><p>利用 text-align: center 可以实现在块级元素内部的内联元素水平居中。此方法对内联元素(inline), 内联块(inline-block), 内联表(inline-table), inline-flex元素水平居中都有效。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/57" target="_blank" rel="noopener">演示代码</a></p><h2 id="1-2-块级元素水平居中"><a href="#1-2-块级元素水平居中" class="headerlink" title="1.2 块级元素水平居中"></a>1.2 块级元素水平居中</h2><p>通过把固定宽度块级元素的margin-left和margin-right设成auto，就可以使块级元素水平居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-block</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/58" target="_blank" rel="noopener">演示代码</a></p><h2 id="1-3-多块级元素水平居中"><a href="#1-3-多块级元素水平居中" class="headerlink" title="1.3 多块级元素水平居中"></a>1.3 多块级元素水平居中</h2><h3 id="1-3-1-利用inline-block"><a href="#1-3-1-利用inline-block" class="headerlink" title="1.3.1 利用inline-block"></a>1.3.1 利用inline-block</h3><p>如果一行中有两个或两个以上的块级元素，通过设置块级元素的显示类型为inline-block和父容器的text-align属性从而使多块级元素水平居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/59" target="_blank" rel="noopener">演示代码</a></p><h3 id="1-3-2-利用display-flex"><a href="#1-3-2-利用display-flex" class="headerlink" title="1.3.2 利用display: flex"></a>1.3.2 利用display: flex</h3><p>利用弹性布局(flex)，实现水平居中，其中justify-content 用于设置弹性盒子元素在主轴（横轴）方向上的对齐方式，本例中设置子元素水平居中显示。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/60" target="_blank" rel="noopener">演示代码</a></p><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2 垂直居中"></a>2 垂直居中</h1><h2 id="2-1-单行内联-inline-元素垂直居中"><a href="#2-1-单行内联-inline-元素垂直居中" class="headerlink" title="2.1 单行内联(inline-)元素垂直居中"></a>2.1 单行内联(inline-)元素垂直居中</h2><p>通过设置内联元素的高度(height)和行高(line-height)相等，从而使元素垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#v-box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/61" target="_blank" rel="noopener">演示代码</a></p><h2 id="2-2-多行元素垂直居中"><a href="#2-2-多行元素垂直居中" class="headerlink" title="2.2 多行元素垂直居中"></a>2.2 多行元素垂直居中</h2><h3 id="2-2-1-利用表布局（table）"><a href="#2-2-1-利用表布局（table）" class="headerlink" title="2.2.1 利用表布局（table）"></a>2.2.1 利用表布局（table）</h3><p>利用表布局的vertical-align: middle可以实现子元素的垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-table</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-cell</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/62" target="_blank" rel="noopener">演示代码</a></p><h3 id="2-2-2-利用flex布局（flex）"><a href="#2-2-2-利用flex布局（flex）" class="headerlink" title="2.2.2 利用flex布局（flex）"></a>2.2.2 利用flex布局（flex）</h3><p>利用flex布局实现垂直居中，其中flex-direction: column定义主轴方向为纵向。因为flex布局是CSS3中定义，在较老的浏览器存在兼容性问题。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-flex</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/63" target="_blank" rel="noopener">演示代码</a></p><h3 id="2-2-3-利用“精灵元素”"><a href="#2-2-3-利用“精灵元素”" class="headerlink" title="2.2.3 利用“精灵元素”"></a>2.2.3 利用“精灵元素”</h3><p>利用“精灵元素”(ghost element)技术实现垂直居中，即在父容器内放一个100%高度的伪元素，让文本和伪元素垂直对齐，从而达到垂直居中的目的。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ghost-center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ghost-center</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1%</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ghost-center</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/64" target="_blank" rel="noopener">演示代码</a></p><h2 id="2-3-块级元素垂直居中"><a href="#2-3-块级元素垂直居中" class="headerlink" title="2.3 块级元素垂直居中"></a>2.3 块级元素垂直居中</h2><h3 id="2-3-1-固定高度的块级元素"><a href="#2-3-1-固定高度的块级元素" class="headerlink" title="2.3.1 固定高度的块级元素"></a>2.3.1 固定高度的块级元素</h3><p>我们知道居中元素的高度和宽度，垂直居中问题就很简单。通过绝对定位元素距离顶部50%，并设置margin-top向上偏移元素高度的一半，就可以实现垂直居中了。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/65" target="_blank" rel="noopener">演示代码</a></p><h3 id="2-3-2-未知高度的块级元素"><a href="#2-3-2-未知高度的块级元素" class="headerlink" title="2.3.2 未知高度的块级元素"></a>2.3.2 未知高度的块级元素</h3><p>当垂直居中的元素的高度和宽度未知时，我们可以借助CSS3中的transform属性向Y轴反向偏移50%的方法实现垂直居中。但是部分浏览器存在兼容性的问题。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/66" target="_blank" rel="noopener">演示代码</a></p><h1 id="3-水平垂直居中"><a href="#3-水平垂直居中" class="headerlink" title="3 水平垂直居中"></a>3 水平垂直居中</h1><h2 id="3-1-固定宽高元素水平垂直居中"><a href="#3-1-固定宽高元素水平垂直居中" class="headerlink" title="3.1 固定宽高元素水平垂直居中"></a>3.1 固定宽高元素水平垂直居中</h2><p>通过margin平移元素整体宽度的一半，使元素水平垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">70px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">170px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/67" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-2-未知宽高元素水平垂直居中"><a href="#3-2-未知宽高元素水平垂直居中" class="headerlink" title="3.2 未知宽高元素水平垂直居中"></a>3.2 未知宽高元素水平垂直居中</h2><p>利用2D变换，在水平和垂直两个方向都向反向平移宽高的一半，从而使元素水平垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/68" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-3-利用flex布局"><a href="#3-3-利用flex布局" class="headerlink" title="3.3 利用flex布局"></a>3.3 利用flex布局</h2><p>利用flex布局，其中justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；而align-items属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/69" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-4-利用grid布局"><a href="#3-4-利用grid布局" class="headerlink" title="3.4 利用grid布局"></a>3.4 利用grid布局</h2><p>利用grid实现水平垂直居中，兼容性较差，不推荐。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123; </span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/70" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-5-屏幕上水平垂直居中"><a href="#3-5-屏幕上水平垂直居中" class="headerlink" title="3.5 屏幕上水平垂直居中"></a>3.5 屏幕上水平垂直居中</h2><p>屏幕上水平垂直居中十分常用，常规的登录及注册页面都需要用到。要保证较好的兼容性，还需要用到表布局。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/10" target="_blank" rel="noopener">演示代码</a></p><p>来源：<a href="https://segmentfault.com/a/1190000013966650?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013966650?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简言&quot;&gt;&lt;a href=&quot;#简言&quot; class=&quot;headerlink&quot; title=&quot;简言&quot;&gt;&lt;/a&gt;简言&lt;/h1&gt;&lt;p&gt;CSS居中是前端工程师经常要面对的问题，也是基本技能之一。今天有时间把CSS居中的方案汇编整理了一下，目前包括水平居中，垂直居中及水平垂直居中方案共15种。如有漏掉的，还会陆续的补充进来，算做是一个备忘录吧。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="https://sogrey.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://sogrey.github.io/tags/css/"/>
    
      <category term="居中" scheme="https://sogrey.github.io/tags/%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>利用百度URL API实现地址与经纬度互相转换</title>
    <link href="https://sogrey.github.io/article/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6URL-API%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%9D%80-%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
    <id>https://sogrey.github.io/article/利用百度URL-API实现地址-经纬度互相转换/</id>
    <published>2018-03-29T02:33:53.000Z</published>
    <updated>2018-03-29T16:50:44.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>应用中有时我们需要经纬度与地址之间互相转化，为此引入sdk又太大材小用，百度提供了这样的API可直接调用。</p><a id="more"></a><h3 id="1、-地址查经纬度"><a href="#1、-地址查经纬度" class="headerlink" title="1、 地址查经纬度"></a>1、 地址查经纬度</h3><p>api:<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding</a></p><blockquote><p><a href="http://api.map.baidu.com/geocoder/v2/?address=[地址]&amp;output=json&amp;mcode=[mcode]&amp;ak=[你的AK" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?address=[地址]&amp;output=json&amp;mcode=[mcode]&amp;ak=[你的AK</a>]</p></blockquote><p>例如：</p><p><a href="http://api.map.baidu.com/geocoder/v2/?address=西安市&amp;output=json&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?address=西安市&amp;output=json&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G</a></p><ul><li>mcode 是安全码</li><li>ak 是你在百度申请的应用的key</li></ul><p><img src="https://sogrey.github.io/pics/百度应用ak.png" alt="百度应用ak.png"></p><p>返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"result"</span>: &#123;</span><br><span class="line"><span class="string">"location"</span>: &#123;</span><br><span class="line"><span class="string">"lng"</span>: <span class="number">108.95309827919623</span>,</span><br><span class="line"><span class="string">"lat"</span>: <span class="number">34.277799897830629</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"precise"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"confidence"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="string">"level"</span>: <span class="string">"城市"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、经纬度查地址"><a href="#2、经纬度查地址" class="headerlink" title="2、经纬度查地址"></a>2、经纬度查地址</h3><p>api:<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p><blockquote><p><a href="http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=[Latitude,Longitude]&amp;output=json&amp;pois=1&amp;mcode=[mcode]&amp;ak=[你的Ak" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=[Latitude,Longitude]&amp;output=json&amp;pois=1&amp;mcode=[mcode]&amp;ak=[你的Ak</a>]</p></blockquote><p>例如：</p><p><a href="http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=34.203034,108.891956&amp;output=json&amp;pois=1&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=34.203034,108.891956&amp;output=json&amp;pois=1&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G</a></p><p>返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">renderReverse&amp;&amp;renderReverse(&#123;</span><br><span class="line"><span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"result"</span>: &#123;</span><br><span class="line"><span class="string">"location"</span>: &#123;</span><br><span class="line"><span class="string">"lng"</span>: <span class="number">108.89195599999994</span>,</span><br><span class="line"><span class="string">"lat"</span>: <span class="number">34.20303403835331</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"formatted_address"</span>: <span class="string">"陕西省西安市雁塔区丈八一路"</span>,</span><br><span class="line"><span class="string">"business"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"addressComponent"</span>: &#123;</span><br><span class="line"><span class="string">"country"</span>: <span class="string">"中国"</span>,</span><br><span class="line"><span class="string">"country_code"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"country_code_iso"</span>: <span class="string">"CHN"</span>,</span><br><span class="line"><span class="string">"country_code_iso2"</span>: <span class="string">"CN"</span>,</span><br><span class="line"><span class="string">"province"</span>: <span class="string">"陕西省"</span>,</span><br><span class="line"><span class="string">"city"</span>: <span class="string">"西安市"</span>,</span><br><span class="line"><span class="string">"city_level"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"district"</span>: <span class="string">"雁塔区"</span>,</span><br><span class="line"><span class="string">"town"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"adcode"</span>: <span class="string">"610113"</span>,</span><br><span class="line"><span class="string">"street"</span>: <span class="string">"丈八一路"</span>,</span><br><span class="line"><span class="string">"street_number"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">""</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"pois"</span>: [&#123;</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">"丈八一路1号(跳水馆对面)"</span>,</span><br><span class="line"><span class="string">"cp"</span>: <span class="string">" "</span>,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">"附近"</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"汇鑫IBC"</span>,</span><br><span class="line"><span class="string">"poiType"</span>: <span class="string">"房地产"</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">108.89195610279563</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">34.20301956544281</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"房地产;写字楼"</span>,</span><br><span class="line"><span class="string">"tel"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">"b703e96b79f2fc878f1a89ce"</span>,</span><br><span class="line"><span class="string">"zip"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"parent_poi"</span>: &#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">0.0</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">0.0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">...,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">"汇鑫国际IBC国际商务中心A座"</span>,</span><br><span class="line"><span class="string">"cp"</span>: <span class="string">" "</span>,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">"南"</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">"59"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"汇鑫国际IBC国际商务中心A座"</span>,</span><br><span class="line"><span class="string">"poiType"</span>: <span class="string">"房地产"</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">108.89182135696913</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">34.20346740878921</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"房地产;写字楼"</span>,</span><br><span class="line"><span class="string">"tel"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">"5b37443de29841febbbd63f4"</span>,</span><br><span class="line"><span class="string">"zip"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"parent_poi"</span>: &#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">0.0</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">0.0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="string">"roads"</span>: [],</span><br><span class="line"><span class="string">"poiRegions"</span>: [],</span><br><span class="line"><span class="string">"sematic_description"</span>: <span class="string">"汇鑫IBC附近1米"</span>,</span><br><span class="line"><span class="string">"cityCode"</span>: <span class="number">233</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="java-代码："><a href="#java-代码：" class="headerlink" title="java 代码："></a>java 代码：</h3><p><a href="https://github.com/Sogrey/JavaDemo/blob/master/src/org/sogrey/url/GeoUtils.java" target="_blank" rel="noopener">https://github.com/Sogrey/JavaDemo/blob/master/src/org/sogrey/url/GeoUtils.java</a></p><h3 id="写在最后，关于使用限制"><a href="#写在最后，关于使用限制" class="headerlink" title="写在最后，关于使用限制"></a>写在最后，关于使用限制</h3><p>API是免费的，但有使用上限。上面接口的使用指南可查看。</p><p><img src="https://sogrey.github.io/pics/百度api使用限制.png" alt="百度api使用限制.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用中有时我们需要经纬度与地址之间互相转化，为此引入sdk又太大材小用，百度提供了这样的API可直接调用。&lt;/p&gt;
    
    </summary>
    
      <category term="api" scheme="https://sogrey.github.io/categories/api/"/>
    
    
      <category term="百度 api" scheme="https://sogrey.github.io/tags/%E7%99%BE%E5%BA%A6-api/"/>
    
      <category term="地址与经纬度" scheme="https://sogrey.github.io/tags/%E5%9C%B0%E5%9D%80%E4%B8%8E%E7%BB%8F%E7%BA%AC%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android获取view宽高的三种方式</title>
    <link href="https://sogrey.github.io/article/Android%E8%8E%B7%E5%8F%96view%E5%AE%BD%E9%AB%98%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://sogrey.github.io/article/Android获取view宽高的三种方式/</id>
    <published>2018-03-26T15:30:27.000Z</published>
    <updated>2018-03-26T15:37:06.555Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>getMeasuredHeight()与getHeight的区别</p></blockquote><p>实际上在当屏幕可以包裹内容的时候，他们的值相等，<br>只有当view超出屏幕后，才能看出他们的区别：<br>getMeasuredHeight()是实际View的大小，与屏幕无关，<br>而getHeight的大小此时则是屏幕的大小。<br>当超出屏幕后，getMeasuredHeight()等于getHeight()加上屏幕之外没有显示的大小</p><a id="more"></a><p>具体方法</p><p>我们知道在oncreate中View.getWidth和View.getHeight无法获得一个view的高度和宽度，这是因为View组件 布局要在onResume回调后完成。</p><p>下面说三种方式</p><ul><li>getViewTreeObserver</li></ul><p>使用 getViewTreeObserver().addOnGlobalLayoutListener()来获得宽度或者高度。</p><p>OnGlobalLayoutListener 是ViewTreeObserver的内部类，当一个视图树的布局发生改变时，可以被ViewTreeObserver监听到，这是一个注册监听视图树的观察者(observer)，在视图树的全局事件改变时得到通知。ViewTreeObserver不能直接实例化，而是通过getViewTreeObserver()获得。</p><p>除了OnGlobalLayoutListener ，ViewTreeObserver还有如下内部类：<br>interfaceViewTreeObserver.OnGlobalFocusChangeListener<br>当在一个视图树中的焦点状态发生改变时，所要调用的回调函数的接口类<br>interfaceViewTreeObserver.OnGlobalLayoutListener<br>当在一个视图树中全局布局发生改变或者视图树中的某个视图的可视状态发生改变时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnPreDrawListener</li></ul><p>当一个视图树将要绘制时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnScrollChangedListener</li></ul><p>当一个视图树中的一些组件发生滚动时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnTouchModeChangeListener</li></ul><p>当一个视图树的触摸模式发生改变时，所要调用的回调函数的接口类</p><h3 id="利用OnGlobalLayoutListener来获得一个视图的真实高度。"><a href="#利用OnGlobalLayoutListener来获得一个视图的真实高度。" class="headerlink" title="利用OnGlobalLayoutListener来获得一个视图的真实高度。"></a>利用OnGlobalLayoutListener来获得一个视图的真实高度。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mHeaderViewHeight; </span><br><span class="line"><span class="keyword">private</span> View mHeaderView; </span><br><span class="line">  </span><br><span class="line">..... </span><br><span class="line">  </span><br><span class="line">mHeaderView.getViewTreeObserver().addOnGlobalLayoutListener( </span><br><span class="line"> <span class="keyword">new</span> OnGlobalLayoutListener() &#123; </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123; </span><br><span class="line">                                                          </span><br><span class="line">   mHeaderViewHeight = mHeaderView.getHeight(); </span><br><span class="line">   mHeaderView.getViewTreeObserver() </span><br><span class="line">     .removeGlobalOnLayoutListener(<span class="keyword">this</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>注意：但是需要注意的是OnGlobalLayoutListener可能会被多次触发，因此在得到了高度之后，要将OnGlobalLayoutListener注销掉。</p></blockquote></blockquote><h3 id="View-post事件中获取"><a href="#View-post事件中获取" class="headerlink" title="View post事件中获取"></a>View post事件中获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHeight</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123; </span><br><span class="line"> TextView tv; </span><br><span class="line">  </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState); </span><br><span class="line">  setContentView(R.layout.activity_activity_b); </span><br><span class="line">   tv = (TextView) findViewById(R.id.textView); </span><br><span class="line">  tv.post(<span class="keyword">new</span> Runnable() &#123; </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> height= tv.getHeight(); </span><br><span class="line">   &#125; </span><br><span class="line">  &#125;); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接测量计算"><a href="#直接测量计算" class="headerlink" title="直接测量计算"></a>直接测量计算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intw=View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>,View.MeasureSpec.UNSPECIFIED); </span><br><span class="line"><span class="keyword">int</span> inth=View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>,View.MeasureSpec.UNSPECIFIED); </span><br><span class="line">textView.measure(intw, inth); </span><br><span class="line"><span class="keyword">int</span> intwidth = textView.getMeasuredWidth(); </span><br><span class="line"><span class="keyword">int</span> intheight = textView.getMeasuredHeight();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;getMeasuredHeight()与getHeight的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上在当屏幕可以包裹内容的时候，他们的值相等，&lt;br&gt;只有当view超出屏幕后，才能看出他们的区别：&lt;br&gt;getMeasuredHeight()是实际View的大小，与屏幕无关，&lt;br&gt;而getHeight的大小此时则是屏幕的大小。&lt;br&gt;当超出屏幕后，getMeasuredHeight()等于getHeight()加上屏幕之外没有显示的大小&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
