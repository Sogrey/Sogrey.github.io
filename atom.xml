<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sogrey</title>
  
  <subtitle>必须努力，付出不亚于任何人努力</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sogrey.github.io/"/>
  <updated>2019-01-07T04:17:29.329Z</updated>
  <id>https://sogrey.github.io/</id>
  
  <author>
    <name>Sogrey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一张图弄懂开源协议-GPL、BSD、MIT、Mozilla、Apache和LGPL 之间的差别</title>
    <link href="https://sogrey.github.io/article/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%BC%84%E6%87%82%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE-GPL%E3%80%81BSD%E3%80%81MIT%E3%80%81Mozilla%E3%80%81Apache%E5%92%8CLGPL-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%88%AB/"/>
    <id>https://sogrey.github.io/article/一张图弄懂开源协议-GPL、BSD、MIT、Mozilla、Apache和LGPL-之间的差别/</id>
    <published>2019-01-07T04:12:44.000Z</published>
    <updated>2019-01-07T04:17:29.329Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一张 <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮大神</a>的图秒懂各大开源协议差异</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201105/bg2011050101.png" alt=""></p><ol><li><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">阮一峰的网络日志</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="开源协议" scheme="https://sogrey.github.io/categories/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="开源协议" scheme="https://sogrey.github.io/tags/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Activity启动模式(lauchMode)</title>
    <link href="https://sogrey.github.io/article/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-lauchMode/"/>
    <id>https://sogrey.github.io/article/Activity启动模式-lauchMode/</id>
    <published>2018-12-22T05:59:21.000Z</published>
    <updated>2019-01-15T07:41:12.694Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>launchMode在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。这里简单介绍一下task的概念，task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task。</p><a id="more"></a><p>Activity一共有以下四种launchMode：</p><p>1.standard</p><p>2.singleTop</p><p>3.singleTask</p><p>4.singleInstance</p><p>我们可以在AndroidManifest.xml配置<activity>的android:launchMode属性为以上四种之一即可。</activity></p><p>下面我们结合实例一一介绍这四种lanchMode：</p><p><strong>1.standard</strong>  <strong>标准模式</strong></p><p>standard模式是默认的启动模式，不用为<activity>配置android:launchMode属性即可，当然也可以指定值为standard。</activity></p><p><strong>说明：</strong> Android创建Activity时的默认模式，假设没有为Activity设置启动模式的话，默觉得标准模式。每次启动一个Activity都会又一次创建一个新的实例入栈，无论这个实例是否存在。</p><p><strong>生命周期：</strong>如上所看到的，每次被创建的实例Activity 的生命周期符合典型情况，它的onCreate、onStart、onResume都会被调用。</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity，此时C处于栈顶，启动模式为<strong>Standard 模式</strong>。</p><p><strong>简单点理解：standard启动模式Activity栈从栈底到栈顶顺序为A1 -&gt; B -&gt; C -&gt; A2…。（其中A、B、C等都表示不同的Activity实例，A1、A2则表示属于具有同一Activity类的不同实例）</strong></p><p><strong>2.singleTop</strong>  <strong>栈顶复用模式</strong></p><p>我们在上面的基础上为<activity>指定属性android:launchMode=”singleTop”，系统就会按照singleTop启动模式处理跳转行为。</activity></p><p><strong>说明：</strong>分两种处理情况：须要创建的Activity已经处于栈顶时，此时会直接复用栈顶的Activity。不会再创建新的Activity；若须要创建的Activity不处于栈顶，此时会又一次创建一个新的Activity入栈，同Standard模式一样。</p><p><strong>生命周期：</strong>若情况一中栈顶的Activity被直接复用时，它的onCreate、onStart不会被系统调用，由于它并没有发生改变。可是一个新的方法 <strong>onNewIntent</strong>会被回调（Activity被正常创建时不会回调此方法）。</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity，此时C处于栈顶，启动模式为<strong>SingleTop 模式</strong>。情况一：在C Activity中加入点击事件，须要跳转到还有一个同类型的C Activity。</p><p>结果是直接复用栈顶的C Activity。</p><p>情况二：在C Activity中加入点击事件，须要跳转到还有一个A Activity。结果是创建一个新的Activity入栈。成为栈顶。</p><p><strong>这就是singleTop启动模式，如果发现有对应的Activity实例正位于栈顶，则重复利用，不再生成新的实例。</strong></p><p><strong>简单点理解，singleTop即表示当前Activity栈中“栈顶唯一”，Activity跳转顺序或standard模式下栈结构如果为：A -&gt; B -&gt; C -&gt; D1 -&gt; D2，则singleTop启动模式为：A -&gt; B -&gt; C -&gt; D1(此时回调D1的onNewIntent()..)。</strong></p><p><strong>3.singleTask</strong>  <strong>栈内复用模式</strong></p><p><strong>说明：</strong>若须要创建的Activity已经处于栈中时，此时不会创建新的Activity，而是将存在栈中的Activity上面的其他Activity所有销毁，使它成为栈顶。</p><p><strong>生命周期：</strong>同SingleTop 模式中的情况一同样。仅仅会又一次回调Activity中的 <strong>onNewIntent</strong>方法</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity。此时C处于栈顶，启动模式为<strong>SingleTask 模式</strong>。</p><p>情况一：在C Activity中加入点击事件，须要跳转到还有一个同类型的C Activity。结果是直接用栈顶的C Activity。情况二：在C Activity中加入点击事件，须要跳转到还有一个A Activity。</p><p>结果是将A Activity上面的B、C所有销毁，使A Activity成为栈顶。 </p><p>在上面的基础上我们修改FirstActivity的属性android:launchMode=”singleTask”。</p><p><strong>这就是singleTask模式，如果发现所在Activity栈中有对应的Activity实例，则使此Activity实例之上的其他Activity实例统统出栈，使此Activity实例成为栈顶对象，显示到幕前。</strong></p><p><strong>简单点理解，singleTask表示当前Activity栈中“实例唯一”，Activity跳转顺序或standard模式下栈结构如果为：A -&gt; B1 -&gt; C -&gt; D -&gt; B2，则singleTask启动模式为：A -&gt; B1(此时回调onNewIntent()..)</strong></p><p><strong>4.singleInstance</strong>  <strong>单实例模式</strong></p><p><strong>说明：</strong> SingleInstance比較特殊，是全局单例模式，是一种加强的SingleTask模式。它除了具有它所有特性外，还加强了一点：具有此模式的Activity仅仅能单独位于一个任务栈中。</p><p>这个经常使用于系统中的应用，比如Launch、锁屏键的应用等等，整个系统中仅仅有一个！所以在我们的应用中一般不会用到。了解就可以。</p><p><strong>举例：</strong>比方 A Activity是该模式，启动A后。系统会为它创建一个单独的任务栈，由于栈内复用的特性。兴许的请求均不会创建新的Activity，除非这个独特的任务栈被系统销毁。</p><p>这种启动模式比较特殊，因为它会启用一个新的栈结构，将Acitvity放置于这个新的栈结构中，并保证不再有其他Activity实例进入。</p><p><strong>简单点理解，singleInstance所标识的Activity，当被启动时，系统会首先判断系统其他栈中是否已经存在此Activity实例，有则直接使用，并且其所在的Activity栈理论上只有它一个Activity元素。所以启动它的Activity与它并不在一个task中，所以才需要特别注意Back的问题。一般表示为：task1 A -&gt; task2 B。</strong></p><p><strong>singleInstance表示该Activity在系统范围内“实例唯一”。由此我们发现，singInstance和singleTask主要区别在与系统范围内的“实例唯一”还是当前Activity栈“实例唯一”。</strong></p><h1 id="二-启动模式的使用方式"><a href="#二-启动模式的使用方式" class="headerlink" title="二.启动模式的使用方式"></a><strong>二.启动模式的使用方式</strong></h1><h2 id="1-在-Manifest-xml中指定Activity启动模式"><a href="#1-在-Manifest-xml中指定Activity启动模式" class="headerlink" title="1. 在 Manifest.xml中指定Activity启动模式"></a><strong>1. 在 Manifest.xml中指定Activity启动模式</strong></h2><p>一种静态的指定方法，在Manifest.xml文件里声明Activity的同一时候指定它的启动模式，这样在代码中跳转时会依照指定的模式来创建Activity。样例例如以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=&quot;..activity.MultiportActivity&quot; android:launchMode=&quot;singleTask&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="2-启动Activity时。在Intent中指定启动模式去创建Activity"><a href="#2-启动Activity时。在Intent中指定启动模式去创建Activity" class="headerlink" title="2. 启动Activity时。在Intent中指定启动模式去创建Activity"></a><strong>2. 启动Activity时。在Intent中指定启动模式去创建Activity</strong></h2><p>一种动态的启动模式，在new 一个Intent后，通过Intent的addFlags方法去动态指定一个启动模式。样例例如以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent();</span><br><span class="line">intent.setClass(context, MainActivity.class);</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">context.startActivity(intent);</span><br></pre></td></tr></table></figure><hr><p><strong>注意：</strong>以上两种方式都能够为Activity指定启动模式，可是二者还是有差别的。</p><p><strong>（1）优先级</strong>：动态指定方式即另外一种比第一种优先级要<strong>高</strong>，若两者同一时候存在，以另外一种方式为准。</p><p><strong>（2）限定范围</strong>：第一种方式无法为Activity直接指定 <strong>FLAG_ACTIVITY_CLEAR_TOP</strong> 标识，另外一种方式无法为Activity指定 <strong>singleInstance</strong> 模式。</p><hr><hr><hr><hr><h1 id="三-Activity-的-Flags"><a href="#三-Activity-的-Flags" class="headerlink" title="三. Activity 的 Flags"></a><strong>三. Activity 的 Flags</strong></h1><p>标记位既能够设定Activity的启动模式，如同上面介绍的，在动态指定启动模式，比方 <strong>FLAG_ACTIVITY_NEW_TASK</strong> 和 <strong>FLAG_ACTIVITY_SINGLE_TOP</strong> 等。它还能够影响Activity 的运行状态 ，比方 <strong>FLAG_ACTIVITY_CLEAN_TOP</strong> 和 <strong>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong> 等。</p><p>以下介绍几个基本的标记位，切勿死记，理解几个就可以，须要时再查官方文档。</p><h3 id="1-FLAG-ACTIVITY-NEW-TASK"><a href="#1-FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="1. FLAG_ACTIVITY_NEW_TASK"></a><strong>1. FLAG_ACTIVITY_NEW_TASK</strong></h3><p>作用是为Activity指定 “<strong>SingleTask</strong>”启动模式。跟在AndroidMainfest.xml指定效果同样。</p><hr><h3 id="2-FLAG-ACTIVITY-SINGLE-TOP"><a href="#2-FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="2. FLAG_ACTIVITY_SINGLE_TOP"></a><strong>2. FLAG_ACTIVITY_SINGLE_TOP</strong></h3><p>作用是为Activity指定 “<strong>SingleTop</strong>”启动模式，跟在AndroidMainfest.xml指定效果同样。</p><hr><h3 id="3-FLAG-ACTIVITY-CLEAN-TOP"><a href="#3-FLAG-ACTIVITY-CLEAN-TOP" class="headerlink" title="3. FLAG_ACTIVITY_CLEAN_TOP"></a><strong>3. FLAG_ACTIVITY_CLEAN_TOP</strong></h3><p>具有此标记位的Activity，启动时会将与该Activity在同一任务栈的其他Activity出栈。一般与SingleTask启动模式一起出现。它会完毕SingleTask的作用。但事实上SingleTask启动模式默认具有此标记位的作用</p><hr><h3 id="4-FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS"><a href="#4-FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS" class="headerlink" title="4.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS"></a><strong>4.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong></h3><p>具有此标记位的Activity不会出如今历史Activity的列表中，使用场景：当某些情况下我们不希望用户通过历史列表回到Activity时，此标记位便体现了它的效果。它等同于在xml中指定Activity的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:excludeFromRecents=&quot;trure&quot;</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h1 id="四-启动模式的实际应用场景"><a href="#四-启动模式的实际应用场景" class="headerlink" title="四. 启动模式的实际应用场景"></a><strong>四. 启动模式的实际应用场景</strong></h1><p>这四种模式中的Standard模式是最普通的一种，没有什么特别注意。而SingleInstance模式是整个系统的单例模式，在我们的应用中一般不会应用到。所以，这里就具体解说 <strong>SingleTop</strong> 和 <strong>SingleTask</strong>模式的运用场景：</p><h2 id="1-SingleTask模式的运用场景"><a href="#1-SingleTask模式的运用场景" class="headerlink" title="1. SingleTask模式的运用场景"></a><strong>1. SingleTask模式的运用场景</strong></h2><p>最常见的应用场景就是保持我们应用开启后仅仅有一个Activity的实例。最典型的样例就是应用中展示的主页（Home页）。</p><p>假设用户在主页跳转到其他页面，运行多次操作后想返回到主页，假设不使用SingleTask模式，在点击返回的过程中会多次看到主页，这明显就是设计不合理了。</p><hr><hr><hr><h2 id="2-SingleTop模式的运用场景"><a href="#2-SingleTop模式的运用场景" class="headerlink" title="2. SingleTop模式的运用场景"></a><strong>2. SingleTop模式的运用场景</strong></h2><p>假设你在当前的Activity中又要启动同类型的Activity，此时建议将此类型Activity的启动模式指定为SingleTop，能够降低Activity的创建，节省内存！</p><hr><hr><hr><h2 id="3-注意：复用Activity时的生命周期回调"><a href="#3-注意：复用Activity时的生命周期回调" class="headerlink" title="3. 注意：复用Activity时的生命周期回调"></a><strong>3. 注意：复用Activity时的生命周期回调</strong></h2><p>这里还须要考虑一个<strong>Activity跳转时携带页面參数的问题</strong>。</p><p>由于当一个Activity设置了SingleTop或者SingleTask模式后，跳转此Activity出现<strong>复用原有Activity</strong>的情况时，<strong>此Activity的onCreate方法将不会再次运行。onCreate方法仅仅会在第一次创建Activity时被运行。</strong></p><p>而一般onCreate方法中会进行该页面的数据初始化、UI初始化，假设页面的展示数据无关页面跳转传递的參数，则不必操心此问题，若页面展示的数据就是通过getInten() 方法来获取，那么问题就会出现：getInten()获取的一直都是老数据，根本无法接收跳转时传送的新数据！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;launchMode在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。这里简单介绍一下task的概念，task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
      <category term="Activity" scheme="https://sogrey.github.io/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Java对象转json时空值(null)处理</title>
    <link href="https://sogrey.github.io/article/Java%E5%AF%B9%E8%B1%A1%E8%BD%ACjson%E6%97%B6%E7%A9%BA%E5%80%BC-null-%E5%A4%84%E7%90%86/"/>
    <id>https://sogrey.github.io/article/Java对象转json时空值-null-处理/</id>
    <published>2018-12-20T01:33:23.000Z</published>
    <updated>2019-01-15T07:43:32.292Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java对象在转json的时候，如果对象里面有属性值为null的话，那么在json序列化的时候要不要序列出来呢？</p></blockquote><a id="more"></a><h2 id="1-fastjson"><a href="#1-fastjson" class="headerlink" title="1 fastjson"></a>1 fastjson</h2><p>fastJson在转换java对象为json的时候，默认是不序列化null值对应的key的也就是说当对象里面的属性为空的时候，在转换成json时，不序列化那些为null值的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.java2Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sogrey.java2Json.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fastjson 版本是 1.2.54</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fastjsonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">"Sogrey"</span>);</span><br><span class="line">String str = JSONObject.toJSONString(user);<span class="comment">// fastjson默认转换是不序列化null值对应的key的</span></span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 输出结果是：&#123;"age":0,"userName":"Sogrey"&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果想把null对应的key序列化出来呢？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果需要序列化null对应的key</span></span><br><span class="line">str = JSONObject</span><br><span class="line">.toJSONString(</span><br><span class="line">user,</span><br><span class="line"><span class="keyword">new</span> SerializerFeature[] &#123; SerializerFeature.WriteMapNullValue &#125;);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 输出结果是： &#123;"age":0,"job":null,"userName":"Sogrey"&#125;</span></span><br></pre></td></tr></table></figure><p>想字符类型字段如果为null,转换输出为”“,而非null ，需要多加一个参数：WriteNullStringAsEmpty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想字符类型字段如果为null,转换输出为"",而非null ，需要多加一个参数：WriteNullStringAsEmpty</span></span><br><span class="line">str = JSONObject.toJSONString(user, <span class="keyword">new</span> SerializerFeature[] &#123;</span><br><span class="line">SerializerFeature.WriteMapNullValue,</span><br><span class="line">SerializerFeature.WriteNullStringAsEmpty &#125;);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">//输出结果是：&#123;"age":0,"job":"","userName":"Sogrey"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-Gson"><a href="#2-Gson" class="headerlink" title="2  Gson"></a>2  Gson</h2><p> gson和fastjson一样，默认是不序列化null值对应的key的</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.java2Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sogrey.java2Json.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">"Sogrey"</span>);</span><br><span class="line">Gson g = <span class="keyword">new</span> GsonBuilder().create();</span><br><span class="line">String str = g.toJson(user);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// &#123;"userName":"Sogrey","age":0&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 若是想序列化null值对应的key，只需要将以上创建代码改成以下代码就行：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">new</span> GsonBuilder().serializeNulls().create();</span><br><span class="line">str = g.toJson(user);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// &#123;"userName":"Sogrey","age":0,"job":null&#125;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/Sogrey/JavaBean2Json" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Java对象在转json的时候，如果对象里面有属性值为null的话，那么在json序列化的时候要不要序列出来呢？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Json" scheme="https://sogrey.github.io/categories/Json/"/>
    
    
      <category term="Java" scheme="https://sogrey.github.io/tags/Java/"/>
    
      <category term="Json" scheme="https://sogrey.github.io/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>Android版本和API Level对应关系</title>
    <link href="https://sogrey.github.io/article/Android%E7%89%88%E6%9C%AC%E5%92%8CAPI-Level%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/"/>
    <id>https://sogrey.github.io/article/Android版本和API-Level对应关系/</id>
    <published>2018-11-23T06:51:37.000Z</published>
    <updated>2018-12-17T09:32:00.503Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>平台版本</td><td>API 级别</td><td>VERSION_CODE</td><td>备注</td></tr><tr><td><a href="https://developer.android.com/about/versions/pie/android-9.0.html" target="_blank" rel="noopener">Android 9.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/28/changes.html" target="_blank" rel="noopener">28</a></td><td><code>Pie</code></td><td><a href="https://developer.android.com/about/versions/pie/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/oreo/android-8.1.html" target="_blank" rel="noopener">Android 8.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/27/changes.html" target="_blank" rel="noopener">27</a></td><td><code>Oreo</code></td><td><a href="https://developer.android.com/about/versions/oreo/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/oreo/android-8.0.html" target="_blank" rel="noopener">Android 8.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/26/changes.html" target="_blank" rel="noopener">26</a></td><td><code>Oreo</code></td><td><a href="https://developer.android.com/about/versions/oreo/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/nougat/android-7.1.html" target="_blank" rel="noopener">Android 7.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/25/changes.html" target="_blank" rel="noopener">25</a></td><td><code>Nougat</code></td><td><a href="https://developer.android.com/about/versions/nougat/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/nougat/android-7.0.html" target="_blank" rel="noopener">Android 7.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/24/changes.html" target="_blank" rel="noopener">24</a></td><td><code>Nougat</code></td><td><a href="https://developer.android.com/about/versions/nougat/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/marshmallow/android-6.0.html" target="_blank" rel="noopener">Android 6.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/23/changes.html" target="_blank" rel="noopener">23</a></td><td><code>Marshmallow</code></td><td><a href="https://developer.android.com/about/versions/marshmallow/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-5.1.html" target="_blank" rel="noopener">Android 5.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/22/changes.html" target="_blank" rel="noopener">22</a></td><td><code>LOLLIPOP_MR1</code></td><td><a href="https://developer.android.com/about/versions/lollipop.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-5.0.html" target="_blank" rel="noopener">Android 5.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/21/changes.html" target="_blank" rel="noopener">21</a></td><td><code>LOLLIPOP</code></td><td></td></tr><tr><td>Android 4.4W</td><td><a href="https://developer.android.com/sdk/api_diff/20/changes.html" target="_blank" rel="noopener">20</a></td><td><code>KITKAT_WATCH</code></td><td>仅限 KitKat for Wearables</td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.4.html" target="_blank" rel="noopener">Android 4.4</a></td><td><a href="https://developer.android.com/sdk/api_diff/19/changes.html" target="_blank" rel="noopener">19</a></td><td><code>KITKAT</code></td><td><a href="https://developer.android.com/about/versions/kitkat.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.3.html" target="_blank" rel="noopener">Android 4.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/18/changes.html" target="_blank" rel="noopener">18</a></td><td><code>JELLY_BEAN_MR2</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.2.html" target="_blank" rel="noopener">Android 4.2、4.2.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/17/changes.html" target="_blank" rel="noopener">17</a></td><td><code>JELLY_BEAN_MR1</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html#android-42" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.1.html" target="_blank" rel="noopener">Android 4.1、4.1.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/16/changes.html" target="_blank" rel="noopener">16</a></td><td><code>JELLY_BEAN</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html#android-41" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.0.3.html" target="_blank" rel="noopener">Android 4.0.3、4.0.4</a></td><td><a href="https://developer.android.com/sdk/api_diff/15/changes.html" target="_blank" rel="noopener">15</a></td><td><code>ICE_CREAM_SANDWICH_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-4.0-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.0.html" target="_blank" rel="noopener">Android 4.0、4.0.1、4.0.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/14/changes.html" target="_blank" rel="noopener">14</a></td><td><code>ICE_CREAM_SANDWICH</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.2.html" target="_blank" rel="noopener">Android 3.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/13/changes.html" target="_blank" rel="noopener">13</a></td><td><code>HONEYCOMB_MR2</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.1.html" target="_blank" rel="noopener">Android 3.1.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/12/changes.html" target="_blank" rel="noopener">12</a></td><td><code>HONEYCOMB_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-3.1-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.0.html" target="_blank" rel="noopener">Android 3.0.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/11/changes.html" target="_blank" rel="noopener">11</a></td><td><code>HONEYCOMB</code></td><td><a href="https://developer.android.com/about/versions/android-3.0-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.3.3.html" target="_blank" rel="noopener">Android 2.3.4 Android 2.3.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/10/changes.html" target="_blank" rel="noopener">10</a></td><td><code>GINGERBREAD_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-2.3-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.3.html" target="_blank" rel="noopener">Android 2.3.2 Android 2.3.1 Android 2.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/9/changes.html" target="_blank" rel="noopener">9</a></td><td><code>GINGERBREAD</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.2.html" target="_blank" rel="noopener">Android 2.2.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/8/changes.html" target="_blank" rel="noopener">8</a></td><td><code>FROYO</code></td><td><a href="https://developer.android.com/about/versions/android-2.2-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.1.html" target="_blank" rel="noopener">Android 2.1.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/7/changes.html" target="_blank" rel="noopener">7</a></td><td><code>ECLAIR_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-2.0-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.0.1.html" target="_blank" rel="noopener">Android 2.0.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/6/changes.html" target="_blank" rel="noopener">6</a></td><td><code>ECLAIR_0_1</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.0.html" target="_blank" rel="noopener">Android 2.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/5/changes.html" target="_blank" rel="noopener">5</a></td><td><code>ECLAIR</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.6.html" target="_blank" rel="noopener">Android 1.6</a></td><td><a href="https://developer.android.com/sdk/api_diff/4/changes.html" target="_blank" rel="noopener">4</a></td><td><code>DONUT</code></td><td><a href="https://developer.android.com/about/versions/android-1.6-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.5.html" target="_blank" rel="noopener">Android 1.5</a></td><td><a href="https://developer.android.com/sdk/api_diff/3/changes.html" target="_blank" rel="noopener">3</a></td><td><code>CUPCAKE</code></td><td><a href="https://developer.android.com/about/versions/android-1.5-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.1.html" target="_blank" rel="noopener">Android 1.1</a></td><td>2</td><td><code>BASE_1_1</code></td><td></td></tr><tr><td>Android 1.0</td><td>1</td><td><code>BASE</code></td></tr></tbody></table><p>摘自<a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels" target="_blank" rel="noopener">Android Developers#<uses-sdk></uses-sdk></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 路由跳转</title>
    <link href="https://sogrey.github.io/article/Flutter%20%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/"/>
    <id>https://sogrey.github.io/article/Flutter 路由跳转/</id>
    <published>2018-11-17T06:01:21.000Z</published>
    <updated>2018-11-17T07:46:15.895Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><h4 id="1-注册"><a href="#1-注册" class="headerlink" title="1. 注册"></a>1. 注册</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Flutter 示例'</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> MyHomePage(title: <span class="string">'Flutter 示例主页'</span>),</span><br><span class="line">      routes: &#123; <span class="comment">//静态注册路由，不能传递参数</span></span><br><span class="line">        <span class="string">"SecondPage"</span>: (BuildContext context) =&gt; <span class="keyword">new</span> Second()</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="comment">//      routes: &lt;String, WidgetBuilder&gt;&#123;</span></span><br><span class="line"><span class="comment">//        // 这里可以定义静态路由，不能传递参数</span></span><br><span class="line"><span class="comment">//        '/router/second': (_) =&gt; new Second(),</span></span><br><span class="line"><span class="comment">//      &#125;,</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///这种路由的缺点是不能传递参数。</span></span><br><span class="line">Navigator.pushNamed(context, <span class="string">"SecondPage"</span>);</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><h4 id="有参跳转"><a href="#有参跳转" class="headerlink" title="有参跳转"></a>有参跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到新的 页面我们需要调用 navigator.push方法  -</span></span><br><span class="line">Navigator.push(context,</span><br><span class="line"><span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">    builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Second(title: <span class="string">"第二个页面"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="无参跳转"><a href="#无参跳转" class="headerlink" title="无参跳转"></a>无参跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到新的 页面我们需要调用 navigator.push方法  -</span></span><br><span class="line">Navigator.push(</span><br><span class="line">    context,</span><br><span class="line">    <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">        builder: (context) =&gt; <span class="keyword">new</span> Second()</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Sogrey/flutter-demos/blob/master/flutter_route/apks/app-release.apk?raw=true" target="_blank" rel="noopener">apk</a>，<a href="https://github.com/Sogrey/flutter-demos/tree/master/flutter_route" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Flutter" scheme="https://sogrey.github.io/categories/Flutter/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
      <category term="Flutter" scheme="https://sogrey.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Android 动态调用外部jar/dex</title>
    <link href="https://sogrey.github.io/article/Android%20%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8jar&amp;dex/"/>
    <id>https://sogrey.github.io/article/Android 动态调用外部jar&amp;dex/</id>
    <published>2018-07-25T12:42:54.000Z</published>
    <updated>2018-11-07T09:23:33.217Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>现有需求，需要做一个生成外部jar，去验证已发布App有效性，这个外部jar可更新，而App不用重新发布之需要重新发布这个jar包即可。此次记录这种需求开发，jar包中以MD5加密为例。</p><a id="more"></a><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>跟往常一样，创建android studio 项目，其中包含两个app Module和两个library Module，目前都是空项目。如下图：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813151634.jpg?raw=true" alt=""></p><p>其中：</p><ul><li><code>app</code>:发布App，需要验证的App项目。</li><li><code>app2</code>:用于直接依赖测试打包jar项目。</li><li><code>lib_interface</code>:这个项目里只有一个接口<code>interface</code>，提供了一个或多个可供调用的方法,所有用到验证jar包的项目包括发布jar项目本身都要依赖于它，比如此项目中另外三个项目都要依赖于此library Module。</li><li><code>lib_md5</code>:用于发包jar包的项目。</li></ul><h2 id="创建接口类"><a href="#创建接口类" class="headerlink" title="创建接口类"></a>创建接口类</h2><p>首先处理<code>lib_interface</code>,在<code>lib_interface</code>中新建一个<code>interface</code>接口类<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_interface/src/main/java/org/sogrey/jarinterface/Md5JarInterface.java" target="_blank" rel="noopener">Md5JarInterface.java</a></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152011.jpg?raw=true" alt=""></p><p>里面只有一个方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Md5值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getMd5</span><span class="params">(String content)</span></span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152128.jpg?raw=true" alt=""></p><h2 id="实现接口类方法"><a href="#实现接口类方法" class="headerlink" title="实现接口类方法"></a>实现接口类方法</h2><p>要实现上面接口类方法，转到<code>lib_md5</code> module,首先需要先依赖<code>lib_interface</code>:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152251.jpg?raw=true" alt=""></p><p>在<code>lib_md5</code>的<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/build.gradle" target="_blank" rel="noopener">build.gradle</a>多了句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation project(<span class="string">':lib_interface'</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152320.jpg?raw=true" alt=""></p><p>依赖好之后，在<code>lib_md5</code>新建一个<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/src/main/java/org/sogrey/md5/impl/Md5Utils.java" target="_blank" rel="noopener">Md5Utils.java</a>实现<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_interface/src/main/java/org/sogrey/jarinterface/Md5JarInterface.java" target="_blank" rel="noopener">Md5JarInterface</a>接口:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152416.jpg?raw=true" alt=""></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152504.jpg?raw=true" alt=""></p><p>下面引进<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/src/main/java/org/sogrey/md5/MD5.java" target="_blank" rel="noopener">MD5.java</a>(md5算法网上多得是)，并实现<code>getMd5()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMd5</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MD5.MD5(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时一个简单的库项目功能基本完成，测试通过后就能发包jar包了。</p><h2 id="依赖测试"><a href="#依赖测试" class="headerlink" title="依赖测试"></a>依赖测试</h2><p>完成了库项目功能开发，先直接依赖测试下结果。让<code>app2</code> module依赖于<code>lib_interface</code>和<code>lib_md5</code>：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152617.jpg?raw=true" alt=""></p><p>简单修改<a href="https://github.com/Sogrey/LoadJar/blob/master/app2/src/main/res/layout/activity_main.xml" target="_blank" rel="noopener">activity_main.xml</a>:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152751.jpg?raw=true" alt=""></p><p>在<a href="https://github.com/Sogrey/LoadJar/blob/master/app2/src/main/java/org/sogrey/app2/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a>添加下面代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TextView txtResult = findViewById(R.id.txt_result);</span><br><span class="line">txtResult.setText(<span class="keyword">new</span> Md5Utils().getMd5(<span class="string">"123456"</span>));</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153202.jpg?raw=true" alt=""></p><p>编译运行测试：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153401.jpg?raw=true" alt=""></p><p>测试正常。</p><h2 id="混淆打包jar"><a href="#混淆打包jar" class="headerlink" title="混淆打包jar"></a>混淆打包jar</h2><p>经过测试<code>lib_md5</code>项目功能正常，下面准备混淆打包。</p><p>混淆模板参考<a href="https://sogrey.github.io/notes/%E6%B7%B7%E6%B7%86%E6%A8%A1%E6%9D%BF">这里</a>。</p><p>但须注意，对外调用的接口方法是不能被混淆，否则后找不到,修改<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/proguard-rules.pro" target="_blank" rel="noopener">proguard-rules.pro</a>添加如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-keep public class org.sogrey.md5.impl.Md5Utils</span><br><span class="line">-keepclasseswithmembers public class org.sogrey.md5.impl.Md5Utils&#123;</span><br><span class="line">   public String getMd5();</span><br><span class="line">&#125;</span><br><span class="line">-keep class org.sogrey.md5.impl.Md5Utils&#123;</span><br><span class="line">   public &lt;methods&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153930.jpg?raw=true" alt=""></p><p>编辑<code>lib_md5</code>的<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/build.gradle" target="_blank" rel="noopener">build.gradle</a>,修改buildTypes.release.minifyEnabled 为 true.</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155019.jpg?raw=true" alt=""></p><p>添加task：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def SDK_BASENAME = <span class="string">"MD5"</span> //名称</span><br><span class="line">def SDK_VERSION = <span class="string">"_V1.0"</span> //版本</span><br><span class="line">def sdkDestinationPath = <span class="string">"build"</span> //生成保存位置</span><br><span class="line">def zipFile = file(<span class="string">'build/intermediates/bundles/release/classes.jar'</span>) //打包源文件</span><br><span class="line"></span><br><span class="line">task deleteBuild(<span class="built_in">type</span>: Delete) &#123;</span><br><span class="line">    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + <span class="string">".jar"</span></span><br><span class="line">&#125;</span><br><span class="line">task makeJar(<span class="built_in">type</span>: Jar) &#123;</span><br><span class="line">    from zipTree(zipFile)</span><br><span class="line">    from fileTree(dir: <span class="string">'src/main'</span>,includes: [<span class="string">'assets/**'</span>])//将assets目录打入jar包</span><br><span class="line">    baseName = SDK_BASENAME + SDK_VERSION</span><br><span class="line">    destinationDir = file(sdkDestinationPath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeJar.dependsOn(deleteBuild, build)</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813154519.jpg?raw=true" alt=""></p><p><code>makeJar</code> task作用是打包生成jar，但是生成的jar是没有混淆的，再添加task:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">task proguardJar(dependsOn: [<span class="string">'makeJar'</span>], <span class="built_in">type</span>: proguard.gradle.ProGuardTask) &#123;</span><br><span class="line">    //Android 默认的 proguard 文件</span><br><span class="line">    configuration android.getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>)</span><br><span class="line">    //manifest 注册的组件对应的 proguard 文件</span><br><span class="line">    configuration <span class="string">'proguard-rules.pro'</span></span><br><span class="line">    String inJar = makeJar.archivePath.getAbsolutePath()</span><br><span class="line">    //输入 jar</span><br><span class="line">    injars inJar</span><br><span class="line">    //输出 jar</span><br><span class="line">    outjars inJar.substring(0, inJar.lastIndexOf(File.separator)) + <span class="string">"/proguard-<span class="variable">$&#123;makeJar.archiveName&#125;</span>"</span></span><br><span class="line">    //设置不删除未引用的资源(类，方法等)</span><br><span class="line">    dontshrink</span><br><span class="line">    Plugin plugin = getPlugins().hasPlugin(<span class="string">"AppPlugin"</span>) ?</span><br><span class="line">            getPlugins().findPlugin(<span class="string">"AppPlugin"</span>) :</span><br><span class="line">            getPlugins().findPlugin(<span class="string">"LibraryPlugin"</span>)</span><br><span class="line">    <span class="keyword">if</span> (plugin != null) &#123;</span><br><span class="line">        List&lt;String&gt; runtimeJarList</span><br><span class="line">        <span class="keyword">if</span> (plugin.getMetaClass().getMetaMethod(<span class="string">"getRuntimeJarList"</span>)) &#123;</span><br><span class="line">            runtimeJarList = plugin.getRuntimeJarList()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (android.getMetaClass().getMetaMethod(<span class="string">"getBootClasspath"</span>)) &#123;</span><br><span class="line">            runtimeJarList = android.getBootClasspath()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            runtimeJarList = plugin.getBootClasspath()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String runtimeJar : runtimeJarList) &#123;</span><br><span class="line">            //给 proguard 添加 runtime</span><br><span class="line">            libraryjars(runtimeJar)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155807.jpg?raw=true" alt=""></p><p><code>proguardJar</code> task 用于混淆打包。可以看到<code>proguardJar</code>里调用了<code>makeJar</code><br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155854.jpg?raw=true" alt=""></p><p>执行task,点击android studio 右上角<code>Gradle</code>展开找到<code>:lib_md5</code>,在<code>task</code>&gt;<code>other</code>里找到我们刚定义的task：<code>makeJar</code>和<code>proguardJar</code>，直接双击执行，我们需要混淆的直接双击<code>proguardJar</code> task,等待编译完成，会在<code>build</code>里生成了两个jar包：<code>MD5_V1.0.jar</code>和<code>proguard-MD5_V1.0.jar</code>，从文件名就能看出<code>proguard-MD5_V1.0.jar</code>是混淆过的。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155922.jpg?raw=true" alt=""></p><p>直接zip解压可直接看到包结构可class文件:<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155642.jpg?raw=true" alt=""></p><h2 id="jar包dx处理"><a href="#jar包dx处理" class="headerlink" title="jar包dx处理"></a>jar包dx处理</h2><p>jar包生成好之后，下面就要进行dx处理，把生成的jar拷贝到Android SDK目录下<code>build-tools\28.0.1</code>，后面的版本根据你自己的版本：<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160050.jpg?raw=true" alt=""></p><p>执行下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dx --dex --output=proguard-MD5-dex_V1.0.jar proguard-MD5_V1.0.jar</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160501.jpg?raw=true" alt=""></p><p>将会生成目标jar包：<code>proguard-MD5-dex_V1.0.jar</code><br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160542.jpg?raw=true" alt=""></p><p>同样我们zip解压后看到的是一个dex文件。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160636.jpg?raw=true" alt=""></p><h2 id="引入外部jar测试"><a href="#引入外部jar测试" class="headerlink" title="引入外部jar测试"></a>引入外部jar测试</h2><p>jar包dx处理完毕后就可以使用<code>app</code> module加载外部jar测试了，当然首先<code>app</code>须依赖于<code>lib_interface</code>。</p><p>为方便安装测试，我们把dx处理好的jar放在assets文件夹下，app安装后拷贝到sd卡再加载。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160836.jpg?raw=true" alt=""></p><p><a href="https://github.com/Sogrey/LoadJar/blob/master/app/src/main/java/org/sogrey/loadjar/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a>中代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">File cacheFile = FileUtils.getCacheDir(getApplicationContext());</span><br><span class="line">File libFile = <span class="keyword">new</span> File(cacheFile, <span class="string">"lib"</span>);</span><br><span class="line"><span class="keyword">if</span> (!libFile.exists()) libFile.mkdirs();</span><br><span class="line">String internalPath = cacheFile.getAbsolutePath() + File.separator + <span class="string">"lib"</span> + File.separator + jarName;</span><br><span class="line">File desFile = <span class="keyword">new</span> File(internalPath);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!desFile.exists()) &#123;</span><br><span class="line">        desFile.createNewFile();</span><br><span class="line">        FileUtils.copyFiles(<span class="keyword">this</span>, jarName, desFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上是将jar拷贝到sd卡，是为测试方便，实际应用中应该是下载保存到sd卡.</span></span><br><span class="line"><span class="comment">//下面开始加载dex class</span></span><br><span class="line">DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(internalPath, libFile.getAbsolutePath(), <span class="keyword">null</span>, getClassLoader());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//加载的类名为jar文件里面完整类名，写错会找不到此类hh</span></span><br><span class="line">    Class libClazz = dexClassLoader.loadClass(className);</span><br><span class="line">    <span class="keyword">final</span> Md5JarInterface md5JarInterface = (Md5JarInterface) libClazz.newInstance();</span><br><span class="line">    <span class="keyword">if</span> (md5JarInterface != <span class="keyword">null</span>) &#123;</span><br><span class="line">        txtResult.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                txtResult.setText(md5JarInterface.getMd5(<span class="string">"123456"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码通过<code>DexClassLoader</code>类加载器找到对应的类，该类实现了<code>Md5JarInterface</code>接口方法，调用该方法得到结果。</p><p>最后因为有SD卡文件读写，别忘了添加权限：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>android 6.0动态权限申请请自行百度。</p><p>测试之：<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813162747.jpg?raw=true" alt=""></p><p>项目地址：<a href="https://github.com/Sogrey/LoadJar" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;p&gt;现有需求，需要做一个生成外部jar，去验证已发布App有效性，这个外部jar可更新，而App不用重新发布之需要重新发布这个jar包即可。此次记录这种需求开发，jar包中以MD5加密为例。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
      <category term="jar" scheme="https://sogrey.github.io/tags/jar/"/>
    
      <category term="dex" scheme="https://sogrey.github.io/tags/dex/"/>
    
  </entry>
  
  <entry>
    <title>JNI Md5加密生成so文件</title>
    <link href="https://sogrey.github.io/article/JNI%20Md5%E5%8A%A0%E5%AF%86%E7%94%9F%E6%88%90so%E6%96%87%E4%BB%B6/"/>
    <id>https://sogrey.github.io/article/JNI Md5加密生成so文件/</id>
    <published>2018-07-25T12:39:13.000Z</published>
    <updated>2018-09-02T04:34:38.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JNI Md5加密生成so文件</p><p>IDE工具:Android Studio<br>编译环境:JDK1.8+Android SDK+NDK</p><a id="more"></a><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1 新建项目"></a>1 新建项目</h2><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/新建项目-Android-jni-md5.jpg" alt=""></p><p>选中“Include C++ support”,一直“Next”.<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/选择c++Support.jpg" alt=""></p><p>等待项目构建完成后<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/项目目录结构.jpg" alt=""></p><p>看到 <code>java</code>包同级有个<code>cpp</code>的包就是存放c++代码的。</p><p>而里<code>native-lib.cpp</code>的代码很简单，就是打印出一句“Hello from C++”:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jstring</span><br><span class="line"></span><br><span class="line">JNICALL</span><br><span class="line">Java_sogrey_android_1jni_1md5_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行一下：<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803161827.jpg" alt=""></p><p>这就表示我们的C++环境正常，可以开始写我们自己的代码了。</p><h2 id="2-新建Jni工具类"><a href="#2-新建Jni工具类" class="headerlink" title="2 新建Jni工具类"></a>2 新建Jni工具类</h2><p>新建一个<code>JNIUtils.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sogrey.android_jni_md5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Sogrey on 2018/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNIUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Used to load the 'native-lib' library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A native method that is implemented by the 'native-lib' native library,</span></span><br><span class="line"><span class="comment">     * which is packaged with this application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把<code>MainActivity.java</code>中的相关代码删掉</p><blockquote><p>tv.setText(stringFromJNI());</p></blockquote><p>也改成</p><blockquote><p>tv.setText(new JNIUtils().stringFromJNI());</p></blockquote><h2 id="3-生成-h文件-编写cpp文件"><a href="#3-生成-h文件-编写cpp文件" class="headerlink" title="3 生成.h文件,编写cpp文件"></a>3 生成.h文件,编写cpp文件</h2><p>Android studio的Terminal中依次执行命令：</p><blockquote><p>cd app/src/main/java<br>javah -jni sogrey.android_jni_md5.JNIUtils</p></blockquote><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM—20180803164015.jpg" alt=""></p><p>将生成的<code>sogrey_android_jni_md5_JNIUtils.h</code>头文件剪贴到<code>cpp</code>包下，并复制一份重命名为<code>sogrey_android_jni_md5_JNIUtils.cpp</code>.<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803164408.jpg" alt=""></p><p>编辑复制的<code>.cpp</code>文件，删掉多余代码只留下需要我们实现的那个方法,加上返回方法体，并导入之前的<code>.h</code>文件<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803164549.jpg" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sogrey_android_jni_md5_JNIUtils.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    stringFromJNI</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_stringFromJNI</span><br><span class="line">        (JNIEnv *env, jobject obj)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法需要返回<code>jstring</code>,可以参照之前<code>native-lib.cpp</code>里的代码实现，引入提示需要导入<code>string</code>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM截图20180803165042.jpg" alt=""></p><p>则最终代码就是：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sogrey_android_jni_md5_JNIUtils.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    stringFromJNI</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_stringFromJNI</span><br><span class="line">        (JNIEnv *env, jobject obj)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-修改CMakeLists-txt文件"><a href="#4-修改CMakeLists-txt文件" class="headerlink" title="4 修改CMakeLists.txt文件"></a>4 修改<code>CMakeLists.txt</code>文件</h2><p>我们刚刚添加了一个新的c++文件，现将它加到CMakeLists中，刚才的<code>native-lib.cpp</code>已经没有用了，注掉它<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803165959.jpg" alt=""></p><p>重新编译运行看会不会得到和之前一样的结果。（结果是一样的）<br>在<code>build</code>&gt;<code>intermediates</code>&gt;<code>cmake</code>&gt;<code>debug</code>&gt;<code>obj</code>下就能找到生成的.so文件了<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803170704.jpg" alt=""></p><h2 id="5-添加getMd5-String-的native方法"><a href="#5-添加getMd5-String-的native方法" class="headerlink" title="5 添加getMd5(String)的native方法"></a>5 添加<code>getMd5(String)</code>的native方法</h2><p>在<code>JNIUtils.java</code>中添加下面native方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定字符串md5值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 要md5加密的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> md5加密串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getMd5</span><span class="params">(String content)</span></span>;</span><br></pre></td></tr></table></figure></p><p>重复第三步操作。或者熟练了直接在<code>sogrey_android_jni_md5_JNIUtils.h</code>文件中添加：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span><br><span class="line">        (JNIEnv *, jobject, jstring);</span><br></pre></td></tr></table></figure></p><p>同样，需要在<code>sogrey_android_jni_md5_JNIUtils.cpp</code>中去实现它：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span><br><span class="line">        (JNIEnv *env, jobject obj, jstring str)&#123;</span><br><span class="line">    <span class="comment">//TODO 实现方法逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6-实现MD5加密"><a href="#6-实现MD5加密" class="headerlink" title="6 实现MD5加密"></a>6 实现MD5加密</h2><p>md5的加密方法网上很多，这里给出一个c++实现的[<a href="https://github.com/Sogrey/AndroidJniMD5/blob/master/app/src/main/cpp/MD5.cpp" target="_blank" rel="noopener">MD5.cpp</a>,<a href="https://github.com/Sogrey/AndroidJniMD5/blob/master/app/src/main/cpp/MD5.h" target="_blank" rel="noopener">MD5.h</a>].直接将两个文件引入到cpp包下，<br>在<code>sogrey_android_jni_md5_JNIUtils.cpp</code>引入</p><blockquote><p>#include “MD5.h”</p></blockquote><p>则<code>getMD5</code>方法实现：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span><br><span class="line">        (JNIEnv *env, jobject obj, jstring str) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *originStr;</span><br><span class="line">    <span class="comment">//将jstring转化成char *类型</span></span><br><span class="line">    originStr = env-&gt;GetStringUTFChars(str,JNI_FALSE);</span><br><span class="line">    MD5 md5 = MD5(originStr);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> md5Result = md5.hexdigest();</span><br><span class="line"><span class="comment">//    //将char *类型转化成jstring返回给Java层</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(md5Result.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中：JNI_FALSE 是个宏定义表示 jboolean false<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_TRUE 1</span></span><br></pre></td></tr></table></figure></p><p>运行一把，得到md5字符串<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803225817.jpg" alt=""></p><h2 id="7-生成-so文件"><a href="#7-生成-so文件" class="headerlink" title="7 生成.so文件"></a>7 生成.so文件</h2><p>在cmake.txt中添加</p><pre><code>#设置生成的so动态库最后输出的路径set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../jniLibs/${ANDROID_ABI})</code></pre><p>用来指定生成的so文件存储路径，点击<code>build</code>&gt;<code>Make project</code>,看到在<code>jniLibs</code>文件夹下生成支持4中不同内核的so文件。<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804002050.jpg" alt=""></p><p>想要配置指定内核平台，修改<code>Module</code>下的<code>build.gradle</code>中的<code>android</code>&gt;<code>defaultConfig</code> 添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags &quot;&quot;</span><br><span class="line">                abiFilters &quot;arm64-v8a&quot;,&quot;armeabi-v7a&quot;,&quot;x86&quot;,&quot;x86_64&quot;</span><br><span class="line">//Error:ABIs [armeabi] are not supported for platform. Supported ABIs are [armeabi-v7a, arm64-v8a, x86, x86_64].</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h2 id="8-修改库名称"><a href="#8-修改库名称" class="headerlink" title="8 修改库名称"></a>8 修改库名称</h2><p>默认生成的so库名称是<code>native-lib</code>,怎么修改为自定义的名称呢。</p><p>首先，修改<code>CMakeLists.txt</code>内容：修改<code>add_library</code>和<code>target_link_libraries</code>第一个参数为我们想自定定义的名称，比如<code>md5Lib</code><br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804003217.jpg" alt=""></p><p>同样需要修改<code>JNIUtils.java</code>中<code>System.loadLibrary(String)</code>的参数为上面我们自定义的名称<code>md5Lib</code><br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804003613.jpg" alt=""></p><p>重新点击<code>build</code>&gt;<code>Make project</code>,看到在<code>jniLibs</code>文件夹下生成新的so文件。<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804004506.jpg" alt=""></p><p>项目源码地址<a href="https://github.com/Sogrey/AndroidJniMD5" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JNI Md5加密生成so文件&lt;/p&gt;
&lt;p&gt;IDE工具:Android Studio&lt;br&gt;编译环境:JDK1.8+Android SDK+NDK&lt;/p&gt;
    
    </summary>
    
      <category term="JNI" scheme="https://sogrey.github.io/categories/JNI/"/>
    
    
      <category term="JNI" scheme="https://sogrey.github.io/tags/JNI/"/>
    
      <category term="Md5" scheme="https://sogrey.github.io/tags/Md5/"/>
    
  </entry>
  
  <entry>
    <title>pe装机，开机设置启动项快捷键</title>
    <link href="https://sogrey.github.io/article/PE%E8%A3%85%E6%9C%BA%EF%BC%8C%E5%BC%80%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%90%AF%E5%8A%A8%E9%A1%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://sogrey.github.io/article/PE装机，开机设置启动项快捷键/</id>
    <published>2018-07-18T14:30:03.000Z</published>
    <updated>2018-07-18T15:08:43.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>PE装机启动键来了。</p><table><thead><tr><th style="text-align:center">组装机主板</th><th style="text-align:center"></th><th style="text-align:center">品牌笔记本</th><th style="text-align:center"></th><th style="text-align:center">品牌台式机</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">主板品牌</td><td style="text-align:center">启动按键</td><td style="text-align:center">笔记本品牌</td><td style="text-align:center">启动按键</td><td style="text-align:center">台式机品牌</td><td style="text-align:center">启动按键</td></tr><tr><td style="text-align:center">华硕</td><td style="text-align:center">F8</td><td style="text-align:center">联想</td><td style="text-align:center">F12</td><td style="text-align:center">联想</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">技嘉</td><td style="text-align:center">F12</td><td style="text-align:center">宏基</td><td style="text-align:center">F12</td><td style="text-align:center">惠普</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">微星</td><td style="text-align:center">F11</td><td style="text-align:center">华硕</td><td style="text-align:center">ESC</td><td style="text-align:center">宏基</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">映泰</td><td style="text-align:center">F9</td><td style="text-align:center">惠普</td><td style="text-align:center">F9</td><td style="text-align:center">戴尔</td><td style="text-align:center">ESC</td></tr><tr><td style="text-align:center">梅捷</td><td style="text-align:center">ESC/F12</td><td style="text-align:center">联想ThinkPad</td><td style="text-align:center">F12</td><td style="text-align:center">神舟</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">七彩虹</td><td style="text-align:center">ESC/F11</td><td style="text-align:center">戴尔</td><td style="text-align:center">F12</td><td style="text-align:center">华硕</td><td style="text-align:center">F8</td></tr><tr><td style="text-align:center">华擎</td><td style="text-align:center">F11</td><td style="text-align:center">神舟</td><td style="text-align:center">F12</td><td style="text-align:center">方正</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">斯巴达克</td><td style="text-align:center">ESC</td><td style="text-align:center">东芝</td><td style="text-align:center">F12</td><td style="text-align:center">清华同方</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">昂达</td><td style="text-align:center">F11</td><td style="text-align:center">三星</td><td style="text-align:center">F12</td><td style="text-align:center">海尔</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">双敏</td><td style="text-align:center">ESC</td><td style="text-align:center">IBM</td><td style="text-align:center">F12</td><td style="text-align:center">明基</td><td style="text-align:center">F8</td></tr><tr><td style="text-align:center">翔升</td><td style="text-align:center">F10</td><td style="text-align:center">富士通</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">精英</td><td style="text-align:center">ESC/F11</td><td style="text-align:center">海尔</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">冠盟</td><td style="text-align:center">F11/F12</td><td style="text-align:center">方正</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">富士康</td><td style="text-align:center">ESC/F12</td><td style="text-align:center">清华同方</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">顶星</td><td style="text-align:center">F11/F12</td><td style="text-align:center">微星</td><td style="text-align:center">F11</td></tr><tr><td style="text-align:center">铭瑄</td><td style="text-align:center">ESC</td><td style="text-align:center">明基</td><td style="text-align:center">F9</td></tr><tr><td style="text-align:center">盈通</td><td style="text-align:center">F8</td><td style="text-align:center">技嘉</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">捷波</td><td style="text-align:center">ESC</td><td style="text-align:center">Gateway</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">Intel</td><td style="text-align:center">F12</td><td style="text-align:center">eMachines</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="VS code" scheme="https://sogrey.github.io/categories/VS-code/"/>
    
    
      <category term="VS code" scheme="https://sogrey.github.io/tags/VS-code/"/>
    
  </entry>
  
  <entry>
    <title>VS code 插件</title>
    <link href="https://sogrey.github.io/article/VS-code-%E6%8F%92%E4%BB%B6/"/>
    <id>https://sogrey.github.io/article/VS-code-插件/</id>
    <published>2018-07-04T11:09:34.000Z</published>
    <updated>2019-01-15T07:44:39.187Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>VS CODE 插件收集<br><a id="more"></a></p><ul><li><ol><li>live-server 编辑浏览html网页</li></ol></li></ul><p><a href="https://github.com/tapio/live-server" target="_blank" rel="noopener">github</a></p><p>第一步： 安装Visual Studio Code + Node.JS</p><p>第二步：通过如下命令行安装live-server</p><p>在命令符中输入 <code>npm install -g live-server</code>进行安装</p><p>如果<code>npm install -g live-server</code>安装报错就用<code>npm install live-server -gf</code>安装</p><p>第三步：打开Visual Studio Code编写HTML代码，保存。</p><p>第四步：右击HTML文件所在的文件夹，选择“在命令提示符中打开”</p><p>第五步：输入<code>live-server</code>命令</p><p>第六步：选择HTML页面浏览即可</p><ul><li><ol><li>Markdown Preview Enhanced  作者：Yiyi Wang</li></ol></li></ul><p><a href="https://github.com/shd101wyy/vscode-markdown-preview-enhanced" target="_blank" rel="noopener">github</a></p><p>VS code 扩展直接搜索 <code>Markdown Preview Enhanced</code> 安装即可。</p><ul><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode" target="_blank" rel="noopener">Polacode</a>  可以把代码生成图片（有些地方发代码结构会乱也没有代码高亮，这时候就可以生成图片再发）。</li></ol></li></ul><ol><li>快捷键 <code>Ctrl + Shift + P</code> 呼出命令窗 输入 <code>Polacode</code> </li><li>将要生成图片的代码复制到 Polacode 窗口</li><li>点击最下面按钮保存图片</li></ol><ul><li><ol><li>另一个 <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank" rel="noopener">Live Server</a> ：可以一键在本地启动服务器。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint</a> ：检查 js 语法规范，你可以使用不同的规范，如 airbnb 、standard 、google。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="noopener">TSLint</a> ：检查 typescript 语法规范。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint" target="_blank" rel="noopener">Stylelint</a> ：检查 CSS/SCSS/Less 语法规范。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="noopener">Markdownlint</a> ：检查 markdown 语法规范。</li></ol></li><li><ol><li><a href="https://emmet.io/" target="_blank" rel="noopener">Emmet</a> ：大家应该很熟悉这个插件了（很好用），VS Code 已经内置了，很到位。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="noopener">Auto Close Tag</a> ：自动闭合 html 等标签 （&lt;/…&gt;）。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="noopener">Auto Rename Tag</a> ：修改 html 标签时，自动修改闭合标签。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense" target="_blank" rel="noopener">Path Intellisense</a> ：自动提示补全路径。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a> ：可以在编辑器里直接运行代码，查看结果。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color" target="_blank" rel="noopener">Color Picker</a> ：可以直接在编辑器里打开色板，选择各种模式的颜色。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=joelday.docthis" target="_blank" rel="noopener">Document This</a> ：可以给函数、类等自动的加上详细的注释。<br>快捷键 <code>Ctrl+Alt+D</code> and <code>again Ctrl+Alt+D</code></li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="noopener">Git History</a> ：方便的查看git版本管理的详细信息。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a> ：重点介绍下这个插件，如果你有两台电脑（比如，家里和公司）都使用 VS Code ，可是在公司或家里对 VS Code 安装了插件或者修改了配置，回到家或公司又要重新弄一次，这个插件就能解决问题，同步多台电脑设置。只需要把配置上传到GitHub，在另一个地方下载配置即可</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VS CODE 插件收集&lt;br&gt;
    
    </summary>
    
      <category term="VS code" scheme="https://sogrey.github.io/categories/VS-code/"/>
    
    
      <category term="VS code" scheme="https://sogrey.github.io/tags/VS-code/"/>
    
  </entry>
  
  <entry>
    <title>遍历Map的四种方法</title>
    <link href="https://sogrey.github.io/article/%E9%81%8D%E5%8E%86Map%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://sogrey.github.io/article/遍历Map的四种方法/</id>
    <published>2018-04-04T03:05:35.000Z</published>
    <updated>2018-04-04T03:44:51.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>第一种：普遍使用，二次取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.keySet遍历key和value："</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line"> System.out.println(<span class="string">"key= "</span>+ key + <span class="string">" and value= "</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.entrySet使用iterator遍历key和value："</span>);</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"> Map.Entry entry = it.next();</span><br><span class="line"> System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三种：推荐，尤其是容量大时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.entrySet遍历key和value"</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry : map.entrySet()) &#123;</span><br><span class="line"> System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第四种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.values()遍历所有的value，但不能遍历key"</span>);</span><br><span class="line"><span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line"> System.out.println(<span class="string">"value= "</span> + v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="https://sogrey.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sogrey.github.io/tags/Java/"/>
    
      <category term="Map" scheme="https://sogrey.github.io/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>15种CSS居中方式</title>
    <link href="https://sogrey.github.io/article/15%E7%A7%8DCSS%E5%B1%85%E4%B8%AD%E6%96%B9%E5%BC%8F/"/>
    <id>https://sogrey.github.io/article/15种CSS居中方式/</id>
    <published>2018-03-29T16:05:49.000Z</published>
    <updated>2018-03-29T16:20:55.181Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h1><p>CSS居中是前端工程师经常要面对的问题，也是基本技能之一。今天有时间把CSS居中的方案汇编整理了一下，目前包括水平居中，垂直居中及水平垂直居中方案共15种。如有漏掉的，还会陆续的补充进来，算做是一个备忘录吧。</p><a id="more"></a><h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1 水平居中"></a>1 水平居中</h1><h2 id="1-1-内联元素水平居中"><a href="#1-1-内联元素水平居中" class="headerlink" title="1.1 内联元素水平居中"></a>1.1 内联元素水平居中</h2><p>利用 text-align: center 可以实现在块级元素内部的内联元素水平居中。此方法对内联元素(inline), 内联块(inline-block), 内联表(inline-table), inline-flex元素水平居中都有效。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/57" target="_blank" rel="noopener">演示代码</a></p><h2 id="1-2-块级元素水平居中"><a href="#1-2-块级元素水平居中" class="headerlink" title="1.2 块级元素水平居中"></a>1.2 块级元素水平居中</h2><p>通过把固定宽度块级元素的margin-left和margin-right设成auto，就可以使块级元素水平居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-block</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/58" target="_blank" rel="noopener">演示代码</a></p><h2 id="1-3-多块级元素水平居中"><a href="#1-3-多块级元素水平居中" class="headerlink" title="1.3 多块级元素水平居中"></a>1.3 多块级元素水平居中</h2><h3 id="1-3-1-利用inline-block"><a href="#1-3-1-利用inline-block" class="headerlink" title="1.3.1 利用inline-block"></a>1.3.1 利用inline-block</h3><p>如果一行中有两个或两个以上的块级元素，通过设置块级元素的显示类型为inline-block和父容器的text-align属性从而使多块级元素水平居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/59" target="_blank" rel="noopener">演示代码</a></p><h3 id="1-3-2-利用display-flex"><a href="#1-3-2-利用display-flex" class="headerlink" title="1.3.2 利用display: flex"></a>1.3.2 利用display: flex</h3><p>利用弹性布局(flex)，实现水平居中，其中justify-content 用于设置弹性盒子元素在主轴（横轴）方向上的对齐方式，本例中设置子元素水平居中显示。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/60" target="_blank" rel="noopener">演示代码</a></p><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2 垂直居中"></a>2 垂直居中</h1><h2 id="2-1-单行内联-inline-元素垂直居中"><a href="#2-1-单行内联-inline-元素垂直居中" class="headerlink" title="2.1 单行内联(inline-)元素垂直居中"></a>2.1 单行内联(inline-)元素垂直居中</h2><p>通过设置内联元素的高度(height)和行高(line-height)相等，从而使元素垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#v-box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/61" target="_blank" rel="noopener">演示代码</a></p><h2 id="2-2-多行元素垂直居中"><a href="#2-2-多行元素垂直居中" class="headerlink" title="2.2 多行元素垂直居中"></a>2.2 多行元素垂直居中</h2><h3 id="2-2-1-利用表布局（table）"><a href="#2-2-1-利用表布局（table）" class="headerlink" title="2.2.1 利用表布局（table）"></a>2.2.1 利用表布局（table）</h3><p>利用表布局的vertical-align: middle可以实现子元素的垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-table</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-cell</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/62" target="_blank" rel="noopener">演示代码</a></p><h3 id="2-2-2-利用flex布局（flex）"><a href="#2-2-2-利用flex布局（flex）" class="headerlink" title="2.2.2 利用flex布局（flex）"></a>2.2.2 利用flex布局（flex）</h3><p>利用flex布局实现垂直居中，其中flex-direction: column定义主轴方向为纵向。因为flex布局是CSS3中定义，在较老的浏览器存在兼容性问题。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-flex</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/63" target="_blank" rel="noopener">演示代码</a></p><h3 id="2-2-3-利用“精灵元素”"><a href="#2-2-3-利用“精灵元素”" class="headerlink" title="2.2.3 利用“精灵元素”"></a>2.2.3 利用“精灵元素”</h3><p>利用“精灵元素”(ghost element)技术实现垂直居中，即在父容器内放一个100%高度的伪元素，让文本和伪元素垂直对齐，从而达到垂直居中的目的。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ghost-center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ghost-center</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1%</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ghost-center</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/64" target="_blank" rel="noopener">演示代码</a></p><h2 id="2-3-块级元素垂直居中"><a href="#2-3-块级元素垂直居中" class="headerlink" title="2.3 块级元素垂直居中"></a>2.3 块级元素垂直居中</h2><h3 id="2-3-1-固定高度的块级元素"><a href="#2-3-1-固定高度的块级元素" class="headerlink" title="2.3.1 固定高度的块级元素"></a>2.3.1 固定高度的块级元素</h3><p>我们知道居中元素的高度和宽度，垂直居中问题就很简单。通过绝对定位元素距离顶部50%，并设置margin-top向上偏移元素高度的一半，就可以实现垂直居中了。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/65" target="_blank" rel="noopener">演示代码</a></p><h3 id="2-3-2-未知高度的块级元素"><a href="#2-3-2-未知高度的块级元素" class="headerlink" title="2.3.2 未知高度的块级元素"></a>2.3.2 未知高度的块级元素</h3><p>当垂直居中的元素的高度和宽度未知时，我们可以借助CSS3中的transform属性向Y轴反向偏移50%的方法实现垂直居中。但是部分浏览器存在兼容性的问题。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/66" target="_blank" rel="noopener">演示代码</a></p><h1 id="3-水平垂直居中"><a href="#3-水平垂直居中" class="headerlink" title="3 水平垂直居中"></a>3 水平垂直居中</h1><h2 id="3-1-固定宽高元素水平垂直居中"><a href="#3-1-固定宽高元素水平垂直居中" class="headerlink" title="3.1 固定宽高元素水平垂直居中"></a>3.1 固定宽高元素水平垂直居中</h2><p>通过margin平移元素整体宽度的一半，使元素水平垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">70px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">170px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/67" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-2-未知宽高元素水平垂直居中"><a href="#3-2-未知宽高元素水平垂直居中" class="headerlink" title="3.2 未知宽高元素水平垂直居中"></a>3.2 未知宽高元素水平垂直居中</h2><p>利用2D变换，在水平和垂直两个方向都向反向平移宽高的一半，从而使元素水平垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/68" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-3-利用flex布局"><a href="#3-3-利用flex布局" class="headerlink" title="3.3 利用flex布局"></a>3.3 利用flex布局</h2><p>利用flex布局，其中justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；而align-items属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/69" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-4-利用grid布局"><a href="#3-4-利用grid布局" class="headerlink" title="3.4 利用grid布局"></a>3.4 利用grid布局</h2><p>利用grid实现水平垂直居中，兼容性较差，不推荐。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123; </span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/70" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-5-屏幕上水平垂直居中"><a href="#3-5-屏幕上水平垂直居中" class="headerlink" title="3.5 屏幕上水平垂直居中"></a>3.5 屏幕上水平垂直居中</h2><p>屏幕上水平垂直居中十分常用，常规的登录及注册页面都需要用到。要保证较好的兼容性，还需要用到表布局。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/10" target="_blank" rel="noopener">演示代码</a></p><p>来源：<a href="https://segmentfault.com/a/1190000013966650?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013966650?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简言&quot;&gt;&lt;a href=&quot;#简言&quot; class=&quot;headerlink&quot; title=&quot;简言&quot;&gt;&lt;/a&gt;简言&lt;/h1&gt;&lt;p&gt;CSS居中是前端工程师经常要面对的问题，也是基本技能之一。今天有时间把CSS居中的方案汇编整理了一下，目前包括水平居中，垂直居中及水平垂直居中方案共15种。如有漏掉的，还会陆续的补充进来，算做是一个备忘录吧。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="https://sogrey.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://sogrey.github.io/tags/css/"/>
    
      <category term="居中" scheme="https://sogrey.github.io/tags/%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>利用百度URL API实现地址与经纬度互相转换</title>
    <link href="https://sogrey.github.io/article/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6URL-API%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%9D%80-%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
    <id>https://sogrey.github.io/article/利用百度URL-API实现地址-经纬度互相转换/</id>
    <published>2018-03-29T02:33:53.000Z</published>
    <updated>2018-03-29T16:50:44.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>应用中有时我们需要经纬度与地址之间互相转化，为此引入sdk又太大材小用，百度提供了这样的API可直接调用。</p><a id="more"></a><h3 id="1、-地址查经纬度"><a href="#1、-地址查经纬度" class="headerlink" title="1、 地址查经纬度"></a>1、 地址查经纬度</h3><p>api:<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding</a></p><blockquote><p><a href="http://api.map.baidu.com/geocoder/v2/?address=[地址]&amp;output=json&amp;mcode=[mcode]&amp;ak=[你的AK" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?address=[地址]&amp;output=json&amp;mcode=[mcode]&amp;ak=[你的AK</a>]</p></blockquote><p>例如：</p><p><a href="http://api.map.baidu.com/geocoder/v2/?address=西安市&amp;output=json&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?address=西安市&amp;output=json&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G</a></p><ul><li>mcode 是安全码</li><li>ak 是你在百度申请的应用的key</li></ul><p><img src="https://sogrey.github.io/pics/百度应用ak.png" alt="百度应用ak.png"></p><p>返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"result"</span>: &#123;</span><br><span class="line"><span class="string">"location"</span>: &#123;</span><br><span class="line"><span class="string">"lng"</span>: <span class="number">108.95309827919623</span>,</span><br><span class="line"><span class="string">"lat"</span>: <span class="number">34.277799897830629</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"precise"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"confidence"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="string">"level"</span>: <span class="string">"城市"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、经纬度查地址"><a href="#2、经纬度查地址" class="headerlink" title="2、经纬度查地址"></a>2、经纬度查地址</h3><p>api:<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p><blockquote><p><a href="http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=[Latitude,Longitude]&amp;output=json&amp;pois=1&amp;mcode=[mcode]&amp;ak=[你的Ak" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=[Latitude,Longitude]&amp;output=json&amp;pois=1&amp;mcode=[mcode]&amp;ak=[你的Ak</a>]</p></blockquote><p>例如：</p><p><a href="http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=34.203034,108.891956&amp;output=json&amp;pois=1&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=34.203034,108.891956&amp;output=json&amp;pois=1&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G</a></p><p>返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">renderReverse&amp;&amp;renderReverse(&#123;</span><br><span class="line"><span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"result"</span>: &#123;</span><br><span class="line"><span class="string">"location"</span>: &#123;</span><br><span class="line"><span class="string">"lng"</span>: <span class="number">108.89195599999994</span>,</span><br><span class="line"><span class="string">"lat"</span>: <span class="number">34.20303403835331</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"formatted_address"</span>: <span class="string">"陕西省西安市雁塔区丈八一路"</span>,</span><br><span class="line"><span class="string">"business"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"addressComponent"</span>: &#123;</span><br><span class="line"><span class="string">"country"</span>: <span class="string">"中国"</span>,</span><br><span class="line"><span class="string">"country_code"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"country_code_iso"</span>: <span class="string">"CHN"</span>,</span><br><span class="line"><span class="string">"country_code_iso2"</span>: <span class="string">"CN"</span>,</span><br><span class="line"><span class="string">"province"</span>: <span class="string">"陕西省"</span>,</span><br><span class="line"><span class="string">"city"</span>: <span class="string">"西安市"</span>,</span><br><span class="line"><span class="string">"city_level"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"district"</span>: <span class="string">"雁塔区"</span>,</span><br><span class="line"><span class="string">"town"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"adcode"</span>: <span class="string">"610113"</span>,</span><br><span class="line"><span class="string">"street"</span>: <span class="string">"丈八一路"</span>,</span><br><span class="line"><span class="string">"street_number"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">""</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"pois"</span>: [&#123;</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">"丈八一路1号(跳水馆对面)"</span>,</span><br><span class="line"><span class="string">"cp"</span>: <span class="string">" "</span>,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">"附近"</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"汇鑫IBC"</span>,</span><br><span class="line"><span class="string">"poiType"</span>: <span class="string">"房地产"</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">108.89195610279563</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">34.20301956544281</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"房地产;写字楼"</span>,</span><br><span class="line"><span class="string">"tel"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">"b703e96b79f2fc878f1a89ce"</span>,</span><br><span class="line"><span class="string">"zip"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"parent_poi"</span>: &#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">0.0</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">0.0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">...,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">"汇鑫国际IBC国际商务中心A座"</span>,</span><br><span class="line"><span class="string">"cp"</span>: <span class="string">" "</span>,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">"南"</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">"59"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"汇鑫国际IBC国际商务中心A座"</span>,</span><br><span class="line"><span class="string">"poiType"</span>: <span class="string">"房地产"</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">108.89182135696913</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">34.20346740878921</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"房地产;写字楼"</span>,</span><br><span class="line"><span class="string">"tel"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">"5b37443de29841febbbd63f4"</span>,</span><br><span class="line"><span class="string">"zip"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"parent_poi"</span>: &#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">0.0</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">0.0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="string">"roads"</span>: [],</span><br><span class="line"><span class="string">"poiRegions"</span>: [],</span><br><span class="line"><span class="string">"sematic_description"</span>: <span class="string">"汇鑫IBC附近1米"</span>,</span><br><span class="line"><span class="string">"cityCode"</span>: <span class="number">233</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="java-代码："><a href="#java-代码：" class="headerlink" title="java 代码："></a>java 代码：</h3><p><a href="https://github.com/Sogrey/JavaDemo/blob/master/src/org/sogrey/url/GeoUtils.java" target="_blank" rel="noopener">https://github.com/Sogrey/JavaDemo/blob/master/src/org/sogrey/url/GeoUtils.java</a></p><h3 id="写在最后，关于使用限制"><a href="#写在最后，关于使用限制" class="headerlink" title="写在最后，关于使用限制"></a>写在最后，关于使用限制</h3><p>API是免费的，但有使用上限。上面接口的使用指南可查看。</p><p><img src="https://sogrey.github.io/pics/百度api使用限制.png" alt="百度api使用限制.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用中有时我们需要经纬度与地址之间互相转化，为此引入sdk又太大材小用，百度提供了这样的API可直接调用。&lt;/p&gt;
    
    </summary>
    
      <category term="api" scheme="https://sogrey.github.io/categories/api/"/>
    
    
      <category term="百度 api" scheme="https://sogrey.github.io/tags/%E7%99%BE%E5%BA%A6-api/"/>
    
      <category term="地址与经纬度" scheme="https://sogrey.github.io/tags/%E5%9C%B0%E5%9D%80%E4%B8%8E%E7%BB%8F%E7%BA%AC%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android获取view宽高的三种方式</title>
    <link href="https://sogrey.github.io/article/Android%E8%8E%B7%E5%8F%96view%E5%AE%BD%E9%AB%98%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://sogrey.github.io/article/Android获取view宽高的三种方式/</id>
    <published>2018-03-26T15:30:27.000Z</published>
    <updated>2018-03-26T15:37:06.555Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>getMeasuredHeight()与getHeight的区别</p></blockquote><p>实际上在当屏幕可以包裹内容的时候，他们的值相等，<br>只有当view超出屏幕后，才能看出他们的区别：<br>getMeasuredHeight()是实际View的大小，与屏幕无关，<br>而getHeight的大小此时则是屏幕的大小。<br>当超出屏幕后，getMeasuredHeight()等于getHeight()加上屏幕之外没有显示的大小</p><a id="more"></a><p>具体方法</p><p>我们知道在oncreate中View.getWidth和View.getHeight无法获得一个view的高度和宽度，这是因为View组件 布局要在onResume回调后完成。</p><p>下面说三种方式</p><ul><li>getViewTreeObserver</li></ul><p>使用 getViewTreeObserver().addOnGlobalLayoutListener()来获得宽度或者高度。</p><p>OnGlobalLayoutListener 是ViewTreeObserver的内部类，当一个视图树的布局发生改变时，可以被ViewTreeObserver监听到，这是一个注册监听视图树的观察者(observer)，在视图树的全局事件改变时得到通知。ViewTreeObserver不能直接实例化，而是通过getViewTreeObserver()获得。</p><p>除了OnGlobalLayoutListener ，ViewTreeObserver还有如下内部类：<br>interfaceViewTreeObserver.OnGlobalFocusChangeListener<br>当在一个视图树中的焦点状态发生改变时，所要调用的回调函数的接口类<br>interfaceViewTreeObserver.OnGlobalLayoutListener<br>当在一个视图树中全局布局发生改变或者视图树中的某个视图的可视状态发生改变时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnPreDrawListener</li></ul><p>当一个视图树将要绘制时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnScrollChangedListener</li></ul><p>当一个视图树中的一些组件发生滚动时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnTouchModeChangeListener</li></ul><p>当一个视图树的触摸模式发生改变时，所要调用的回调函数的接口类</p><h3 id="利用OnGlobalLayoutListener来获得一个视图的真实高度。"><a href="#利用OnGlobalLayoutListener来获得一个视图的真实高度。" class="headerlink" title="利用OnGlobalLayoutListener来获得一个视图的真实高度。"></a>利用OnGlobalLayoutListener来获得一个视图的真实高度。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mHeaderViewHeight; </span><br><span class="line"><span class="keyword">private</span> View mHeaderView; </span><br><span class="line">  </span><br><span class="line">..... </span><br><span class="line">  </span><br><span class="line">mHeaderView.getViewTreeObserver().addOnGlobalLayoutListener( </span><br><span class="line"> <span class="keyword">new</span> OnGlobalLayoutListener() &#123; </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123; </span><br><span class="line">                                                          </span><br><span class="line">   mHeaderViewHeight = mHeaderView.getHeight(); </span><br><span class="line">   mHeaderView.getViewTreeObserver() </span><br><span class="line">     .removeGlobalOnLayoutListener(<span class="keyword">this</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>注意：但是需要注意的是OnGlobalLayoutListener可能会被多次触发，因此在得到了高度之后，要将OnGlobalLayoutListener注销掉。</p></blockquote></blockquote><h3 id="View-post事件中获取"><a href="#View-post事件中获取" class="headerlink" title="View post事件中获取"></a>View post事件中获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHeight</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123; </span><br><span class="line"> TextView tv; </span><br><span class="line">  </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState); </span><br><span class="line">  setContentView(R.layout.activity_activity_b); </span><br><span class="line">   tv = (TextView) findViewById(R.id.textView); </span><br><span class="line">  tv.post(<span class="keyword">new</span> Runnable() &#123; </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> height= tv.getHeight(); </span><br><span class="line">   &#125; </span><br><span class="line">  &#125;); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接测量计算"><a href="#直接测量计算" class="headerlink" title="直接测量计算"></a>直接测量计算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intw=View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>,View.MeasureSpec.UNSPECIFIED); </span><br><span class="line"><span class="keyword">int</span> inth=View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>,View.MeasureSpec.UNSPECIFIED); </span><br><span class="line">textView.measure(intw, inth); </span><br><span class="line"><span class="keyword">int</span> intwidth = textView.getMeasuredWidth(); </span><br><span class="line"><span class="keyword">int</span> intheight = textView.getMeasuredHeight();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;getMeasuredHeight()与getHeight的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上在当屏幕可以包裹内容的时候，他们的值相等，&lt;br&gt;只有当view超出屏幕后，才能看出他们的区别：&lt;br&gt;getMeasuredHeight()是实际View的大小，与屏幕无关，&lt;br&gt;而getHeight的大小此时则是屏幕的大小。&lt;br&gt;当超出屏幕后，getMeasuredHeight()等于getHeight()加上屏幕之外没有显示的大小&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中TextView属性ellipsize=marquee不生效的解决办法</title>
    <link href="https://sogrey.github.io/article/Android-TextView%E5%B1%9E%E6%80%A7android-ellipsize-marquee%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://sogrey.github.io/article/Android-TextView属性android-ellipsize-marquee不生效的解决办法/</id>
    <published>2018-03-26T10:35:54.000Z</published>
    <updated>2018-03-26T16:10:29.559Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android TextView实现文字跑马灯效果有两种办法：</p><p>1、 TextView的Text值赋值后不更改，很多帖子上说如下写法就可以生效：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/music_name_tv"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span>   【必须】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:focusable</span>=<span class="string">"true"</span>      【必须】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span> 【必须】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:lines</span>=<span class="string">"1"</span>              【必须】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心xxxx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"@color/colorAccent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"15sp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2、 TextView的文字动态赋值，这个时候直接写在布局Xml里面已经不生效了，需要先给TextView赋值，然后再在代码里面重新把属性设置一遍(亲试可行)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTextMarquee</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (textView != <span class="keyword">null</span>) &#123;</span><br><span class="line">          textView.setEllipsize(TextUtils.TruncateAt.MARQUEE);</span><br><span class="line">          textView.setSingleLine(<span class="keyword">true</span>);</span><br><span class="line">          textView.setSelected(<span class="keyword">true</span>);</span><br><span class="line">          textView.setFocusable(<span class="keyword">true</span>);</span><br><span class="line">          textView.setFocusableInTouchMode(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>建议第二种。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
      <category term="marquee" scheme="https://sogrey.github.io/tags/marquee/"/>
    
  </entry>
  
  <entry>
    <title>关于Android程序使用KSoap2调用Webservice运行不成功的问题</title>
    <link href="https://sogrey.github.io/article/%E5%85%B3%E4%BA%8EAndroid%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8KSoap2%E8%B0%83%E7%94%A8Webservice%E8%BF%90%E8%A1%8C%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://sogrey.github.io/article/关于Android程序使用KSoap2调用Webservice运行不成功的问题/</id>
    <published>2018-03-26T10:30:11.000Z</published>
    <updated>2018-03-26T15:40:00.331Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>公司的一个旧项目，用到了KSoap2访问Webservice，再编译运行时报<code>android.os.NetworkOnMainThreadException</code>异常。</p><a id="more"></a><p>原代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.ksoap2.SoapEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.PropertyInfo;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapObject;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapSerializationEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.transport.HttpTransportSE;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service_conn</span> </span>&#123;</span><br><span class="line">    String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAMESPACE = <span class="string">"WebService"</span>;</span><br><span class="line">    SoapObject soap_request;</span><br><span class="line">    HttpTransportSE ht;</span><br><span class="line">    SoapSerializationEnvelope envelope;</span><br><span class="line">    <span class="keyword">private</span> SoapObject soap_result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向服务器发送请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method_name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XmlPullParserException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SoapObject <span class="title">SEND_MESSAGE</span><span class="params">(<span class="keyword">final</span> String method_name, List&lt;NameValue&gt; param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        soap_request = <span class="keyword">new</span> SoapObject(NAMESPACE, method_name);</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.size(); i++) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"参数："</span> + param.get(i).getName() + <span class="string">"="</span> + param.get(i).getValue());</span><br><span class="line">                soap_request.addProperty(param.get(i).getName(), param.get(i).getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        envelope = <span class="keyword">new</span> SoapSerializationEnvelope(SoapEnvelope.VER11);</span><br><span class="line"><span class="comment">//envelope.bodyOut = soap_request;//此句导致参数发送不到服务器</span></span><br><span class="line">        envelope.dotNet = <span class="keyword">true</span>;<span class="comment">//webservice不指定rpc方式则用true否则要用false(也会导致参数发送不到服务器)</span></span><br><span class="line">        envelope.setOutputSoapObject(soap_request);</span><br><span class="line">        ht = <span class="keyword">new</span> HttpTransportSE(SocketService.URL);</span><br><span class="line">        ht.debug = <span class="keyword">true</span>;</span><br><span class="line">        Log.e(TAG, <span class="string">"URL:"</span> + SocketService.URL + <span class="string">"   NAMESPACE:"</span> + NAMESPACE + <span class="string">"    method_name:"</span> + method_name);</span><br><span class="line"></span><br><span class="line">        ht.call(NAMESPACE+<span class="string">"/"</span>+method_name, envelope);<span class="comment">// &lt;-- 问题出在这里</span></span><br><span class="line">        soap_result = (SoapObject) envelope.bodyIn;</span><br><span class="line">        <span class="keyword">return</span> soap_result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Honeycomb SDK（3.0）开始，google不再允许网络请求（HTTP、Socket）等相关操作直接在Main Thread类中。既然不允许放在主线程那就另开线程执行，但这样结果要跑回主线程就要通过 interface 回调跑回主线程，进而所有调用该方法的方法都要加一 interface 参数，这样改动太大了。</p><p>在Java中一般通过继承Thread类或者实现Runnable接口这两种方式来创建多线程，但是这两种方式都有个缺陷，就是不能在执行完成后获取执行的结果，因此Java 1.5之后提供了Callable和Future接口，通过它们就可以在任务执行完毕之后得到任务的执行结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">FutureTask&lt;SoapObject&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;SoapObject&gt;(</span><br><span class="line">        <span class="keyword">new</span> Callable&lt;SoapObject&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SoapObject <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 调用WebService</span></span><br><span class="line">                    ht.call(NAMESPACE + <span class="string">"/"</span> + method_name, envelope);</span><br><span class="line">                    <span class="keyword">if</span> (envelope.getResponse() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 获取返回的数据</span></span><br><span class="line">                        SoapObject object = (SoapObject) envelope.bodyIn;</span><br><span class="line">                        <span class="comment">// 获取返回的结果</span></span><br><span class="line">                        String result = object.getProperty(<span class="number">0</span>)</span><br><span class="line">                                .toString();</span><br><span class="line">                        LogUtil.E(<span class="string">"Service_conn"</span>, result);</span><br><span class="line">                        <span class="keyword">return</span> object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    soap_result = futureTask.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样不需要在回调中获取结果。</p><p>最终代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.ksoap2.SoapEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.PropertyInfo;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapObject;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapSerializationEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.transport.HttpTransportSE;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service_conn</span> </span>&#123;</span><br><span class="line">    String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAMESPACE = <span class="string">"WebService"</span>;</span><br><span class="line">    SoapObject soap_request;</span><br><span class="line">    HttpTransportSE ht;</span><br><span class="line">    SoapSerializationEnvelope envelope;</span><br><span class="line">    <span class="keyword">private</span> SoapObject soap_result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向服务器发送请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method_name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XmlPullParserException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SoapObject <span class="title">SEND_MESSAGE</span><span class="params">(<span class="keyword">final</span> String method_name, List&lt;NameValue&gt; param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        soap_request = <span class="keyword">new</span> SoapObject(NAMESPACE, method_name);</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.size(); i++) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"参数："</span> + param.get(i).getName() + <span class="string">"="</span> + param.get(i).getValue());</span><br><span class="line">                soap_request.addProperty(param.get(i).getName(), param.get(i).getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        envelope = <span class="keyword">new</span> SoapSerializationEnvelope(SoapEnvelope.VER11);</span><br><span class="line"><span class="comment">//envelope.bodyOut = soap_request;//此句导致参数发送不到服务器</span></span><br><span class="line">        envelope.dotNet = <span class="keyword">true</span>;<span class="comment">//webservice不指定rpc方式则用true否则要用false(也会导致参数发送不到服务器)</span></span><br><span class="line">        envelope.setOutputSoapObject(soap_request);</span><br><span class="line">        ht = <span class="keyword">new</span> HttpTransportSE(SocketService.URL);</span><br><span class="line">        ht.debug = <span class="keyword">true</span>;</span><br><span class="line">        Log.e(TAG, <span class="string">"URL:"</span> + SocketService.URL + <span class="string">"   NAMESPACE:"</span> + NAMESPACE + <span class="string">"    method_name:"</span> + method_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ht.call(NAMESPACE+"/"+method_name, envelope);// &lt;-- 问题出在这里</span></span><br><span class="line"><span class="comment">//        soap_result = (SoapObject) envelope.bodyIn;</span></span><br><span class="line">        FutureTask&lt;SoapObject&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;SoapObject&gt;(</span><br><span class="line">                <span class="keyword">new</span> Callable&lt;SoapObject&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> SoapObject <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 调用WebService</span></span><br><span class="line">                            ht.call(NAMESPACE + <span class="string">"/"</span> + method_name, envelope);</span><br><span class="line">                            <span class="keyword">if</span> (envelope.getResponse() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// 获取返回的数据</span></span><br><span class="line">                                SoapObject object = (SoapObject) envelope.bodyIn;</span><br><span class="line">                                <span class="comment">// 获取返回的结果</span></span><br><span class="line">                                String result = object.getProperty(<span class="number">0</span>)</span><br><span class="line">                                        .toString();</span><br><span class="line">                                LogUtil.E(<span class="string">"Service_conn"</span>, result);</span><br><span class="line">                                <span class="keyword">return</span> object;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            soap_result = futureTask.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> soap_result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的一个旧项目，用到了KSoap2访问Webservice，再编译运行时报&lt;code&gt;android.os.NetworkOnMainThreadException&lt;/code&gt;异常。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
      <category term="KSoap2" scheme="https://sogrey.github.io/tags/KSoap2/"/>
    
      <category term="Webservice" scheme="https://sogrey.github.io/tags/Webservice/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 添加 Gitment 评论</title>
    <link href="https://sogrey.github.io/article/Hexo-%E6%B7%BB%E5%8A%A0-Gitment-%E8%AF%84%E8%AE%BA/"/>
    <id>https://sogrey.github.io/article/Hexo-添加-Gitment-评论/</id>
    <published>2018-03-11T14:53:19.000Z</published>
    <updated>2018-10-27T09:02:25.757Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于之前使用的多说停用了，不得不另找其他评论插件就看到了 Gitment,源码在这 <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">github</a>。</p><p>话不多说，直接开整。</p><a id="more"></a><h2 id="1-注册Gitment-OAuth-Application"><a href="#1-注册Gitment-OAuth-Application" class="headerlink" title="1 注册Gitment OAuth Application"></a>1 注册Gitment OAuth Application</h2><p><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">官方介绍</a></p><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，比如我的就是 <code>https://sogrey.github.io/</code>）。</p><p><img src="https://sogrey.github.io/pics/注册Gitment OAuth Application.png" alt="注册Gitment OAuth Application"></p><p>你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p><p><img src="https://sogrey.github.io/pics/Gitment ClientId.png" alt="Gitment ClientId"></p><p>后面如果想查找之前注册的Gitment ClientId，在GitHub点击<code>Settings</code>&gt;<code>Developer settings</code> 即<a href="https://github.com/settings/developers" target="_blank" rel="noopener">developers</a></p><p><img src="https://sogrey.github.io/pics/查找Gitment ClientId.png" alt="查找Gitment ClientId"></p><p><img src="https://sogrey.github.io/pics/查找Gitment ClientId2.png" alt="查找Gitment ClientId"></p><h2 id="2-安装Gitment插件"><a href="#2-安装Gitment插件" class="headerlink" title="2 安装Gitment插件"></a>2 安装Gitment插件</h2><p>如果你希望引用确定版本的 Gitment，则应该使用 npm 进行安装。</p><pre><code>$ npm install --save gitment</code></pre><p>关于构造函数中的更多可用参数请查看 <a href="https://github.com/imsun/gitment#options" target="_blank" rel="noopener">Gitment Options</a></p><h2 id="3-引入-Gitment-到-hexo-文章页面"><a href="#3-引入-Gitment-到-hexo-文章页面" class="headerlink" title="3 引入 Gitment 到 hexo 文章页面"></a>3 引入 Gitment 到 hexo 文章页面</h2><p>我的主题是 <code>yelog</code> 是基于 <code>yelee</code> 的，其他主题也可参考。</p><p>将下面代码添加到文章页面,我贴在 <code>themes\yelog\layout\_partial\article.ejs</code> 的末尾：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--gitment 评论--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--汉化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://billts.site/extra_css/gitment.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://billts.site/js/gitment.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--原型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js" type="text/javascript"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitmentContainer"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: -19px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.gitment-container</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">          border: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.comments</span> &#123;</span></span><br><span class="line"><span class="undefined">          margin: 60px 0 0;padding: 0 60px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span></span><br><span class="line"><span class="javascript">  id: <span class="string">'&lt;%= page.title %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">  title: <span class="string">'&lt;%= page.title %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">  owner: <span class="string">'Sogrey'</span>,</span></span><br><span class="line"><span class="javascript">  repo: <span class="string">'Sogrey.github.io'</span>,</span></span><br><span class="line"><span class="undefined">  oauth: &#123;</span></span><br><span class="line"><span class="javascript">client_id: <span class="string">'5826******a208c'</span>,</span></span><br><span class="line"><span class="javascript">client_secret: <span class="string">'95db82**************************d7f6be1'</span>,</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        gitment.render(<span class="string">'gitmentContainer'</span>)</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--gitment 评论 end--&gt;</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>id: ‘&lt;%= page.title %&gt;’,//页面标题作为issue的label,长度不超过50，否则会出现 Error：validation failed 错误提示</li><li>owner 你的GitHub用户名即可</li><li>repo 保存评论的GitHub仓库名</li><li>client_id 你注册的Gitment Client ID [可在<a href="https://github.com/settings/developers" target="_blank" rel="noopener">developers</a>找到你注册的Gitment查看]</li><li>client_secret 你注册的Gitment Client secret [可在<a href="https://github.com/settings/developers" target="_blank" rel="noopener">developers</a>找到你注册的Gitment查看]</li><li>汉化来自<a href="https://github.com/imsun/gitment/issues/104" target="_blank" rel="noopener">评论框汉化问题</a></li></ul><h2 id="4-主题配置"><a href="#4-主题配置" class="headerlink" title="4 主题配置"></a>4 主题配置</h2><p>在主题的 <code>_config.yml</code>文件添加（各参数解释如上）：</p><pre><code># Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment:  enable: true  githubID: Sogrey  repo: Sogrey.github.io  ClientID: 5826******a208c  ClientSecret: 95db82**************************d7f6be1  lazy: false</code></pre><p>其中：</p><ul><li>lazy: false true表示评论懒加载，即不直接显示评论，false则直接显示评论，懒加载可参考<a href="http://blog.csdn.net/yanzi1225627/article/details/77890414" target="_blank" rel="noopener">hexo next主题集成gitment评论系统</a>配置 <code>gitmentbutton</code> 的显示文字。</li></ul><h2 id="5-部署网站"><a href="#5-部署网站" class="headerlink" title="5 部署网站"></a>5 部署网站</h2><p>依次执行：</p><pre><code>hexo ghexo d</code></pre><p>查看站点。</p><h2 id="6-初始化评论"><a href="#6-初始化评论" class="headerlink" title="6 初始化评论"></a>6 初始化评论</h2><p>页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第一步所填 repo 的 owner），点击初始化按钮。</p><p>只有你自己先初始化后在会在对应的GitHub 仓库的issue中创建一条对应的issue，之后其他用户即可在该页面发表评论。</p><h2 id="Gitment坑点小结-部分出自iHTCboy"><a href="#Gitment坑点小结-部分出自iHTCboy" class="headerlink" title="Gitment坑点小结 部分出自iHTCboy"></a>Gitment坑点小结 部分出自<a href="https://www.jianshu.com/p/57afa4844aaa" target="_blank" rel="noopener">iHTCboy</a></h2><p>1 <code>owner: &#39;Your GitHub ID&#39;</code></p><pre><code>owner: &apos;你的 GitHub ID&apos;,可以是你的GitHub用户名，也可以是github id，建议直接用GitHub用户名就可以。</code></pre><p>2 <code>repo: &#39;The repo to store comments</code></p><pre><code>repo: &apos;存储评论的 github repo&apos;这个是你要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的。</code></pre><p>3 <code>Error: Not Found问题</code></p><pre><code>owner或者repo配置错误了，注意名字和仓库名字的大小写。</code></pre><p>4 <code>Error: Comments Not Initialized</code></p><pre><code>在注册OAuth Application这个步骤中，给Authorization callback URL指定的地址错了还没有在该页面的Gitment评论区登陆GitHub账号</code></pre><p>如果还是不行，可以参考另一个情况 <a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fimsun%2Fgitment%2Fissues%2F95" target="_blank" rel="noopener">Error: Comments Not Initialized · Issue #95 · imsun/gitment</a></p><p>5 <code>Error：validation failed</code></p><pre><code>issue的标签label有长度限制！labels的最大长度限制是50个字符。id: &apos;页面 ID&apos;, // 可选。默认为 location.href这个id的作用，就是针对一个文章有唯一的标识来判断这篇本章。在issues里面，可以发现是根据网页标题来新建issues的，然后每个issues有两个labels（标签），一个是gitment，另一个就是id。所以明白了原理后，就是因为id太长，导致初始化失败，现在就是要让id保证在50个字符内。对应配置的id为：id: &apos;&lt;%= page.title %&gt;&apos;如果用网页标题也不能保证在50个字符！最后，我用文章的时间，这样长度是保证在50个字符内，完美解决！（避免了文章每次更新标题或路径时，会重新创建一个issue评论的问题。）id: &apos;&lt;%= page.date %&gt;&apos;</code></pre><p>6 gitment的汉化</p><pre><code>只需到模板里将原来定义CSS和JS的那两行改成：&lt;link rel=&quot;stylesheet&quot; href=&quot;https://billts.site/extra_css/gitment.css&quot;&gt;&lt;script src=&quot;https://billts.site/js/gitment.js&quot;&gt;&lt;/script&gt;即可。来源：https://github.com/imsun/gitment/issues/104</code></pre><p>7 Gitment出现在文章列表上</p><p><img src="https://sogrey.github.io/pics/Gitment出现在文章列表上.png" alt="Gitment出现在文章列表上"></p><p>解决办法是为上面添加在文章页面上的那一大段代码 添加 下面代码将其包裹在内：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span>) &#123; %&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--原来的代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>即变成下面的样子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--gitment 评论--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span>) &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--汉化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://billts.site/extra_css/gitment.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://billts.site/js/gitment.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--原型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js" type="text/javascript"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitmentContainer"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: -19px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.gitment-container</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">          border: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.comments</span> &#123;</span></span><br><span class="line"><span class="undefined">          margin: 60px 0 0;padding: 0 60px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span></span><br><span class="line"><span class="javascript">  id: <span class="string">'&lt;%= page.title %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">  title: <span class="string">'&lt;%= page.title %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">  owner: <span class="string">'Sogrey'</span>,</span></span><br><span class="line"><span class="javascript">  repo: <span class="string">'Sogrey.github.io'</span>,</span></span><br><span class="line"><span class="undefined">  oauth: &#123;</span></span><br><span class="line"><span class="javascript">client_id: <span class="string">'5826******a208c'</span>,</span></span><br><span class="line"><span class="javascript">client_secret: <span class="string">'95db82**************************d7f6be1'</span>,</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        gitment.render(<span class="string">'gitmentContainer'</span>)</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="comment">&lt;!--gitment 评论 end--&gt;</span></span><br></pre></td></tr></table></figure><p>8 Error: Bad credentials</p><p>此类错误一般原因是填写授权<code>Client ID</code>或<code>Client Secret</code>时有误，请确认是否正确，我这里出现，之前是好的，因换了系统重新配置提交后就这样了。F12 查看到gitment.js 有两个 401.定位应该是授权问题。</p><p><a href="https://github.com/imsun/gitment/issues/145" target="_blank" rel="noopener">Error: Bad credentials#145</a></p><p><img src="https://sogrey.github.io/pics/Error%20Bad%20credentials.jpg" alt=""></p><p>解决：</p><p>我在<a href="https://github.com/settings/profile" target="_blank" rel="noopener">Settings</a>/<a href="https://github.com/settings/developers" target="_blank" rel="noopener">Developer settings</a>的<code>OAuth Apps</code>中找到我们授权的应用，重新生产秘钥，重新配置就好了。<br><img src="https://sogrey.github.io/pics/OAuth%20Apps.jpg" alt=""><br><img src="https://sogrey.github.io/pics/OAuth%20Apps2.jpg" alt=""><br>重新配置 theme 下的 _config.yml 文件<br><img src="https://sogrey.github.io/pics/gitment_config.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于之前使用的多说停用了，不得不另找其他评论插件就看到了 Gitment,源码在这 &lt;a href=&quot;https://github.com/imsun/gitment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;话不多说，直接开整。&lt;/p&gt;
    
    </summary>
    
      <category term="Gitment" scheme="https://sogrey.github.io/categories/Gitment/"/>
    
    
      <category term="Hexo" scheme="https://sogrey.github.io/tags/Hexo/"/>
    
      <category term="Gitment" scheme="https://sogrey.github.io/tags/Gitment/"/>
    
  </entry>
  
  <entry>
    <title>Android Webview 内容自适应高度</title>
    <link href="https://sogrey.github.io/article/Android-Webview-%E5%86%85%E5%AE%B9%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6/"/>
    <id>https://sogrey.github.io/article/Android-Webview-内容自适应高度/</id>
    <published>2018-03-10T06:26:59.000Z</published>
    <updated>2018-03-10T06:30:56.975Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        webview.loadUrl(<span class="string">"javascript:App.resize(document.getElementById('chatsDataList').scrollHeight)"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">webview.addJavascriptInterface(<span class="keyword">this</span>, <span class="string">"App"</span>);</span><br><span class="line">webview.loadUrl(<span class="string">"http://localhost:"</span> + Constant.port + <span class="string">"/pages/indexCharts.html"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JavascriptInterface</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">float</span> height)</span> </span>&#123;</span><br><span class="line">    getActivity().runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            TT.showToast(mContext, height + <span class="string">""</span>);</span><br><span class="line">            <span class="comment">//此处的 layoutParmas 需要根据父控件类型进行区分，这里为了简单就不这么做了</span></span><br><span class="line">            webview.setLayoutParams(<span class="keyword">new</span> LinearLayout.LayoutParams(getResources().getDisplayMetrics().widthPixels, (<span class="keyword">int</span>) (height * getResources().getDisplayMetrics().density)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>chatsDataList</code>要修改成自己的元素</li><li>要运行在UI线程</li><li>要设置LayoutParams <blockquote><p>webView.getLayoutParams().height =height;是没有用的</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="https://sogrey.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://sogrey.github.io/tags/Android/"/>
    
      <category term="Webview" scheme="https://sogrey.github.io/tags/Webview/"/>
    
  </entry>
  
  <entry>
    <title>java实现定时任务的三种方法(收集)</title>
    <link href="https://sogrey.github.io/article/java%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://sogrey.github.io/article/java实现定时任务的三种方法/</id>
    <published>2018-01-03T06:08:44.000Z</published>
    <updated>2018-01-03T06:15:42.740Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>普通thread </li></ul><p>这是最常见的，创建一个thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskRunnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// run in a second  </span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> timeInterval = <span class="number">1000</span>;  </span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">                    <span class="comment">// ------- code for task to run  </span></span><br><span class="line">                    System.out.println(<span class="string">"Hello !!"</span>);  </span><br><span class="line">                    <span class="comment">// ------- ends here  </span></span><br><span class="line">                    <span class="keyword">try</span> &#123;  </span><br><span class="line">                        Thread.sleep(timeInterval);  </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                        e.printStackTrace();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);  </span><br><span class="line">        thread.start();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>TimerTask </li></ul><p> 于第一种方式相比，优势 1&gt;当启动和去取消任务时可以控制 2&gt;第一次执行任务时可以指定你想要的delay时间  在实现时，Timer类可以调度任务，imerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。</p><p> 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTimerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TimerTask task = <span class="keyword">new</span> TimerTask() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="comment">// task to run goes here  </span></span><br><span class="line">                System.out.println(<span class="string">"Hello !!!"</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();  </span><br><span class="line">        <span class="keyword">long</span> delay = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">long</span> intevalPeriod = <span class="number">1</span> * <span class="number">1000</span>;  </span><br><span class="line">        <span class="comment">// schedules the task to be run in an interval  </span></span><br><span class="line">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ScheduledExecutorService</li></ul><p>ScheduledExecutorService是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p><p>相比于上两个方法，它有以下好处：</p><ul><li>1&gt;相比于Timer的单线程，它是通过线程池的方式来执行任务的  </li><li>2&gt;可以很灵活的去设定第一次执行任务delay时间 </li><li>3&gt;提供了良好的约定，以便设定执行的时间间隔 </li></ul><p>下面是实现代码，我们通过ScheduledExecutorService#scheduleAtFixedRate展示这个例子，通过代码里参数的控制，首次执行加了delay时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskScheduledExecutorService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="comment">// task to run goes here  </span></span><br><span class="line">                System.out.println(<span class="string">"Hello !!"</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        ScheduledExecutorService service = Executors  </span><br><span class="line">                .newSingleThreadScheduledExecutor();  </span><br><span class="line">        <span class="comment">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></span><br><span class="line">        service.scheduleAtFixedRate(runnable, <span class="number">10</span>, <span class="number">1</span>, TimeUnit.SECONDS);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自：<a href="http://blog.csdn.net/haorengoodman/article/details/23281343/" target="_blank" rel="noopener">java实现定时任务的三种方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;普通thread &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是最常见的，创建一个thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; org.sogrey.task;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TaskRunnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; args&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// run in a second  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timeInterval = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Runnable runnable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// ------- code for task to run  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello !!&quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// ------- ends here  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        Thread.sleep(timeInterval);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        e.printStackTrace();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread thread = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(runnable);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        thread.start();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="https://sogrey.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sogrey.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java读取文件夹大小的6种方法（收集）</title>
    <link href="https://sogrey.github.io/article/Java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F%E7%9A%846%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/"/>
    <id>https://sogrey.github.io/article/Java读取文件夹大小的6种方法（收集）/</id>
    <published>2017-12-19T07:04:22.000Z</published>
    <updated>2017-12-19T07:23:33.993Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>说明：File.length()仅仅用于获得某个文件的大小，单位为bytes</p><p>以下提供六种方法遍历文件夹下子文件求其大小总和。</p></blockquote><a id="more"></a><h3 id="单线程递归方式"><a href="#单线程递归方式" class="headerlink" title="单线程递归方式"></a>单线程递归方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TotalFileSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归方式 计算文件的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile())</span><br><span class="line">            <span class="keyword">return</span> file.length();</span><br><span class="line">        <span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line">        <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (children != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> File child : children)</span><br><span class="line">                total += getTotalSizeOfFilesInDir(child);</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> TotalFileSize()</span><br><span class="line">                .getTotalSizeOfFilesInDir(<span class="keyword">new</span> File(fileName));</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">        System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.02347729</code></pre><h3 id="使用Executors-newFixedThreadPool和callable-多线程实现"><a href="#使用Executors-newFixedThreadPool和callable-多线程实现" class="headerlink" title="使用Executors.newFixedThreadPool和callable 多线程实现"></a>使用Executors.newFixedThreadPool和callable 多线程实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentTotalFileSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubDirectoriesAndSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">long</span> size;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> List&lt;File&gt; subDirectories;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubDirectoriesAndSize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> totalSize,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> List&lt;File&gt; theSubDirs)</span> </span>&#123;</span><br><span class="line">size = totalSize;</span><br><span class="line">subDirectories = Collections.unmodifiableList(theSubDirs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> SubDirectoriesAndSize <span class="title">getTotalAndSubDirs</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> List&lt;File&gt; subDirectories = <span class="keyword">new</span> ArrayList&lt;File&gt;();</span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile())</span><br><span class="line">total += child.length();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">subDirectories.add(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SubDirectoriesAndSize(total, subDirectories);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> File file)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ExecutorService service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> List&lt;File&gt; directories = <span class="keyword">new</span> ArrayList&lt;File&gt;();</span><br><span class="line">directories.add(file);</span><br><span class="line"><span class="keyword">while</span> (!directories.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">final</span> List&lt;Future&lt;SubDirectoriesAndSize&gt;&gt; partialResults = <span class="keyword">new</span> ArrayList&lt;Future&lt;SubDirectoriesAndSize&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File directory : directories) &#123;</span><br><span class="line">partialResults.add(service</span><br><span class="line">.submit(<span class="keyword">new</span> Callable&lt;SubDirectoriesAndSize&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> SubDirectoriesAndSize <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getTotalAndSubDirs(directory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br><span class="line">directories.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> Future&lt;SubDirectoriesAndSize&gt; partialResultFuture : partialResults) &#123;</span><br><span class="line"><span class="keyword">final</span> SubDirectoriesAndSize subDirectoriesAndSize = partialResultFuture</span><br><span class="line">.get(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line">directories.addAll(subDirectoriesAndSize.subDirectories);</span><br><span class="line">total += subDirectoriesAndSize.size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> ConcurrentTotalFileSize()</span><br><span class="line">.getTotalSizeOfFilesInDir(<span class="keyword">new</span> File(fileName));</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.102727254</code></pre><h3 id="使用Executors-newFixedThreadPool和callable-多线程的另外一种实现"><a href="#使用Executors-newFixedThreadPool和callable-多线程的另外一种实现" class="headerlink" title="使用Executors.newFixedThreadPool和callable 多线程的另外一种实现"></a>使用Executors.newFixedThreadPool和callable 多线程的另外一种实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NaivelyConcurrentTotalFileSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> ExecutorService service,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> File file)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException,</span></span><br><span class="line"><span class="function">TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (file.isFile())</span><br><span class="line"><span class="keyword">return</span> file.length();</span><br><span class="line"><span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> List&lt;Future&lt;Long&gt;&gt; partialTotalFutures = <span class="keyword">new</span> ArrayList&lt;Future&lt;Long&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line">partialTotalFutures.add(service.submit(<span class="keyword">new</span> Callable&lt;Long&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getTotalSizeOfFilesInDir(service, child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> Future&lt;Long&gt; partialTotalFuture : partialTotalFutures)</span><br><span class="line">total += partialTotalFuture.get(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFile</span><span class="params">(<span class="keyword">final</span> String fileName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ExecutorService service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getTotalSizeOfFilesInDir(service, <span class="keyword">new</span> File(fileName));</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> NaivelyConcurrentTotalFileSize()</span><br><span class="line">.getTotalSizeOfFile(fileName);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.058243242</code></pre><h3 id="使用CountDownLatch和AtomicLong实现多线程下的并发控制"><a href="#使用CountDownLatch和AtomicLong实现多线程下的并发控制" class="headerlink" title="使用CountDownLatch和AtomicLong实现多线程下的并发控制"></a>使用CountDownLatch和AtomicLong实现多线程下的并发控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentTotalFileSizeWLatch</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ExecutorService service;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> AtomicLong pendingFileVisits = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> AtomicLong totalSize = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> fileSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile())</span><br><span class="line">fileSize = file.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile())</span><br><span class="line">fileSize += child.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pendingFileVisits.incrementAndGet();</span><br><span class="line">service.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">updateTotalSizeOfFilesInDir(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">totalSize.addAndGet(fileSize);</span><br><span class="line"><span class="keyword">if</span> (pendingFileVisits.decrementAndGet() == <span class="number">0</span>)</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFile</span><span class="params">(<span class="keyword">final</span> String fileName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line">pendingFileVisits.incrementAndGet();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">updateTotalSizeOfFilesInDir(<span class="keyword">new</span> File(fileName));</span><br><span class="line">latch.await(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">return</span> totalSize.longValue();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> ConcurrentTotalFileSizeWLatch()</span><br><span class="line">.getTotalSizeOfFile(fileName);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.026633095</code></pre><h3 id="使用BlockingQueue和AtomicLong的实现"><a href="#使用BlockingQueue和AtomicLong的实现" class="headerlink" title="使用BlockingQueue和AtomicLong的实现"></a>使用BlockingQueue和AtomicLong的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentTotalFileSizeWQueue</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ExecutorService service;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> BlockingQueue&lt;Long&gt; fileSizes = <span class="keyword">new</span> ArrayBlockingQueue&lt;Long&gt;(</span><br><span class="line"><span class="number">500</span>);</span><br><span class="line"><span class="keyword">final</span> AtomicLong pendingFileVisits = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startExploreDir</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line">pendingFileVisits.incrementAndGet();</span><br><span class="line">service.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">exploreDir(file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exploreDir</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> fileSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile())</span><br><span class="line">fileSize = file.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile())</span><br><span class="line">fileSize += child.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">startExploreDir(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileSizes.put(fileSize);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line">pendingFileVisits.decrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFile</span><span class="params">(<span class="keyword">final</span> String fileName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">startExploreDir(<span class="keyword">new</span> File(fileName));</span><br><span class="line"><span class="keyword">long</span> totalSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pendingFileVisits.get() &gt; <span class="number">0</span> || fileSizes.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Long size = fileSizes.poll(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">totalSize += size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalSize;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> ConcurrentTotalFileSizeWQueue()</span><br><span class="line">.getTotalSizeOfFile(fileName);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.044469408</code></pre><h3 id="使用jdk7的ForkJoin来实现"><a href="#使用jdk7的ForkJoin来实现" class="headerlink" title="使用jdk7的ForkJoin来实现"></a>使用jdk7的ForkJoin来实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinTask;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSizeFinder</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">final</span> File file;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileSizeFinder</span><span class="params">(<span class="keyword">final</span> File theFile)</span> </span>&#123;</span><br><span class="line">file = theFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">size = file.length();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</span><br><span class="line">List&lt;ForkJoinTask&lt;Long&gt;&gt; tasks = <span class="keyword">new</span> ArrayList&lt;ForkJoinTask&lt;Long&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile()) &#123;</span><br><span class="line">size += child.length();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tasks.add(<span class="keyword">new</span> FileSizeFinder(child));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ForkJoinTask&lt;Long&gt; task : invokeAll(tasks)) &#123;</span><br><span class="line">size += task.join();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = forkJoinPool.invoke(<span class="keyword">new</span> FileSizeFinder(<span class="keyword">new</span> File(fileName)));</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.015022339</code></pre><p>来自<a href="http://blog.csdn.net/u011277123/article/details/52980247" target="_blank" rel="noopener">http://blog.csdn.net/u011277123/article/details/52980247</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;说明：File.length()仅仅用于获得某个文件的大小，单位为bytes&lt;/p&gt;
&lt;p&gt;以下提供六种方法遍历文件夹下子文件求其大小总和。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://sogrey.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sogrey.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>json转树状结构（收集）</title>
    <link href="https://sogrey.github.io/article/json%E8%BD%AC%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/"/>
    <id>https://sogrey.github.io/article/json转树状结构（收集）/</id>
    <published>2017-12-09T02:48:07.000Z</published>
    <updated>2017-12-09T13:24:28.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一切都源于项目需求。近期web项目中需要这样的功能：将json数据转为树级结构，json的数据结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"pId"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"水电站项目"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="string">"pId"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"项目一标段"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="string">"pId"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"项目二标段"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><p>于是开始百度，找到如下解决方案：</p><ul><li>方案一</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toTree</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删除 所有 children,以防止多次调用</span></span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> item.children;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将数据存储为 以 id 为 KEY 的 map 索引数据列</span></span><br><span class="line">  <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    map[item.id] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> val = [];</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 以当前遍历项，的pid,去map对象中找到索引的id</span></span><br><span class="line">    <span class="keyword">var</span> parent = map[item.pId];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中</span></span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent.children || (parent.children = [])).push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级</span></span><br><span class="line">      val.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方案却也适合，只是他只能适用于 <code>id-pId</code> 这种，要适配 其他 像 <code>dataId-parentId</code> 这种就需要将上面代码中的 <code>id</code>改为<code>dataId</code>，<code>pId</code>改为<code>parentId</code>。</p><p>之后又发现了另一种方案。</p><ul><li>方案二</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * json格式转树状结构 </span></span><br><span class="line"><span class="comment"> * @param   &#123;json&#125;      json数据 </span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    id的字符串 </span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    父id的字符串 </span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    children的字符串 </span></span><br><span class="line"><span class="comment"> * @return  &#123;Array&#125;     数组 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transData</span>(<span class="params">a, idStr, pidStr, chindrenStr</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> r = [], hash = &#123;&#125;, id = idStr, pid = pidStr, children = chindrenStr, i = <span class="number">0</span>, j = <span class="number">0</span>, len = a.length;  </span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++)&#123;  </span><br><span class="line">        hash[a[i][id]] = a[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(; j &lt; len; j++)&#123;  </span><br><span class="line">        <span class="keyword">var</span> aVal = a[j], hashVP = hash[aVal[pid]];  </span><br><span class="line">        <span class="keyword">if</span>(hashVP)&#123;  </span><br><span class="line">            !hashVP[children] &amp;&amp; (hashVP[children] = []);  </span><br><span class="line">            hashVP[children].push(aVal);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            r.push(aVal);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> r;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来自：<a href="http://rockyuse.iteye.com/blog/1541308" target="_blank" rel="noopener">json转树状结构（js）</a></p><p>这样使用：<code>var jsonDataTree = transData(jsonData, &#39;id&#39;, &#39;pid&#39;, &#39;chindren&#39;);</code>,其中 参数一是json数据对象，后三个参数分别指明了 <code>id</code>、 <code>pId</code> 以及其子集 <code>chindren</code>，很好解决了方案一的不足.</p><p>借于方案二的启发，何不将方案一改造改造，于是就有了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * json格式转树状结构 </span></span><br><span class="line"><span class="comment"> * @param   &#123;json&#125;      json数据 </span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    id的字符串 默认值"id"</span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    父id的字符串 默认值"pId"</span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    children的字符串 默认值"children"</span></span><br><span class="line"><span class="comment"> * @return  &#123;Array&#125;     数组 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toTree</span>(<span class="params">data,idStr=<span class="string">"id"</span>,pIdStr=<span class="string">"pId"</span>,chindrenStr=<span class="string">"children"</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删除 所有 children,以防止多次调用</span></span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> item[chindrenStr];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将数据存储为 以 id 为 KEY 的 map 索引数据列</span></span><br><span class="line">  <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    map[item[idStr]] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> val = [];</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 以当前遍历项，的pid,去map对象中找到索引的id</span></span><br><span class="line">    <span class="keyword">var</span> parent = map[item[pIdStr]];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中</span></span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent[chindrenStr] || (parent[chindrenStr] = [])).push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级</span></span><br><span class="line">      val.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中后三个参数设置默认值分别是 <code>id-pId-children</code>，像开题的那段json刚好满足就省略后三个参数可以这样调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">eval</span>(<span class="string">'[&#123;"id":"1","pId":"0","value":"水电站项目"&#125;,&#123;"id":"2","pId":"1","value":"项目一标段"&#125;,&#123;"id":"3","pId":"1","value":"项目二标段"&#125;]'</span>); </span><br><span class="line"><span class="keyword">var</span> jsonDataTree = toTree(jsonData); </span><br><span class="line"><span class="built_in">console</span>.log(jsonDataTree);</span><br></pre></td></tr></table></figure><p>输出如下：</p><pre><code class="javascript">[    {        <span class="string">"id"</span>: <span class="string">"1"</span>,         <span class="string">"pId"</span>: <span class="string">"0"</span>,         <span class="string">"value"</span>: <span class="string">"水电站项目"</span>,         <span class="string">"children"</span>: [            {                <span class="string">"id"</span>: <span class="string">"2"</span>,                 <span class="string">"pId"</span>: <span class="string">"1"</span>,                 <span class="string">"value"</span>: <span class="string">"项目一标段"</span>            },             {                <span class="string">"id"</span>: <span class="string">"3"</span>,                 <span class="string">"pId"</span>: <span class="string">"1"</span>,                 <span class="string">"value"</span>: <span class="string">"项目二标段"</span>            }        ]    }]</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cnblogs.com/azhqiang/p/4169534.html" target="_blank" rel="noopener">java、js中实现无限层级的树形结构（类似递归）</a></li><li><a href="http://rockyuse.iteye.com/blog/1541308" target="_blank" rel="noopener">json转树状结构（js）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一切都源于项目需求。近期web项目中需要这样的功能：将json数据转为树级结构，json的数据结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;pId&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;水电站项目&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;pId&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;项目一标段&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;pId&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;项目二标段&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sogrey.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sogrey.github.io/tags/JavaScript/"/>
    
      <category term="JSON" scheme="https://sogrey.github.io/tags/JSON/"/>
    
  </entry>
  
</feed>
