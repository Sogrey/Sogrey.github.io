<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VSCODE配置C/C++最小配置</title>
      <link href="/article/VSCODE%E9%85%8D%E7%BD%AEC-CPP%E6%9C%80%E5%B0%8F%E9%85%8D%E7%BD%AE/"/>
      <url>/article/VSCODE%E9%85%8D%E7%BD%AEC-CPP%E6%9C%80%E5%B0%8F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>准备工具：</p><ul><li><a href="https://code.visualstudio.com/">vscode</a> (自行安装)</li><li><a href="https://nuwen.net/mingw.html">MinGW</a> (C/C++环境)</li></ul><h2 id="安装C-C-环境–MinGW"><a href="#安装C-C-环境–MinGW" class="headerlink" title="安装C/C++环境–MinGW"></a>安装C/C++环境–MinGW</h2><p>进入网站<a href="https://nuwen.net/mingw.html">MinGW</a>，点击如下图红框链接下载。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/mingw-01.png" alt="下载MinGW"></p><p>解压出来MinGW放到你已知的目录下，我放在<code>D:\Programs\</code>下。</p><p>需将<code>MinGW\bin</code>目录添加到环境变量中，这样就能在vscode中访问到G++和GCC。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/mingw-02.png" alt="配置MinGW环境变量"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/mingw-03.png" alt="测试g++"></p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> G:\github\c\vscode<span class="literal">-cpp</span>&gt; g++ <span class="literal">--version</span></span><br><span class="line">g++.exe (GCC) <span class="number">11.2</span>.<span class="number">0</span></span><br><span class="line">Copyright (C) <span class="number">2021</span> Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source <span class="keyword">for</span> copying conditions.  There is NO      </span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS <span class="keyword">FOR</span> A PARTICULAR PURPOSE.     </span><br></pre></td></tr></table></figure><h2 id="vscode安装c-c-插件"><a href="#vscode安装c-c-插件" class="headerlink" title="vscode安装c/c++插件"></a>vscode安装c/c++插件</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C/C++</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>根据上面各项配置下来已经差不多了，写个简单c++程序测试一下。</p><p>test.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vscode终端（PowerShell）中执行：<code>if ($?) &#123; g++ test.cpp -o test &#125; ; if ($?) &#123; .\test &#125;</code></p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> G:\github\c\vscode<span class="literal">-cpp</span>&gt; <span class="keyword">if</span> (<span class="variable">$</span>?) &#123; g++ test.cpp <span class="literal">-o</span> test &#125; ; <span class="keyword">if</span> (<span class="variable">$</span>?) &#123; .\test&#125;  </span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><p>成功生成<code>test.exe</code>并执行输出<code>Hello world</code>。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>为方便配置vscode中c/c++环境配置，在根目录下创建<code>.vscode</code>。添加如下几个配置文件：</p><p><a href="https://github.com/Sogrey/vscode-cpp/blob/main/.vscode/settings.json">settings.json</a> 主要为解决中文乱码问题</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.detectIndentation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[cpp]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ms-vscode.cpptools&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gbk&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[c]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ms-vscode.cpptools&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gbk&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Sogrey/vscode-cpp/blob/main/.vscode/c_cpp_properties.json">c_cpp_properties.json</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GCC&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span> <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span> <span class="string">&quot;_UNICODE&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;windowsSdkVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.18362.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Programs\\MinGW\\bin\\g++.exe&quot;</span><span class="punctuation">,</span><span class="comment">//改路径！！MinGW中g++.exe路径</span></span><br><span class="line">        <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;windows-gcc-x64&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Sogrey/vscode-cpp/blob/main/.vscode/launch.json">launch.json</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++.exe - Build and debug active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Programs\\MinGW\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span><span class="comment">//改成你的mingw中gdb.exe的路径！！</span></span><br><span class="line">        <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: g++.exe build active file&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Sogrey/vscode-cpp/blob/main/.vscode/tasks.json">tasks.json</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: g++.exe build active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Programs\\MinGW\\bin\\g++.exe&quot;</span><span class="punctuation">,</span><span class="comment">//改为mingw中g++.exe路径</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$gcc&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compiler: D:\\Programs\\MinGW\\bin\\g++.exe&quot;</span><span class="comment">//改为mingw中g++.exe路径</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Sogrey/vscode-cpp">github</a></p>]]></content>
      
      
      <categories>
          
          <category> VS code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS code </tag>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录使用clash_for_windows订阅实现科学上网</title>
      <link href="/article/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash-for-windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>/article/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash-for-windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>知乎上偶然看到一个《linux系统永久免费科学上网》（<a href="https://www.zhihu.com/zvideo/1496121708049965056">原视频在此</a>），我们做开发，也会遇到查询一些资料被墙的无助，赶紧来试试。</p><span id="more"></span><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><ul><li>Windows 10 专业版</li><li>clash_for_windows v0.19.15 <a href="https://github.com/Fndroid/clash_for_windows_pkg">github</a></li></ul><h2 id="2-下载安装clash-for-windows"><a href="#2-下载安装clash-for-windows" class="headerlink" title="2. 下载安装clash_for_windows"></a>2. 下载安装clash_for_windows</h2><p>可到<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">releases</a>找到最新版本，根据你自己的设备选择安装。</p><h2 id="3-订阅"><a href="#3-订阅" class="headerlink" title="3. 订阅"></a>3. 订阅</h2><p>打开<a href="https://v2rayse.com/">https://v2rayse.com/</a>找到第一项点击【进入】。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash_for_windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-01.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash_for_windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-02.png"></p><p>进入后访问需要输入密码，密码可通过电报、油管直播来获取 <a href="https://t.me/changfengshare">「Telegram」</a> <a href="https://www.youtube.com/channel/UC-q1OwxWpoX4Ywou47xWM_w">「YouTube」</a> 来获取，BUT,这两个网站都在外域，我是访问不了，在此被劝退了，有可以访问的朋友可以跟着文头视频继续。</p><p>但幸好站长在下方评论给出了他的网站可以拿到免费节点数据，而且是每天更新，地址是<a href="https://cfmem.com/">https://cfmem.com</a>。进入网站找到最新日期文章进入拉到最下面找到<strong>订阅链接</strong>中<strong>clash订阅链接</strong>，复制下来。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash_for_windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-03.png"></p><p>打开刚安装的clash_for_windows,点击左侧菜单<strong>Profiles</strong>,输入框中填入刚复制的订阅地址，点击<strong>Download</strong>，等待下载完成即可，如果长时间下载不成，可通过浏览器或下载工具下载，文件拖入clash_for_windows也行。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash_for_windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-04.png"></p><p>点击[General]按照如图打开相应开关，如果需要局域网支持打开<strong>Allow LAN</strong>开关。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash_for_windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-05.png"></p><p>原视频最后还提到需要设置代理，<code>127.0.0.1</code> 端口: <code>7890</code>。勾选<code>System Proxy</code>即可。试试效果吧。</p><p>访问<a href="https://www.youtube.com/">https://www.youtube.com/</a>真的可以打开了，视频播放也很流畅。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash_for_windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-06.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash_for_windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-07.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8clash_for_windows%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-08.png"></p><h2 id="4-警告"><a href="#4-警告" class="headerlink" title="4. 警告"></a>4. 警告</h2><p>《计算机信息网络国际联网管理暂行规定》第六条、第十四条：</p><pre><code>第六条 计算机信息网络直接进行国际联网，必须使用邮电部国家公用电信网提供的国际出入口信道。任何单位和个人不得自行建立或者使用其他信道进行国际联网。第十四条 违反本规定第六条、第八条和第十条的规定的，由公安机关责令停止联网，给予警告，可以并处 15000 元以下的罚款；有违法所得的，没收违法所得。</code></pre><p>《计算机信息网络国际联网安全保护管理办法》第五条、第二十条进行处罚。因为多数翻墙者会浏览色情、赌博、暴力、危害国家安全等违法内容。</p><pre><code>第五条任何单位和个人不得利用国际联网制作、复制、查阅和传播下列信息:(一)煽动抗拒、破坏宪法和法律、行政法规实施的；(二)煽动颠覆国家政权，推翻社会主义制度的；(三)煽动分裂国家、破坏国家统一的；(四)煽动民族仇恨、民族歧视，破坏民族团结的；(五)捏造或者歪曲事实，散布谣言，扰乱社会秩序的；(六)宣扬封建迷信、淫秽、色情、赌博、暴力、凶杀、恐怖，教唆犯罪的；(七)公然侮辱他人或者捏造事实诽谤他人的；(八)损害国家机关信誉的；(九)其他违反宪法和法律、行政法规的。第二十条 违反法律、行政法规，有本办法第五条、第六条所列行为之一的，由公安机关给予警告，有违法所得的，没收违法所得，对个人可以并处五千元以下的罚款，对单位可以并处一万五千元以下的罚款。</code></pre><p>如确因正常的工作、学习需要，可以在采取规范的信息安全技术措施情况下，偶尔翻墙，但是绝对不能向他人提供翻墙软件、账号，更不能发表、传播危害国家安全等非法内容。</p><p>珍惜资源，请勿用于从事非法活动。</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Nodejs程序发布为windows服务</title>
      <link href="/article/%E5%B0%86Nodejs%E7%A8%8B%E5%BA%8F%E5%8F%91%E5%B8%83%E4%B8%BAwindows%E6%9C%8D%E5%8A%A1/"/>
      <url>/article/%E5%B0%86Nodejs%E7%A8%8B%E5%BA%8F%E5%8F%91%E5%B8%83%E4%B8%BAwindows%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>利用<a href="https://www.npmjs.com/package/node-windows">node-windows</a>，将nodejs程序发布为windows服务。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 node-windows 的推荐方法是使用 npm，使用全局标志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-windows</span><br></pre></td></tr></table></figure><p>然后，在您的项目根目录中，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">link</span> node-windows</span><br></pre></td></tr></table></figure><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p>npm库介绍上有段说明。</p><p>node-windows 有一个实用程序可以将 Node.js 脚本作为 Windows 服务运行。请注意，像所有 Windows 服务一样，创建一个需要管理权限。要使用节点窗口创建服务，请准备如下类似脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Service</span> = <span class="built_in">require</span>(<span class="string">&#x27;node-windows&#x27;</span>).<span class="property">Service</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> svc = <span class="keyword">new</span> <span class="title class_">Service</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;myservice&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;this is my windows service&#x27;</span>,</span><br><span class="line">  <span class="attr">script</span>: <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>).<span class="title function_">join</span>(__dirname, <span class="string">&#x27;client.js&#x27;</span>),</span><br><span class="line">  <span class="attr">nodeOptions</span>: [</span><br><span class="line">    <span class="string">&#x27;--harmony&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;--max_old_space_size=4096&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">svc.<span class="title function_">on</span>(<span class="string">&#x27;install&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  svc.<span class="title function_">start</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">svc.<span class="title function_">on</span>(<span class="string">&#x27;uninstall&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Uninstall complete.&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The service exists: &#x27;</span>, svc.<span class="property">exists</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">svc.<span class="title function_">on</span>(<span class="string">&#x27;error &#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">svc.<span class="title function_">install</span>();</span><br></pre></td></tr></table></figure><p>该Service对象发出以下事件：</p><ul><li><code>install</code> - 当脚本作为服务安装时触发。</li><li><code>alreadyinstalled</code> - 如果脚本已知是服务则触发。</li><li><code>invalidinstallation</code> - 如果检测到安装但缺少所需文件则触发。</li><li><code>uninstall</code> - 卸载完成时触发。</li><li><code>alreadyuninstalled</code> - 请求卸载但不存在安装时触发。</li><li><code>start</code> - 新服务启动时触发。</li><li><code>stop</code> - 服务停止时触发。</li><li><code>error</code> - 在某些情况下发生错误时触发。</li></ul><h2 id="管理服务"><a href="#管理服务" class="headerlink" title="管理服务"></a>管理服务</h2><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc.exe create qqian binpath=&#x27;./deamon/myservice.exe&#x27;  <span class="built_in">start</span>=auto</span><br><span class="line">[SC] CreateService 成功</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.exe delete &quot;myservice.exe&quot;</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> myservice</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> stop myservice</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装axios网络请求</title>
      <link href="/article/%E5%B0%81%E8%A3%85axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
      <url>/article/%E5%B0%81%E8%A3%85axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一次Vue中使用axios进行网络请求。起初封装很简单，只包含<code>get</code>和<code>post</code>两种请求接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">            <span class="attr">params</span>: params</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * post方法，对应post请求 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址] </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数] </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">post</span>(url, <span class="variable constant_">QS</span>.<span class="title function_">stringify</span>(params))</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get, post &#125; <span class="keyword">from</span> <span class="string">&#x27;./http/http&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://localhost:10119/idiom/queryStoryByWord?word=%E6%9C%9D%E4%B8%89%E6%9A%AE%E5%9B%9B&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后经过一次更新升级：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span> </span><br><span class="line"><span class="comment">//axios响应头，直接copy官方文档</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"><span class="comment">//axios接口地址 本地就是localhost,使用时替换成后端的地址就行了</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;//localhost:10119&#x27;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//声明一个function request 用于封装axios，他接受一个url，type和data</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, type = <span class="string">&#x27;GET&#x27;</span>, data = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">      url,</span><br><span class="line">      <span class="attr">method</span>: type,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//tolowercase转换成小写===get的话</span></span><br><span class="line">    <span class="keyword">if</span>(type.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//`params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">      option.<span class="property">params</span> = data</span><br><span class="line">      <span class="comment">//否则的话就等于自己输入的data</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      option.<span class="property">data</span> = data</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果有token</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="property">token</span>) &#123;</span><br><span class="line">      axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>]  = <span class="variable language_">localStorage</span>.<span class="property">token</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">axios</span>(option).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(res.data);</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//如果res.data.status的状态为ok且本地的token和res.data.token一样那么就resolve</span></span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">status</span>===<span class="number">200</span> &amp;&amp; res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">token</span>) &#123;</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="property">token</span> = res.<span class="property">data</span>.<span class="property">token</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        <span class="comment">//否则的话就message错误然后reject</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//捕获异常，如果什么都不是那就网络异常</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;网络异常:&#x27;</span>+err &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//使用方式  </span></span><br><span class="line"><span class="comment">// request(&#x27;/auth/login&#x27;, &#x27;POST&#x27;, &#123;username: &#x27;hunger&#x27;, password: &#x27;123456&#x27;&#125;)</span></span><br><span class="line"><span class="comment">//   .then(data=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(data) </span></span><br><span class="line"><span class="comment">//   &#125;) </span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.js</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;./request.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接声明一个URL存储接口地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL</span> = &#123;</span><br><span class="line">    <span class="attr">GET_IDIOM_BY_ID</span>: <span class="string">&#x27;/idiom/queryById&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">queryById</span>(<span class="params">&#123; id &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">request</span>(<span class="variable constant_">URL</span>.<span class="property">GET_IDIOM_BY_ID</span>, <span class="string">&#x27;GET&#x27;</span>, &#123; id &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;./http/api.js&#x27;</span></span><br><span class="line"></span><br><span class="line">api.<span class="title function_">queryById</span>(&#123;<span class="attr">id</span>:<span class="number">3506</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样做的好处是后续只需要维护好业务访问接口<code>api.js</code>就好。</p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使mysql生成.db文件</title>
      <link href="/article/%E5%A6%82%E4%BD%95%E4%BD%BFmysql%E7%94%9F%E6%88%90-db%E6%96%87%E4%BB%B6/"/>
      <url>/article/%E5%A6%82%E4%BD%95%E4%BD%BFmysql%E7%94%9F%E6%88%90-db%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-下载sqllite数据库"><a href="#1-下载sqllite数据库" class="headerlink" title="1. 下载sqllite数据库"></a>1. 下载sqllite数据库</h2><p>在本机中安装sqlite数据库。下载地址为（<a href="http://www.sqlite.org/download.html">http://www.sqlite.org/download.html</a>）。windows下载<a href="https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380100.zip">sqlite-tools-win32-x86-3380100.zip</a></p><p>加载完成后解压并添加到环境变量<code>path</code>中，<code>cmd</code>输入<code>sqlite3</code>，会有提示SQLite version等等的提示，表示安装成功；</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 <span class="number">10</span>.<span class="number">0</span>.<span class="number">19043</span>.<span class="number">1586</span>]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>&gt;<span class="title">sqlite3</span></span></span><br><span class="line"><span class="function"><span class="title">SQLite</span> <span class="title">version</span> 3.38.1 2022-03-12 13:37:29</span></span><br><span class="line"><span class="function"><span class="title">Enter</span> &quot;.<span class="title">help</span>&quot; <span class="title">for</span> <span class="title">usage</span> <span class="title">hints</span>.</span></span><br><span class="line"><span class="function"><span class="title">Connected</span> <span class="title">to</span> <span class="title">a</span> <span class="title">transient</span> <span class="title">in</span>-<span class="title">memory</span> <span class="title">database</span>.</span></span><br><span class="line"><span class="function"><span class="title">Use</span> &quot;.<span class="title">open</span> <span class="title">FILENAME</span>&quot; <span class="title">to</span> <span class="title">reopen</span> <span class="title">on</span> <span class="title">a</span> <span class="title">persistent</span> <span class="title">database</span>.</span></span><br><span class="line"><span class="function"><span class="title">sqlite</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-创建准备装载数据的sqlite数据库（xxx-db）"><a href="#2-创建准备装载数据的sqlite数据库（xxx-db）" class="headerlink" title="2. 创建准备装载数据的sqlite数据库（xxx.db）"></a>2. 创建准备装载数据的sqlite数据库（xxx.db）</h2><p>进入指定文件夹，在此文件夹中运行<code>cmd</code>，输入命令<code>sqlite3 chinese-idiom.db</code>回车，然后输入<code>.database</code>，就会自动创建一个数据库（chinese-idiom.db）；</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Administrator</span>\<span class="title">Documents</span>\<span class="title">dumps</span>\<span class="title">Chinese</span>-<span class="title">idiom</span>&gt;<span class="title">sqlite3</span> <span class="title">chinese</span>-<span class="title">idiom.db</span></span></span><br><span class="line"><span class="function"><span class="title">SQLite</span> <span class="title">version</span> 3.38.1 2022-03-12 13:37:29</span></span><br><span class="line"><span class="function"><span class="title">Enter</span> &quot;.<span class="title">help</span>&quot; <span class="title">for</span> <span class="title">usage</span> <span class="title">hints</span>.</span></span><br><span class="line"><span class="function"><span class="title">sqlite</span>&gt; .<span class="title">database</span></span></span><br><span class="line"><span class="function"><span class="title">main</span>: <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Administrator</span>\<span class="title">Documents</span>\<span class="title">dumps</span>\<span class="title">Chinese</span>-<span class="title">idiom</span>\<span class="title">chinese</span>-<span class="title">idiom.db</span> <span class="title">r</span>/<span class="title">w</span></span></span><br><span class="line"><span class="function"><span class="title">sqlite</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-使用navicat连接sqlite数据库"><a href="#3-使用navicat连接sqlite数据库" class="headerlink" title="3. 使用navicat连接sqlite数据库"></a>3. 使用navicat连接sqlite数据库</h2><p>点击<code>连接</code>，选中<code>sqlite</code>，连接名填写<code>chinese-idiom.db</code>，选择‘现有数据库文件’，选中数据库（chinese-idiom.db）的路径，连接测试。</p><h2 id="4-使用navicat把mysql数据传输数据到chinese-idiom-db中"><a href="#4-使用navicat把mysql数据传输数据到chinese-idiom-db中" class="headerlink" title="4. 使用navicat把mysql数据传输数据到chinese-idiom.db中"></a>4. 使用navicat把mysql数据传输数据到chinese-idiom.db中</h2><p>用navicat连接mysql数据库，选中需要转移的数据库，右键选择<code>数据传输</code>。<code>常规</code>选项中的<code>源</code>，就是准备转移的数据源mysql。<code>目标</code>就是sqlite数据库，选中<code>chinese-idiom.db</code>，选中一个数据库（main）,然后点击开始传输。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用java8中Stream轻松遍历树形结构</title>
      <link href="/article/%E4%BD%BF%E7%94%A8java8%E4%B8%ADStream%E8%BD%BB%E6%9D%BE%E9%81%8D%E5%8E%86%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
      <url>/article/%E4%BD%BF%E7%94%A8java8%E4%B8%ADStream%E8%BD%BB%E6%9D%BE%E9%81%8D%E5%8E%86%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前发过一篇<a href="https://sogrey.top/article/json%E8%BD%AC%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/">json转树状结构（收集）</a>以处理id-pid结构形式json数据转为树形结构，多年来再次看到同样问题却有了新的想法。</p><span id="more"></span><p>可能平常会遇到一些需求，比如构建菜单，构建树形结构，数据库一般就使用父id来表示，为了降低数据库的查询压力，我们可以使用Java8中的Stream流一次性把数据查出来，然后通过流式处理.</p><p>先看实体实现类：</p><p>Menu.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.mulMenu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Integer id;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父id ，根节点为0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Integer parentId;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子节点信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Menu&gt; childList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">(Integer id, String name, Integer parentId)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.parentId = parentId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">(Integer id, String name, Integer parentId, List&lt;Menu&gt; childList)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.parentId = parentId;</span><br><span class="line"><span class="built_in">this</span>.childList = childList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getParentId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> parentId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParentId</span><span class="params">(Integer parentId)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.parentId = parentId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">getChildList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> childList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChildList</span><span class="params">(List&lt;Menu&gt; childList)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.childList = childList;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java 8 中的 Stream 递归组装树形结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.mulMenu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulMenu</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">testtree();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testtree</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 模拟从数据库查询出来</span></span><br><span class="line">List&lt;Menu&gt; menus = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">1</span>, <span class="string">&quot;根节点&quot;</span>, <span class="number">0</span>), <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">2</span>, <span class="string">&quot;子节点1&quot;</span>, <span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">3</span>, <span class="string">&quot;子节点1.1&quot;</span>, <span class="number">2</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">4</span>, <span class="string">&quot;子节点1.2&quot;</span>, <span class="number">2</span>), <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">5</span>, <span class="string">&quot;根节点1.3&quot;</span>, <span class="number">2</span>), <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">6</span>, <span class="string">&quot;根节点2&quot;</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">7</span>, <span class="string">&quot;根节点2.1&quot;</span>, <span class="number">6</span>),<span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">8</span>, <span class="string">&quot;根节点2.2&quot;</span>, <span class="number">6</span>), <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">9</span>, <span class="string">&quot;根节点2.2.1&quot;</span>, <span class="number">7</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">10</span>, <span class="string">&quot;根节点2.2.2&quot;</span>, <span class="number">7</span>), <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">11</span>, <span class="string">&quot;根节点3&quot;</span>, <span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="number">12</span>, <span class="string">&quot;根节点3.1&quot;</span>, <span class="number">11</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父节点</span></span><br><span class="line">List&lt;Menu&gt; collect = menus.stream().filter(m -&gt; m.getParentId() == <span class="number">0</span>).map((m) -&gt; &#123;</span><br><span class="line">m.setChildList(getChildrens(m, menus));</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line">System.out.println(JSON.toJSON(collect));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归查询子节点</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> all  所有节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 根节点信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Menu&gt; <span class="title function_">getChildrens</span><span class="params">(Menu root, List&lt;Menu&gt; all)</span> &#123;</span><br><span class="line">List&lt;Menu&gt; children = all.stream().filter(m -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> Objects.equals(m.getParentId(), root.getId());</span><br><span class="line">&#125;).map((m) -&gt; &#123;</span><br><span class="line">m.setChildList(getChildrens(m, all));</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line"><span class="keyword">return</span> children;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根节点&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子节点1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子节点1.1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;子节点1.2&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根节点1.3&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根节点2&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根节点2.1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根节点2.2.1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                                <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span> </span><br><span class="line">                                <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根节点2.2.2&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                                <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> </span><br><span class="line">                                <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根节点2.2&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根节点3&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根节点3.1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;childList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/obki4XsMKf-nZfScWVR6vA">别再写一堆的 for 循环了！Java 8 中的 Stream 轻松遍历树形结构，是真的牛逼！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加油2021，期盼2022</title>
      <link href="/article/2021-2022/"/>
      <url>/article/2021-2022/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><a href="https://sogrey.top/article/2021-2022/">致敬2020，重启2021</a></li><li><a href="https://sogrey.top/article/zj2019-zw2020/">总结2019，展望2020</a></li><li><a href="https://sogrey.top/article/%E5%86%8D%E8%A7%812018%EF%BC%8C%E4%BD%A0%E5%A5%BD2019/">再见2018，你好2019</a></li></ul><hr><p>写这篇总结时，正是西安疫情最紧张的时候，就今天公司所在大厦物业通知将关闭，即日起就要居家办公了，上次居家办公就是新冠疫情刚刚爆发时。现在看着每天新增病例，心情不是一般的沉重,扶好键盘准备写些什么，却也没了主意，就只能简单的总述下吧，多的也没心思写了。只“西”望你我都“安”然无恙，西安加油。</p><span id="more"></span><h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><p>今年年初是的工作重心还在CAD渲染引擎上，逐步实现LOD方式加载，合并渲染着色器参数到texture中去采样。CAD渲染引擎逐步趋于稳定，逐步减慢开发，着重结合客户反馈，修复和优化。年中，重回BIM引擎组，主要的工作重心在引擎上层引用接口和功能的开发，开发了独立插件模块立方导航、剖面框系统、光源等，虽然截止至今，光源模块中的锯齿问题还在，由于底层原因，比较难以解决。</p><p>由于在BIM引擎开发中，已有部分开发力量转向UE4,将来会遇到更多BIM引擎的客户反馈，我相信自己可以做好。</p><p>入公司已多年，见证公司自14年以来发展历程，也发展得越来越好，相信今后会更好。</p><h2 id="个人提升"><a href="#个人提升" class="headerlink" title="个人提升"></a>个人提升</h2><p>虽然今年全年的工作重心都在引擎开发上，不论是CAD引擎（three.js开发）还是BIM引擎（Cesium开发），在三维世界中，遇到很多与旋转矩阵计算相关的内容，这块是我所欠缺的，每次计算旋转矩阵都会很头疼，但是还好，不论是自己摸索还是技穷时请教同事们，最终有圆满解决，在三维空间各矩阵计算能力有所提升，但还不够，有时任然会毫无头绪。</p><h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><p>疫情爆发以来，陆陆续续会有不安的因素，每天出门都习惯口罩，还是希望能早日安心的呼吸。</p><p>一直嘴上说要考的驾考，成功通过科目二，科目三 两次都未通过，看来又要往后拖了。</p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS操作iframe元素</title>
      <link href="/article/JS%E6%93%8D%E4%BD%9Ciframe%E5%85%83%E7%B4%A0/"/>
      <url>/article/JS%E6%93%8D%E4%BD%9Ciframe%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文主要给大家介绍了关于利用JS对iframe父子（内外）页面进行操作的方法.</p><span id="more"></span><h2 id="1-获得iframe的window对象"><a href="#1-获得iframe的window对象" class="headerlink" title="1. 获得iframe的window对象"></a>1. 获得iframe的window对象</h2><p>存在跨域访问限制。</p><ul><li>chrome：iframeElement. contentWindow</li><li>firefox：iframeElement.contentWindow</li><li>ie6：iframeElement.contentWindow</li></ul><p>一些浏览器可以通过iframeElement.contentDocument.parentWindow获得iframe的window对象。但经过测试firefox、chrome的element.contentDocument对象没有parentWindow属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getIframeWindow</span>(<span class="params">element</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>  element.<span class="property">contentWindow</span>;</span><br><span class="line">    <span class="comment">//return  element.contentWindow || element.contentDocument.parentWindow;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-获得iframe的document对象"><a href="#2-获得iframe的document对象" class="headerlink" title="2. 获得iframe的document对象"></a>2. 获得iframe的document对象</h2><p>存在跨域访问限制。</p><ul><li>chrome：iframeElement.contentDocument</li><li>firefox：iframeElement.contentDocument</li><li>ie：element.contentWindow.document</li></ul><blockquote><p>备注：ie没有iframeElement.contentDocument属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getIframeDocument = <span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>  element.<span class="property">contentDocument</span> || element.<span class="property">contentWindow</span>.<span class="property">document</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-iframe中获得父页面的window对象"><a href="#3-iframe中获得父页面的window对象" class="headerlink" title="3. iframe中获得父页面的window对象"></a>3. iframe中获得父页面的window对象</h2><p>存在跨域访问限制。</p><ul><li>父页面：window.parent</li><li>顶层页面：window.top</li></ul><blockquote><p>适用于所有浏览器</p></blockquote><h2 id="4-获得iframe在父页面中的html标签"><a href="#4-获得iframe在父页面中的html标签" class="headerlink" title="4. 获得iframe在父页面中的html标签"></a>4. 获得iframe在父页面中的html标签</h2><p>存在跨域访问限制。</p><p>window.frameElement（类型：HTMLElement）</p><blockquote><p>适用于所有浏览器</p></blockquote><h2 id="5-iframe的onload事件"><a href="#5-iframe的onload事件" class="headerlink" title="5. iframe的onload事件"></a>5. iframe的onload事件</h2><p>非ie浏览器都提供了onload事件。例如下面代码在ie中是不会有弹出框的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ifr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">ifr.<span class="property">src</span> = <span class="string">&#x27;http://www.b.com/index.php&#x27;</span>;</span><br><span class="line">ifr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;loaded&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ifr);</span><br></pre></td></tr></table></figure><p>但是ie却又似乎提供了onload事件，下面两种方法都会触发onload</p><p>方法一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>  <span class="attr">onload</span>=<span class="string">&quot;alert(&#x27;loaded&#x27;);&quot;</span>  <span class="attr">src</span>=<span class="string">&quot;http://www.b.com/index.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有ie才支持为createElement传递这样的参数</span></span><br><span class="line"><span class="keyword">var</span> ifr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;&lt;iframe  onload=&quot;alert(&#x27;</span>loaded<span class="string">&#x27;);&quot; src=&quot;http://www.b.com/index.php&quot;&gt;&lt;/iframe&gt;&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ifr);</span><br></pre></td></tr></table></figure><p>由于iframe元素包含于父级页面中，因此以上方法均不存在跨域问题。</p><p>实际上IE提供了onload事件，但必须使用attachEvent进行绑定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ifr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">ifr.<span class="property">src</span> = <span class="string">&#x27;http://b.a.com/b.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (ifr.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">    ifr.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onload&#x27;</span>,  <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;loaded&#x27;</span>); &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ifr.<span class="property">onload</span>  = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="string">&#x27;loaded&#x27;</span>); &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ifr);</span><br></pre></td></tr></table></figure><h2 id="6-frames"><a href="#6-frames" class="headerlink" title="6. frames"></a>6. frames</h2><p>window.frames可以取到页面中的帧(iframe、frame等)，需要注意的是取到的是window对象，而不是HTMLElement。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ifr1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ifr1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ifr1win = <span class="variable language_">window</span>.<span class="property">frames</span>[<span class="number">0</span>];</span><br><span class="line">ifr1win.<span class="property">frameElement</span> === ifr1;   <span class="comment">// true</span></span><br><span class="line">ifr1win === ifr1;    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/rainman/archive/2011/02/16/1956431.html">JS操作iframe</a></li><li><a href="https://www.cnblogs.com/html55/p/10163631.html">JS操作iframe元素</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux上安装部署nginx</title>
      <link href="/article/Linux%E4%B8%8A%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2nginx/"/>
      <url>/article/Linux%E4%B8%8A%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1 安装依赖包"></a>1 安装依赖包</h2><p>安装Nginx需要依赖下面几个包：</p><ol><li><code>gzip</code> 模块需要 <code>zlib</code> 库 ( 下载: <a href="http://www.zlib.net/">http://www.zlib.net/</a> )</li><li><code>rewrite</code> 模块需要 <code>pcre</code> 库 ( 下载: <a href="http://www.pcre.org/">http://www.pcre.org/</a> )</li><li><code>ssl</code> 功能需要 <code>openssl</code> 库 ( 下载: <a href="http://www.openssl.org/">http://www.openssl.org/</a> )</li></ol><p>依赖包安装顺序依次为:openssl、zlib、pcre, 然后安装Nginx包</p><p>在线安装执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h2 id="2-下载Nginx并解压安装包"><a href="#2-下载Nginx并解压安装包" class="headerlink" title="2 下载Nginx并解压安装包"></a>2 下载Nginx并解压安装包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local </span><br><span class="line"><span class="built_in">mkdir</span> nginx <span class="comment"># 创建一个文件夹</span></span><br><span class="line"><span class="built_in">cd</span> nginx</span><br><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz <span class="comment"># 下载tar包</span></span><br><span class="line">tar -xvf nginx-1.13.7.tar.gz <span class="comment"># 解压</span></span><br></pre></td></tr></table></figure><h2 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3 安装nginx"></a>3 安装nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx <span class="comment"># 进入nginx目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.13.7</span><br><span class="line">./configure <span class="comment"># 执行命令</span></span><br><span class="line">make <span class="comment"># 执行make命令</span></span><br><span class="line">make install <span class="comment"># 执行make install命令</span></span><br></pre></td></tr></table></figure><h2 id="4-配置nginx-conf"><a href="#4-配置nginx-conf" class="headerlink" title="4 配置nginx.conf"></a>4 配置nginx.conf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/nginx.conf <span class="comment"># 打开配置文件</span></span><br></pre></td></tr></table></figure><p>// TODO</p><h2 id="5-启动nginx"><a href="#5-启动nginx" class="headerlink" title="5 启动nginx"></a>5 启动nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>查看nginx进程是否启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><h2 id="6-访问服务器ip查看"><a href="#6-访问服务器ip查看" class="headerlink" title="6 访问服务器ip查看"></a>6 访问服务器ip查看</h2><h2 id="7-一般常用命令"><a href="#7-一般常用命令" class="headerlink" title="7 一般常用命令"></a>7 一般常用命令</h2><p>进入安装目录中，命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure><p>启动，关闭，重启，命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nginx           <span class="comment"># 启动</span></span><br><span class="line">./nginx -s stop   <span class="comment"># 关闭</span></span><br><span class="line">./nginx -s reload <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><h2 id="常见异常处理"><a href="#常见异常处理" class="headerlink" title="常见异常处理"></a>常见异常处理</h2><h3 id="1-nginx-error-open-＂-usr-local-nginx-logs-nginx-pid＂-failed"><a href="#1-nginx-error-open-＂-usr-local-nginx-logs-nginx-pid＂-failed" class="headerlink" title="1. nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed"></a>1. nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed</h3><p>如果出现报错：<code>nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed</code></p><p>则运行： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>重新启动即可！</p><h3 id="2-外部主机访问虚拟机连接异常"><a href="#2-外部主机访问虚拟机连接异常" class="headerlink" title="2. 外部主机访问虚拟机连接异常"></a>2. 外部主机访问虚拟机连接异常</h3><p>若想使用外部主机连接上虚拟机访问端口192.168.131.2，需要关闭虚拟机的防火墙：</p><p>centOS6及以前版本使用命令： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop iptables.service</span><br></pre></td></tr></table></figure><p>centOS7关闭防火墙命令： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>随后访问该ip即可看到nginx界面。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/t8116189520/article/details/81909574">LINUX安装nginx详细步骤</a></li><li><a href="https://blog.csdn.net/grhlove123/article/details/47834673">Linux 安装Nginx详细图解教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 之设置URL汇总</title>
      <link href="/article/Windows%2010%20%E4%B9%8B%E8%AE%BE%E7%BD%AEURL%E6%B1%87%E6%80%BB/"/>
      <url>/article/Windows%2010%20%E4%B9%8B%E8%AE%BE%E7%BD%AEURL%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Win10系统中系统设置其实也是一个Modern应用，它与ms-settings:协议进行了关联，在设置应用中的每一个具体的设置页面都有一个URI（统一资源标识符）与之对应，通过这些URI就可以直达某个具体的设置页面。</p><h2 id="如何使用这些URI"><a href="#如何使用这些URI" class="headerlink" title="如何使用这些URI"></a>如何使用这些URI</h2><ol><li>可以按Win+R打开运行，直接将URI粘贴到运行输入框回车即可；</li><li>可以新建快捷方式，将URI作为对象位置键入；</li><li>HTML a标签href；</li></ol><h2 id="分类设置页面URI"><a href="#分类设置页面URI" class="headerlink" title="分类设置页面URI"></a>分类设置页面URI</h2><table><thead><tr><th>设置页面</th><th>URL</th><th>a标签示例</th></tr></thead><tbody><tr><td>设置页</td><td><code>ms-settings:</code></td><td><a class="a-win" href="ms-settings:">设置页</a></td></tr><tr><td>系统显示</td><td><code>ms-settings:display</code> <code>ms-settings:screenrotation</code></td><td><a class="a-win" href="ms-settings:display">系统显示</a></td></tr><tr><td>通知</td><td><code>ms-settings:notifications</code></td><td><a class="a-win" href="ms-settings:notifications">通知</a></td></tr><tr><td>存储</td><td><code>ms-settings:storagesense</code></td><td><a class="a-win" href="ms-settings:storagesense">存储</a></td></tr><tr><td>节电模式</td><td><code>ms-settings:batterysaver</code></td><td><a class="a-win" href="ms-settings:batterysaver">节电模式</a></td></tr><tr><td>节电模式—设置</td><td><code>ms-settings:batterysaver-settings</code></td><td><a class="a-win" href="ms-settings:batterysaver-settings">节电模式—设置</a></td></tr><tr><td>电池使用情况</td><td><code>ms-settings:batterysaver-usagedetails</code></td><td><a class="a-win" href="ms-settings:batterysaver-usagedetails">电池使用情况</a></td></tr><tr><td>脱机地图</td><td><code>ms-settings:maps</code></td><td><a class="a-win" href="ms-settings:maps">脱机地图</a></td></tr><tr><td>设备蓝牙</td><td><code>ms-settings:bluetooth</code></td><td><a class="a-win" href="ms-settings:bluetooth">设备蓝牙</a></td></tr><tr><td>已连接设备</td><td><code>ms-settings:connecteddevices</code></td><td><a class="a-win" href="ms-settings:connecteddevices">已连接设备</a></td></tr><tr><td>鼠标和触摸版</td><td><code>ms-settings:mousetouchpad</code></td><td><a class="a-win" href="ms-settings:mousetouchpad">鼠标和触摸版</a></td></tr><tr><td>电源和睡眠</td><td><code>ms-settings:powersleep</code></td><td><a class="a-win" href="ms-settings:powersleep">电源和睡眠</a></td></tr><tr><td>飞行模式</td><td><code>ms-settings:network-airplanemode</code></td><td><a class="a-win" href="ms-settings:network-airplanemode">飞行模式</a></td></tr><tr><td>拨号网络</td><td><code>ms-settings:network-dialup</code></td><td><a class="a-win" href="ms-settings:network-dialup">拨号网络</a></td></tr><tr><td>以太网</td><td><code>ms-settings:network-ethernet</code></td><td><a class="a-win" href="ms-settings:network-ethernet">以太网</a></td></tr><tr><td>VPN</td><td><code>ms-settings:network-vpn</code></td><td><a class="a-win" href="ms-settings:network-vpn">VPN</a></td></tr><tr><td>代理</td><td><code>ms-settings:network-proxy</code></td><td><a class="a-win" href="ms-settings:network-proxy">代理</a></td></tr><tr><td>数据使用量</td><td><code>ms-settings:datausage</code></td><td><a class="a-win" href="ms-settings:datausage">数据使用量</a></td></tr><tr><td>Wi-Fi</td><td><code>ms-settings:network-wifi</code></td><td><a class="a-win" href="ms-settings:network-wifi">Wi-Fi</a></td></tr><tr><td>Mobile Hotspot</td><td><code>ms-settings:network-mobilehotspot</code></td><td><a class="a-win" href="ms-settings:network-mobilehotspot">Mobile Hotspot </a></td></tr><tr><td>开始</td><td><code>ms-settings:personalization-start</code></td><td><a class="a-win" href="ms-settings:personalization-start">开始</a></td></tr><tr><td>个性化锁屏</td><td><code>ms-settings:lockscreen</code></td><td><a class="a-win" href="ms-settings:lockscreen">个性化锁屏</a></td></tr><tr><td>个性化</td><td><code>ms-settings:personalization</code></td><td><a class="a-win" href="ms-settings:personalization">个性化</a></td></tr><tr><td>你的账户</td><td><code>ms-settings:emailandaccounts</code></td><td><a class="a-win" href="ms-settings:emailandaccounts">你的账户</a></td></tr><tr><td>工作单位访问</td><td><code>ms-settings:workplace</code></td><td><a class="a-win" href="ms-settings:workplace">工作单位访问</a></td></tr><tr><td>日期和时间</td><td><code>ms-settings:dateandtime</code></td><td><a class="a-win" href="ms-settings:dateandtime">日期和时间</a></td></tr><tr><td>区域和语言</td><td><code>ms-settings:regionlanguage</code></td><td><a class="a-win" href="ms-settings:regionlanguage">区域和语言</a></td></tr><tr><td>语音</td><td><code>ms-settings:speech</code></td><td><a class="a-win" href="ms-settings:speech">语音</a></td></tr><tr><td>隐私日历</td><td><code>ms-settings:privacy-calendar</code></td><td><a class="a-win" href="ms-settings:privacy-calendar">隐私日历</a></td></tr><tr><td>联系人</td><td><code>ms-settings:privacy-contacts</code></td><td><a class="a-win" href="ms-settings:privacy-contacts">联系人</a></td></tr><tr><td>反馈和诊断</td><td><code>ms-settings:privacy-feedback</code></td><td><a class="a-win" href="ms-settings:privacy-feedback">反馈和诊断</a></td></tr><tr><td>位置</td><td><code>ms-settings:privacy-location</code></td><td><a class="a-win" href="ms-settings:privacy-location">位置</a></td></tr><tr><td>消息传送</td><td><code>ms-settings:privacy-messaging</code></td><td><a class="a-win" href="ms-settings:privacy-messaging">消息传送</a></td></tr><tr><td>麦克风</td><td><code>ms-settings:privacy-microphone</code></td><td><a class="a-win" href="ms-settings:privacy-microphone">麦克风</a></td></tr><tr><td>其他设备</td><td><code>ms-settings:privacy-customdevices</code></td><td><a class="a-win" href="ms-settings:privacy-customdevices">其他设备</a></td></tr><tr><td>无线电收发器</td><td><code>ms-settings:privacy-radios</code></td><td><a class="a-win" href="ms-settings:privacy-radios">无线电收发器</a></td></tr><tr><td>语音、默迹书写和键入</td><td><code>ms-settings:privacy-speechtyping</code></td><td><a class="a-win" href="ms-settings:privacy-speechtyping">语音、默迹书写和键入</a></td></tr><tr><td>相机</td><td><code>ms-settings:privacy-webcam</code></td><td><a class="a-win" href="ms-settings:privacy-webcam">相机</a></td></tr><tr><td>隐藏式字幕</td><td><code>ms-settings:easeofaccess-closedcaptioning</code></td><td><a class="a-win" href="ms-settings:easeofaccess-closedcaptioning">隐藏式字幕</a></td></tr><tr><td>高对比度</td><td><code>ms-settings:easeofaccess-highcontrast</code></td><td><a class="a-win" href="ms-settings:easeofaccess-highcontrast">高对比度</a></td></tr><tr><td>放大镜</td><td><code>ms-settings:easeofaccess-magnifier</code></td><td><a class="a-win" href="ms-settings:easeofaccess-magnifier">放大镜</a></td></tr><tr><td>讲述人</td><td><code>ms-settings:easeofaccess-narrator</code></td><td><a class="a-win" href="ms-settings:easeofaccess-narrator">讲述人</a></td></tr><tr><td>键盘</td><td><code>ms-settings:easeofaccess-keyboard</code></td><td><a class="a-win" href="ms-settings:easeofaccess-keyboard">键盘</a></td></tr><tr><td>鼠标</td><td><code>ms-settings:easeofaccess-mouse</code></td><td><a class="a-win" href="ms-settings:easeofaccess-mouse">鼠标</a></td></tr><tr><td>其他选项</td><td><code>ms-settings:easeofaccess-otheroptions</code></td><td><a class="a-win" href="ms-settings:easeofaccess-otheroptions">其他选项</a></td></tr></tbody></table><style>a.a-win{color: #fff;    background: #fe7300;padding: 6px 20px;    font-weight: 500;    line-height: 24px;    font-size: 18px;    margin: 5px auto;    border-radius: 2px;-webkit-box-shadow: 0px 0em 0px 0px rgb(39 41 43 / 15%) inset;    box-shadow: 0px 0em 0px 0px rgb(39 41 43 / 15%) inset;text-shadow: none;cursor: pointer;    display: inline-block;    min-height: 1em;    outline: none;    border: none;    vertical-align: baseline;}</style>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenEuler安装UKUI</title>
      <link href="/article/OpenEuler%E5%AE%89%E8%A3%85UKUI/"/>
      <url>/article/OpenEuler%E5%AE%89%E8%A3%85UKUI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>9 月 23 日-25 日，华为全联接 2021 在线上举办。近日，华为在全联接大会上发布了全新操作系统“openEuler 欧拉”。openEuler 是一个开源、免费的 Linux 发行版平台，将通过开放的社区形式与全球的开发者共同构建软件生态体系。同时，openEuler 也是一个创新的平台，鼓励任何人在该平台上提出新想法、开拓新思路、实践新方案。</p><span id="more"></span><ul><li><a href="https://openeuler.org/">openEuler官网</a> <a href="https://openeuler.org/">https://openeuler.org/</a></li></ul><p>下载地址：<a href="https://openeuler.org/zh/mirror/list/">https://openeuler.org/zh/mirror/list/</a></p><p>怀着对国产操作系统的支持，下载安装来体验一把。</p><p>安装过程其实也并不复杂，这里一笔带过。安装完成后重启看到下面界面：</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FopenEuler-01.png"></p><p>登入root账户:</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FopenEuler-02.png"></p><p>对于熟悉linux系统的资深linuxer,到这已经够用了。但对于我，命令行显然并不友好，下面安装GUI，GUI选择华为为OpenEuler研发的<a href="https://www.ukui.org/index.php?lang=cn">UKUI</a>。</p><p><a href="https://www.ukui.org/index.php?lang=cn">UKUI官网</a>有文<a href="https://www.ukui.org/news/shownews.php?id=96&lang=cn">UKUI for openEuler 发布！</a>,文末记录了如何安装UKUI。</p><p>开始安装UKUI,可直接使用<code>yum install</code>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ukui</span><br></pre></td></tr></table></figure><p>期间需要输入几次<code>y</code>已确认安装。</p><p>安装字体库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall fonts -y</span><br></pre></td></tr></table></figure><p>确认以上安装完成后，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default graphical.target</span><br></pre></td></tr></table></figure><p>重启(<code>reboot</code>)之后即可启动图形界面。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FopenEuler-03.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FopenEuler-04.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> OpenEuler </tag>
            
            <tag> UKUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下修改vscode默认终端为git bash</title>
      <link href="/article/windows%E4%B8%8B%E4%BF%AE%E6%94%B9vscode%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E4%B8%BAgit-bash/"/>
      <url>/article/windows%E4%B8%8B%E4%BF%AE%E6%94%B9vscode%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E4%B8%BAgit-bash/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近我的Windows 10系统提示需要更新，而且是到了最后时间，将来将不会再为我推送更新提醒，我一般不愿意更新系统，浪费时间还老是出问题，这次看来非更新不可了，这或许又是微软的套路吧。</p><p>果然更新后，微软无耻的把自己的<code>Powershell</code>推上了舞台，这个工具好不好用不知道，我一般就用<code>CMD</code>和<code>Git Bash</code>,使用<code>Git Bash</code>会更多一些。</p><p>目前我做前端多一些，VSCode则是必不可少的编辑器了。自从系统更新后，VSCode终端就默认使用<code>Powershell</code>（如下图）,这让我一些<code>Bash</code>脚本无法执行，今天就来修改VSCode默认终端为<code>Git Bash</code>。</p><span id="more"></span><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fvscode-git-bash-01.png"></p><p>点击VSCode左下角的齿轮，展开点击[设置]</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fvscode-git-bash-02.png"></p><p>搜索关键词<code>shell</code>,选择<code>终端</code> &gt; <code>Terminal › Integrated › Automation Shell: Windows</code> &gt; <code>在 settings.json 中编辑</code></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fvscode-git-bash-03.png"></p><p>我之前配置的是下面这个，已经不能用了（具体可参考 <a href="https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration">Integrated Terminal</a>）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\Git\\bin\\bash.exe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>将以下内容加到配置文件大括弧内：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;PowerShell -NoProfile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PowerShell&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-NoProfile&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Git-Bash&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\Git\\bin\\bash.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Git-Bash&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>我的 <code>Git bash</code> 安装在C盘就写C盘路径。</p><p>关闭配置，回到终端，点击下拉箭头，可以看到很多可选终端，并且<code>Git bash</code>设为默认，新建一个终端默认使用<code>Git Bash</code>。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fvscode-git-bash-04.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fvscode-git-bash-05.png"></p><p>终于我的<code>Bash</code>脚本又飞起来了。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fvscode-git-bash-06.png"></p>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Git </tag>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转Windows子系统Linux之安装Kali Linux</title>
      <link href="/article/%E7%8E%A9%E8%BD%ACWindows%E5%AD%90%E7%B3%BB%E7%BB%9FLinux%E4%B9%8B%E5%AE%89%E8%A3%85Kali-Linux/"/>
      <url>/article/%E7%8E%A9%E8%BD%ACWindows%E5%AD%90%E7%B3%BB%E7%BB%9FLinux%E4%B9%8B%E5%AE%89%E8%A3%85Kali-Linux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>准备工作可阅读前一篇<a href="http://sogrey.top/article/%E7%8E%A9%E8%BD%ACWindows%E5%AD%90%E7%B3%BB%E7%BB%9FLinux%E4%B9%8B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/">玩转Windows子系统Linux之准备工作</a></p><h2 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h2><ul><li>主系统 ： Windows 10 专业版64位 [需要开启：开发者模式和Windows功能（适用于Linux的Windows子系统）]</li><li>子系统 ： Kali Linux</li></ul><span id="more"></span><h2 id="安装Kali-Linux子系统"><a href="#安装Kali-Linux子系统" class="headerlink" title="安装Kali Linux子系统"></a>安装Kali Linux子系统</h2><p>准备工作完成后，在 Windows 10 的软件商店中搜索<code>WSL</code>找到<code>Kali Linux</code>,点击 “获取” 之后系统会自动下载安装, 安装完成后会出现”启动”按钮。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl06.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl07.png"></p><p>点击“启动”，第一次正常启动子系统时会开始安装，安装完成之后会要求设置系统用户名和用户密码，用户名最好用小写英文，密码不要忘记，后面要用到。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl08.png"></p><p>至此, 子系统就安装完成了。类似的步骤也可以安装其他Linux，比如 Ubuntu Linux 。</p><h2 id="Win10子系统kali-linux安装图形化界面"><a href="#Win10子系统kali-linux安装图形化界面" class="headerlink" title="Win10子系统kali linux安装图形化界面"></a>Win10子系统kali linux安装图形化界面</h2><p>按<code>Ctrl+D</code>退出登录，并打开Windows命令行（<code>WIN+R</code> 输入<code>CMD</code>）输入如下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kali config --default-user root</span><br><span class="line"></span><br><span class="line">net stop LxssManager</span><br><span class="line">net start LxssManager</span><br></pre></td></tr></table></figure><p>从<code>开始</code>找到刚安装的<code>Kali Linux</code>打开就默认位<code>root</code>用户了。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl09.png"></p><p>修改密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀DESKTOP-10KKBKG)-[~]</span><br><span class="line">└─<span class="comment"># passwd root</span></span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl10.png"></p><h3 id="换中科大Kali源"><a href="#换中科大Kali源" class="headerlink" title="换中科大Kali源"></a>换中科大Kali源</h3><p>习惯的先备份原文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀DESKTOP-10KKBKG)-[~]</span><br><span class="line">└─<span class="comment"># mv /etc/apt/sources.list /etc/apt/sources.list.bak</span></span><br></pre></td></tr></table></figure><p>创建新的<code>/etc/apt/sources.list</code>输入以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl11.png"></p><p>输入完以上内容 按<code>Ctrl+X</code> 退出，提示是否保存 ，按键<code>Y</code>确认保存。</p><p>执行以下命令update一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀DESKTOP-10KKBKG)-[~]</span><br><span class="line">└─<span class="comment"># apt-get update</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl12.png"></p><h3 id="安装图形界面"><a href="#安装图形界面" class="headerlink" title="安装图形界面"></a>安装图形界面</h3><p>依次执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀DESKTOP-10KKBKG)-[~]</span><br><span class="line">└─<span class="comment"># apt-get install kali-desktop-xfce</span></span><br></pre></td></tr></table></figure><p>需要输入<code>Y(es)</code>,一会儿出现下面界面，选择第一项就好，按<code>↑↓</code>键移动到第一项点击空格选中，点击<code>Tab</code>键切换到<code>OK</code>按钮回车确认。后面就是漫长等待…</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl13.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀DESKTOP-10KKBKG)-[~]</span><br><span class="line">└─<span class="comment"># apt-get install xorg</span></span><br><span class="line"></span><br><span class="line">┌──(root💀DESKTOP-10KKBKG)-[~]</span><br><span class="line">└─<span class="comment"># apt-get install xfce4</span></span><br><span class="line"></span><br><span class="line">┌──(root💀DESKTOP-10KKBKG)-[~]</span><br><span class="line">└─<span class="comment"># apt-get install xrdp</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/port=3389/port=3390/g&#x27;</span> /etc/xrdp/xrdp.ini</span><br><span class="line">sudo <span class="built_in">echo</span> xfce4-session &gt; ~/.xsession</span><br><span class="line">sudo service xrdp restart</span><br></pre></td></tr></table></figure><p>接着<code>win+R</code>打开运行栏，输入<code>cmd</code>，输入命令<code>ipconfig</code>查看自己<code>ip</code>。注意你用的网线就是以太网适配器ipv4，用的无线就是无线局域网适配器WLAN下的ipv4。</p><p>再次<code>win+R</code>打开运行栏，输入<code>mstsc</code>，打开远程桌面，输入自己的ip地址<code>xxx.xxx.xxx.xxx:3390</code>，点击连接，打开远程连接对话框。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl14.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl15.png"></p><p>输入上面第一步时添加的用户和密码登录，或者后面我们修改过密码的root用户登录。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl16.png"></p><p>进入到kali的图形化界面。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转Windows子系统Linux之准备工作</title>
      <link href="/article/%E7%8E%A9%E8%BD%ACWindows%E5%AD%90%E7%B3%BB%E7%BB%9FLinux%E4%B9%8B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
      <url>/article/%E7%8E%A9%E8%BD%ACWindows%E5%AD%90%E7%B3%BB%E7%BB%9FLinux%E4%B9%8B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>WSL 全称为 Windows Subsystem for Linux (Windows 下的 Linux 子系统)。是一个在Windows 10上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。 Windows 下的 Linux 子系统并不包含 Linux 内核, 所以这严格上讲并不是一个真正的 Linux 系统。</p><span id="more"></span><h2 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h2><ul><li>Windows 10 专业版64位</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><code>开始</code> &gt; <code>设置</code> &gt; <code>应用</code><br><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl01.png"></p><p>点击 <code>程序和功能</code> 打开 程序和功能窗口。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl02.png"></p><p>点击 <code>启用或关闭Windows功能</code> 选中 <code>适用于Linux的Windows子系统</code>，点击确定，等待安装完成。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl03.png"></p><p>安装完成后需要重启计算机。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl04.png"></p><p>完成上面一系列操作，准备工作就做完了，现在去Windows10软件商店搜索<code>WSL</code>即可找到Linux。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fwsl05.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SSH连接到GitHub</title>
      <link href="/article/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5%E5%88%B0GitHub/"/>
      <url>/article/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5%E5%88%B0GitHub/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>据悉，GitHub防黑客新措施：弃用账密验证Git操作，改用token或SSH密钥，8月14号0点（8月13日9:00 PST）开始，在GitHub上执行Git操作就会导致失败。</p><p>GitHub官方表示，这一举措是为了提高Git操作的安全性，防止密码撞库等事情发生。</p><p>现在，GitHub开始强制用户采用token或SSH密钥进行身份验证。相比于账密，这两者的安全性显然更高：</p><ul><li>唯一性：仅限GitHub使用，根据设备/使用次数生成</li><li>可撤销性：可随时被单独撤销，其他凭证不受影响</li><li>区域性：使用范围可控，只允许在部分访问活动中执行</li><li>随机性：不受撞库影响，比账密复杂度更高</li></ul><p>虽然目前GitHub官方推荐的是token，因为它设置更为简单，不过相比之下，SSH密钥的安全性要更高一些。</p><span id="more"></span><h2 id="本地生成新的-SSH-密钥"><a href="#本地生成新的-SSH-密钥" class="headerlink" title="本地生成新的 SSH 密钥"></a>本地生成新的 SSH 密钥</h2><h3 id="设置git的user-name和email"><a href="#设置git的user-name和email" class="headerlink" title="设置git的user name和email"></a>设置git的user name和email</h3><p>如果你是第一次使用，或者还没有配置过的话需要操作一下命令，自行替换相应字段:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;&lt;Your Name&gt;&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;&lt;Your Email&gt;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips:</p><p><code>git config --list</code> 查看当前Git环境所有配置，还可以配置一些命令别名之类的。</p></blockquote><h3 id="检查是否存在SSH-Key"><a href="#检查是否存在SSH-Key" class="headerlink" title="检查是否存在SSH Key"></a>检查是否存在SSH Key</h3><p>打开Git Bash,输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al ~/.ssh</span><br></pre></td></tr></table></figure><p>来查看是否有ssh key存在。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FChecking%20for%20existing%20SSH%20keys.png"></p><p>如图，提示不存在，下面准备生成新的SSH。</p><h3 id="生成一个新的SSH-key并添加到ssh-agent"><a href="#生成一个新的SSH-key并添加到ssh-agent" class="headerlink" title="生成一个新的SSH key并添加到ssh-agent"></a>生成一个新的SSH key并添加到ssh-agent</h3><p>打开Git Bash,输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>如果您使用的是不支持 Ed25519 算法的旧系统，请使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></blockquote><p>生成一个新的ssh key，使用填入的邮箱地址作为ssh key的标签，并生成RSA密钥对。</p><p>看到如下提示时按下回车，表示把ssh key放在默认地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/Administrator/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>然后为ssh key设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FGenerating%20a%20new%20SSH%20key%20and%20adding%20it%20to%20the%20ssh-agent.png"></p><p>创建完ssh key后，你需要把它添加到ssh-agent中去。</p><p>首先保证ssh-agent启用了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>该指令返回进程id则表示已经启用ssh-agent</p><p>使用如下指令把ssh key添加到ssh-agent中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fadding%20ssh%20to%20the%20ssh-agent.png"></p><h3 id="为你的github账号添加SSH-key"><a href="#为你的github账号添加SSH-key" class="headerlink" title="为你的github账号添加SSH key"></a>为你的github账号添加SSH key</h3><p>在把ssh key添加到ssh-agent后，你需要把ssh key添加到你的github账号中。</p><p>打开Git Bash，使用指令把ssh key复制到剪贴板：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>登录Github,依次点击<code>Settings</code> &gt; <code>SSH and GPG keys</code> &gt; <code>New SSH key</code>,在<code>Key</code>一栏输入刚刚复制的ssh key, Title一栏随便填写：</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FAdding%20a%20new%20SSH%20key%20to%20your%20GitHub%20account.png"></p><p>填写完成点击<code>Add SSH key</code>后需要输入github密码验证即可。</p><h3 id="测试你的SSH连接"><a href="#测试你的SSH连接" class="headerlink" title="测试你的SSH连接"></a>测试你的SSH连接</h3><p>操作完以上一系列操作，是时候测试下刚配置的SSH是否成功。</p><p>打开Git Bash，输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>尝试去用ssh连接github，看到一些警告信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;github.com (140.82.113.3)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure><p>只管输入<code>yes</code>就好。你将会看到如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi Sogrey! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FTesting%20your%20SSH%20connection.png"></p><p>则表示ssh连接成功了。如果收到<code>access denied</code>,可参考<a href="https://help.github.com/articles/error-permission-denied-publickey/">这里</a>。</p><h3 id="改变远程仓库的URL"><a href="#改变远程仓库的URL" class="headerlink" title="改变远程仓库的URL"></a>改变远程仓库的URL</h3><p>SSH配置完成后，需要把远程仓库URL由HTTPS改为SSH。</p><p>打开Git Bash，转到工作目录下，先查看远程仓库地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>更改远程仓库的url:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git</span><br></pre></td></tr></table></figure><p>origin为仓库名，后面接的是ssh仓库地址。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FChanging%20a%20remote's%20URL.png"></p><p>到此Github的SSH key配置大功告成。</p><h2 id="为TortoiseGit添加SSH"><a href="#为TortoiseGit添加SSH" class="headerlink" title="为TortoiseGit添加SSH"></a>为TortoiseGit添加SSH</h2><p>我比较喜欢使用可视化工具，TortoiseGit就是其中之一，Github这次强制用户采用token或SSH密钥进行身份验证也影响到了TortoiseGit的使用，下面进行TortoiseGit的SSH配置。</p><p>找到TortoiseGit自带的PuTTYgen工具，打开后点击Generate(<strong>生成的过程中记得移动鼠标</strong>)</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FCreate%20SSH%20key%20by%20PuTTY%20Key%20Generator.png"></p><p>PuTTYgen工具窗口先不要关闭，将框中显示的公钥复制下来依照<a href="#%E4%B8%BA%E4%BD%A0%E7%9A%84github%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0SSH-key">之前提到的</a>添加到github的ssh。</p><p>点击PuTTYgen工具窗口<code>Save private key</code>保存一个<code>.ppk</code>文件，适当命名找个目录存档。</p><p>找到TortoiseGit自带的<code>Pageant Key List</code>工具,点击<code>Add Key</code>添加刚刚保存的<code>.ppk</code>文件即可。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FAdd%20ppk%20file%20into%20Pageant%20Key%20List.png"></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="1-git报错ssh-connect-to-host-github-com-port-22-Connection-timed-out"><a href="#1-git报错ssh-connect-to-host-github-com-port-22-Connection-timed-out" class="headerlink" title="1. git报错ssh: connect to host github.com port 22: Connection timed out"></a>1. git报错ssh: connect to host github.com port 22: Connection timed out</h3><p>参考<a href="https://blog.csdn.net/nightwishh/article/details/99647545">这里</a>成功解决</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh">使用SSH 连接到 GitHub - GitHub Docs</a></li><li><a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">Creating a personal access token - GitHub Docs</a></li><li><a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generating a new SSH key and adding it to the ssh-agent - GitHub Docs</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装与卸载JDK</title>
      <link href="/article/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BDJDK/"/>
      <url>/article/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BDJDK/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Linux上安装JDK,动手记录不迷路。</p><span id="more"></span><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>网络畅通时可选择在线安装，简单方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install default-jre</span><br><span class="line">sudo apt-get install default-jdk</span><br></pre></td></tr></table></figure><p>以上是默认的安装版本。如果想安装特定的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-7-jre</span><br><span class="line">sudo apt-get install openjdk-7-jdk</span><br></pre></td></tr></table></figure><p>离线安装。</p><p>下载jdk压缩包， 创建一个目录来存放jdk,并解压tar ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /usr/lib/jvm</span><br><span class="line">sudo tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></table></figure><p>解压后可删除压缩包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf jdk-7u79-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>修改环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>文件末尾追加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set oracle jdk environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk1.8.0_181  <span class="comment">## 这里要注意目录要换成自己解压的jdk 目录</span></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre  </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span>  </span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>设置默认jdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_181/bin/java 300  </span><br><span class="line">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_181/bin/javac 300  </span><br><span class="line">sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.8.0_181/bin/jar 300   </span><br><span class="line">sudo update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.8.0_181/bin/javah 300   </span><br><span class="line">sudo update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.8.0_181/bin/javap 300 </span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><h2 id="卸载JDK"><a href="#卸载JDK" class="headerlink" title="卸载JDK"></a>卸载JDK</h2><h3 id="Ubuntu-1"><a href="#Ubuntu-1" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>要删除 OpenJDK (如果已安装的话)。首先，检查是安装的哪个 OpenJDK包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dpkg --list | grep -i jdk</span></span><br></pre></td></tr></table></figure><p>移除 openjdk包:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get purge openjdk*</span></span><br></pre></td></tr></table></figure><p>卸载 OpenJDK 相关包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get purge icedtea-* openjdk-*</span></span><br></pre></td></tr></table></figure><p>检查所有 OpenJDK包是否都已卸载完毕：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dpkg --list | grep -i jdk</span></span><br></pre></td></tr></table></figure><p>完毕。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle VM VirtualBox 中为 CentOS 安装增强工具</title>
      <link href="/article/Oracle%20VM%20VirtualBox%20%E4%B8%AD%E4%B8%BA%20CentOS%20%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7/"/>
      <url>/article/Oracle%20VM%20VirtualBox%20%E4%B8%AD%E4%B8%BA%20CentOS%20%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近需要在linux上测试程序，Oracle VM VirtualBox上安装了CentOS，但是增强工具安装不成功，导致共享文件夹不能使用，主机与虚拟机之间不能文件交换，特此记录解决方案，以备后用。</p><span id="more"></span><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FOracle%20VM%20VirtualBox%20%E4%B8%AD%E4%B8%BA%20CentOS%20%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FOracle%20VM%20VirtualBox%20%E4%B8%AD%E4%B8%BA%20CentOS%20%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7%E5%87%BA%E9%94%99.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Verifying archive integrity... All good.</span><br><span class="line">Uncompressing VirtualBox 6.1.20 Guest Additions <span class="keyword">for</span> Linux........</span><br><span class="line">VirtualBox Guest Additions installer</span><br><span class="line">Removing installed version 6.1.16 of VirtualBox Guest Additions...</span><br><span class="line">Copying additional installer modules ...</span><br><span class="line">Installing additional modules ...</span><br><span class="line">VirtualBox Guest Additions: Starting.</span><br><span class="line">VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel </span><br><span class="line">modules.  This may take a <span class="keyword">while</span>.</span><br><span class="line">VirtualBox Guest Additions: To build modules <span class="keyword">for</span> other installed kernels, run</span><br><span class="line">VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup &lt;version&gt;</span><br><span class="line">VirtualBox Guest Additions: or</span><br><span class="line">VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all</span><br><span class="line">VirtualBox Guest Additions: Building the modules <span class="keyword">for</span> kernel </span><br><span class="line">4.18.0-240.1.1.el8_3.x86_64.</span><br><span class="line"></span><br><span class="line">VirtualBox Guest Additions: Look at /var/log/vboxadd-setup.log to find out what </span><br><span class="line">went wrong</span><br><span class="line">modprobe vboxguest failed</span><br><span class="line">The <span class="built_in">log</span> file /var/log/vboxadd-setup.log may contain further information.</span><br><span class="line">Press Return to close this window...</span><br></pre></td></tr></table></figure><p>查看错误日志<code>/var/log/vboxadd-setup.log</code>:</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FOracle%20VM%20VirtualBox%20%E4%B8%AD%E4%B8%BA%20CentOS%20%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7-%E6%9F%A5%E7%9C%8B%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[sogrey@localhost ~]$ sudo <span class="built_in">cat</span> /var/log/vboxadd-setup.log</span><br><span class="line">[sudo] sogrey 的密码：</span><br><span class="line">Building the main Guest Additions 6.1.20 module <span class="keyword">for</span> kernel 4.18.0-240.1.1.el8_3.x86_64.</span><br><span class="line">Error building the module.  Build output follows.</span><br><span class="line">make V=1 CONFIG_MODULE_SIG= CONFIG_MODULE_SIG_ALL= -C /lib/modules/4.18.0-240.1.1.el8_3.x86_64/build M=/tmp/vbox.0 SRCROOT=/tmp/vbox.0 -j2 modules</span><br><span class="line">make[1]: warning: -jN forced <span class="keyword">in</span> submake: disabling jobserver mode.</span><br><span class="line">Makefile:978: *** <span class="string">&quot;Cannot generate ORC metadata for CONFIG_UNWINDER_ORC=y, please install libelf-dev, libelf-devel or elfutils-libelf-devel&quot;</span>.  Stop.</span><br><span class="line">make: *** [/tmp/vbox.0/Makefile-footer.gmk:117: vboxguest] Error 2</span><br><span class="line">modprobe vboxguest failed</span><br><span class="line">[sogrey@localhost ~]$</span><br></pre></td></tr></table></figure><p>提示我们<code>Cannot generate ORC metadata for CONFIG_UNWINDER_ORC=y, please install libelf-dev, libelf-devel or elfutils-libelf-devel</code>.</p><p>我们逐一尝试安装，貌似只有最后一个有效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[sogrey@localhost ~]$ sudo yum install elfutils-libelf-devel</span><br><span class="line">[sudo] sogrey 的密码：</span><br><span class="line">CentOS Linux 8 - BaseOS                                143  B/s | 3.9 kB     00:27    </span><br><span class="line">CentOS Linux 8 - Extras                                2.7 kB/s | 1.5 kB     00:00    </span><br><span class="line">CentOS Linux 8 - PowerTools                            6.9 kB/s | 4.3 kB     00:00    </span><br><span class="line">Docker CE Stable - x86_64                              6.1 kB/s | 3.5 kB     00:00    </span><br><span class="line">Extra Packages <span class="keyword">for</span> Enterprise Linux Modular 8 - x86_64  32 kB/s | 9.9 kB     00:00    </span><br><span class="line">Extra Packages <span class="keyword">for</span> Enterprise Linux Modular 8 - x86_64 482 kB/s | 612 kB     00:01    </span><br><span class="line">Extra Packages <span class="keyword">for</span> Enterprise Linux 8 - x86_64          30 kB/s |  11 kB     00:00    </span><br><span class="line">Extra Packages <span class="keyword">for</span> Enterprise Linux 8 - x86_64         1.3 MB/s | 9.4 MB     00:07    </span><br><span class="line">packages-microsoft-com-prod                             10 kB/s | 3.0 kB     00:00    </span><br><span class="line">packages-microsoft-com-prod                             80 kB/s | 2.9 MB     00:37    </span><br><span class="line">依赖关系解决。</span><br><span class="line">=======================================================================================</span><br><span class="line"> 软件包                        架构           版本                仓库            大小</span><br><span class="line">=======================================================================================</span><br><span class="line">安装:</span><br><span class="line"> elfutils-libelf-devel         x86_64         0.180-1.el8         baseos          58 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">=======================================================================================</span><br><span class="line">安装  1 软件包</span><br><span class="line"></span><br><span class="line">总下载：58 k</span><br><span class="line">安装大小：34 k</span><br><span class="line">确定吗？[y/N]： y</span><br><span class="line">下载软件包：</span><br><span class="line">[MIRROR] elfutils-libelf-devel-0.180-1.el8.x86_64.rpm: Curl error (28): Timeout was reached <span class="keyword">for</span> http://mirrors.cqu.edu.cn/CentOS/8.3.2011/BaseOS/x86_64/os/Packages/elfutils-libelf-devel-0.180-1.el8.x86_64.rpm [Connection timed out after 30000 milliseconds]</span><br><span class="line">elfutils-libelf-devel-0.180-1.el8.x86_64.rpm           1.9 kB/s |  58 kB     00:30    </span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">总计                                                   1.9 kB/s |  58 kB     00:30     </span><br><span class="line">运行事务检查</span><br><span class="line">事务检查成功。</span><br><span class="line">运行事务测试</span><br><span class="line">事务测试成功。</span><br><span class="line">运行事务</span><br><span class="line">  准备中  :                                                                        1/1 </span><br><span class="line">  安装    : elfutils-libelf-devel-0.180-1.el8.x86_64                               1/1 </span><br><span class="line">  运行脚本: elfutils-libelf-devel-0.180-1.el8.x86_64                               1/1 </span><br><span class="line">  验证    : elfutils-libelf-devel-0.180-1.el8.x86_64                               1/1 </span><br><span class="line">Installed products updated.</span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  elfutils-libelf-devel-0.180-1.el8.x86_64                                             </span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line">[sogrey@localhost ~]$ </span><br></pre></td></tr></table></figure><p>安装完成后移出增强工具虚拟盘，重新挂载安装增强工具，遗憾，仍然失败：</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FOracle%20VM%20VirtualBox%20%E4%B8%AD%E4%B8%BA%20CentOS%20%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7-%E7%A7%BB%E9%99%A4%E8%99%9A%E6%8B%9F%E7%9B%98.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Verifying archive integrity... All good.</span><br><span class="line">Uncompressing VirtualBox 6.1.20 Guest Additions <span class="keyword">for</span> Linux........</span><br><span class="line">VirtualBox Guest Additions installer</span><br><span class="line">Removing installed version 6.1.20 of VirtualBox Guest Additions...</span><br><span class="line">Copying additional installer modules ...</span><br><span class="line">Installing additional modules ...</span><br><span class="line">VirtualBox Guest Additions: Starting.</span><br><span class="line">VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel </span><br><span class="line">modules.  This may take a <span class="keyword">while</span>.</span><br><span class="line">VirtualBox Guest Additions: To build modules <span class="keyword">for</span> other installed kernels, run</span><br><span class="line">VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup &lt;version&gt;</span><br><span class="line">VirtualBox Guest Additions: or</span><br><span class="line">VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all</span><br><span class="line">VirtualBox Guest Additions: Building the modules <span class="keyword">for</span> kernel </span><br><span class="line">4.18.0-240.1.1.el8_3.x86_64.</span><br><span class="line">ValueError: File context <span class="keyword">for</span> /opt/VBoxGuestAdditions-6.1.20/other/mount.vboxsf already defined</span><br><span class="line">Press Return to close this window...</span><br></pre></td></tr></table></figure><p>注意提示<code>ValueError: File context for /opt/VBoxGuestAdditions-6.1.20/other/mount.vboxsf already defined</code>,说这个文件已经存在，网上找到这个帖子<a href="https://www.virtualbox.org/ticket/19756">ValueError: mount.vboxsf already defined</a> ,帖子末尾给出两句命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># semanage fcontext -d /opt/VBoxGuestAdditions-&lt;VERSION&gt;/other/mount.vboxsf</span></span><br><span class="line"><span class="comment"># restorecon /opt/VBoxGuestAdditions-&lt;VERSION&gt;/other/mount.vboxsf</span></span><br></pre></td></tr></table></figure><p>在终端依次执行，注意需要root权限执行，替换<code>&lt;VERSION&gt;</code> 为你当前安装的增强工具版本号，前面截图中有标识<code>6.1.20</code>。</p><p>完成后，再一次移除虚拟盘，重新挂载安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Verifying archive integrity... All good.</span><br><span class="line">Uncompressing VirtualBox 6.1.20 Guest Additions <span class="keyword">for</span> Linux........</span><br><span class="line">VirtualBox Guest Additions installer</span><br><span class="line">Removing installed version 6.1.20 of VirtualBox Guest Additions...</span><br><span class="line">Copying additional installer modules ...</span><br><span class="line">Installing additional modules ...</span><br><span class="line">VirtualBox Guest Additions: Starting.</span><br><span class="line">VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel </span><br><span class="line">modules.  This may take a <span class="keyword">while</span>.</span><br><span class="line">VirtualBox Guest Additions: To build modules <span class="keyword">for</span> other installed kernels, run</span><br><span class="line">VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup &lt;version&gt;</span><br><span class="line">VirtualBox Guest Additions: or</span><br><span class="line">VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all</span><br><span class="line">VirtualBox Guest Additions: Building the modules <span class="keyword">for</span> kernel </span><br><span class="line">4.18.0-240.1.1.el8_3.x86_64.</span><br><span class="line">VirtualBox Guest Additions: Running kernel modules will not be replaced until </span><br><span class="line">the system is restarted</span><br><span class="line">Press Return to close this window...</span><br></pre></td></tr></table></figure><p>ok，成功了（可能需要重启），可以尽情使用共享文件夹功能了。</p>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> VirtualBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis踩坑记</title>
      <link href="/article/Redis%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
      <url>/article/Redis%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录Redis开发中遇到的填坑经历。</p><span id="more"></span><h2 id="配置连接远程ip的Redis"><a href="#配置连接远程ip的Redis" class="headerlink" title="配置连接远程ip的Redis"></a>配置连接远程ip的Redis</h2><ol><li>修改redis服务器的配置文件redis.windows.conf<br>注释绑定的主机地址<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># bind 127.0.0.1</span><br></pre></td></tr></table></figure>修改为远程连接的IP地址<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 192.168.1.12</span><br></pre></td></tr></table></figure></li><li>在Redis根目录下，以管理员身份打开CMD命令窗口<br>输入<code>redis-server redis.windows.conf</code>，启动服务</li><li>在Redis根目录下尝试远程连接并查看<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h ip地址 -p 6379 能够连接</span><br></pre></td></tr></table></figure>输入<code>info</code> 能够输出信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑记 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql踩坑记</title>
      <link href="/article/Mysql%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
      <url>/article/Mysql%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录MySQL开发中遇到的填坑经历。</p><span id="more"></span><h2 id="1-局域网访问报错-message-from-server-“Host-‘xxx’-is-not-allowed-to-connect-to-this-MySQL-server"><a href="#1-局域网访问报错-message-from-server-“Host-‘xxx’-is-not-allowed-to-connect-to-this-MySQL-server" class="headerlink" title="1.局域网访问报错 message from server: “Host ‘xxx’ is not allowed to connect to this MySQL server"></a>1.局域网访问报错 message from server: “Host ‘xxx’ is not allowed to connect to this MySQL server</h2><ul><li><strong>改表法 (亲测)</strong></li></ul><p>可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称”%” </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Programs</span>\<span class="title">mysql</span>-8.0.23-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysql</span> -<span class="title">u</span> <span class="title">root</span> -<span class="title">p</span> </span></span><br><span class="line"><span class="function"><span class="title">Enter</span> <span class="title">password</span>: *******</span></span><br><span class="line"><span class="function"><span class="title">Welcome</span> <span class="title">to</span> <span class="title">the</span> <span class="title">MySQL</span> <span class="title">monitor</span>.  <span class="title">Commands</span> <span class="title">end</span> <span class="title">with</span> ; <span class="title">or</span> \<span class="title">g</span>.</span></span><br><span class="line"><span class="function"><span class="title">Your</span> <span class="title">MySQL</span> <span class="title">connection</span> <span class="title">id</span> <span class="title">is</span> 33</span></span><br><span class="line"><span class="function"><span class="title">Server</span> <span class="title">version</span>: 8.0.23 <span class="title">MySQL</span> <span class="title">Community</span> <span class="title">Server</span> - <span class="title">GPL</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> (<span class="title">c</span>) 2000, 2021, <span class="title">Oracle</span> <span class="title">and</span>/<span class="title">or</span> <span class="title">its</span> <span class="title">affiliates</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Oracle</span> <span class="title">is</span> <span class="title">a</span> <span class="title">registered</span> <span class="title">trademark</span> <span class="title">of</span> <span class="title">Oracle</span> <span class="title">Corporation</span> <span class="title">and</span>/<span class="title">or</span> <span class="title">its</span></span></span><br><span class="line"><span class="function"><span class="title">affiliates</span>. <span class="title">Other</span> <span class="title">names</span> <span class="title">may</span> <span class="title">be</span> <span class="title">trademarks</span> <span class="title">of</span> <span class="title">their</span> <span class="title">respective</span></span></span><br><span class="line"><span class="function"><span class="title">owners</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Type</span> &#x27;<span class="title">help</span>;&#x27; <span class="title">or</span> &#x27;\<span class="title">h</span>&#x27; <span class="title">for</span> <span class="title">help</span>. <span class="title">Type</span> &#x27;\<span class="title">c</span>&#x27; <span class="title">to</span> <span class="title">clear</span> <span class="title">the</span> <span class="title">current</span> <span class="title">input</span> <span class="title">statement</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">use</span> <span class="title">mysql</span>;</span></span><br><span class="line"><span class="function"><span class="title">Database</span> <span class="title">changed</span></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">select</span> <span class="title">host</span>, <span class="title">user</span> <span class="title">from</span> <span class="title">user</span>;</span></span><br><span class="line"><span class="function">+-----------+------------------+</span></span><br><span class="line"><span class="function">| <span class="title">host</span>      | <span class="title">user</span>             |</span></span><br><span class="line"><span class="function">+-----------+------------------+</span></span><br><span class="line"><span class="function">| <span class="title">localhost</span> | <span class="title">mysql.infoschema</span> |</span></span><br><span class="line"><span class="function">| <span class="title">localhost</span> | <span class="title">mysql.session</span>    |</span></span><br><span class="line"><span class="function">| <span class="title">localhost</span> | <span class="title">mysql.sys</span>        |</span></span><br><span class="line"><span class="function">| <span class="title">localhost</span> | <span class="title">root</span>             |</span></span><br><span class="line"><span class="function">+-----------+------------------+</span></span><br><span class="line"><span class="function">4 <span class="title">rows</span> <span class="title">in</span> <span class="title">set</span> (0.00 <span class="title">sec</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">update</span> <span class="title">user</span> <span class="title">set</span> <span class="title">host</span> = &#x27;%&#x27; <span class="title">where</span> <span class="title">user</span> = &#x27;<span class="title">root</span>&#x27;;</span></span><br><span class="line"><span class="function"><span class="title">Query</span> <span class="title">OK</span>, 1 <span class="title">row</span> <span class="title">affected</span> (0.00 <span class="title">sec</span>)</span></span><br><span class="line"><span class="function"><span class="title">Rows</span> <span class="title">matched</span>: 1  <span class="title">Changed</span>: 1  <span class="title">Warnings</span>: 0</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">select</span> <span class="title">host</span>, <span class="title">user</span> <span class="title">from</span> <span class="title">user</span>;</span></span><br><span class="line"><span class="function">+-----------+------------------+</span></span><br><span class="line"><span class="function">| <span class="title">host</span>      | <span class="title">user</span>             |</span></span><br><span class="line"><span class="function">+-----------+------------------+</span></span><br><span class="line"><span class="function">| %         | <span class="title">root</span>             |</span></span><br><span class="line"><span class="function">| <span class="title">localhost</span> | <span class="title">mysql.infoschema</span> |</span></span><br><span class="line"><span class="function">| <span class="title">localhost</span> | <span class="title">mysql.session</span>    |</span></span><br><span class="line"><span class="function">| <span class="title">localhost</span> | <span class="title">mysql.sys</span>        |</span></span><br><span class="line"><span class="function">+-----------+------------------+</span></span><br><span class="line"><span class="function">4 <span class="title">rows</span> <span class="title">in</span> <span class="title">set</span> (0.00 <span class="title">sec</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>授权法</strong></li></ul><p>例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;myuser&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;mypassword&#x27; WITH GRANT OPTION; </span><br><span class="line"> </span><br><span class="line">FLUSH   PRIVILEGES; </span><br></pre></td></tr></table></figure><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;myuser&#x27;@&#x27;<span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">3</span>&#x27; IDENTIFIED BY &#x27;mypassword&#x27; WITH GRANT OPTION;   www.<span class="number">2</span>cto.com  </span><br><span class="line"> </span><br><span class="line">FLUSH   PRIVILEGES; </span><br></pre></td></tr></table></figure><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON dk.* TO &#x27;myuser&#x27;@&#x27;<span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">3</span>&#x27; IDENTIFIED BY &#x27;mypassword&#x27; WITH GRANT OPTION; </span><br><span class="line"> </span><br><span class="line">FLUSH   PRIVILEGES; </span><br></pre></td></tr></table></figure><ul><li><strong>另外一种方法</strong></li></ul><p>在安装mysql的机器上运行：   </p><ol><li><code>d:\mysql\bin\&gt;mysql   -h   localhost   -u   root</code>这样应该可以进入MySQL服务器</li><li><code>mysql&gt;GRANT   ALL   PRIVILEGES   ON   *.*   TO   &#39;root&#39;@&#39;%&#39;   WITH   GRANT   OPTION</code> 赋予任何主机访问数据的权限 </li><li><code>mysql&gt;FLUSH   PRIVILEGES</code>修改生效 </li><li><code>mysql&gt;EXIT</code> 退出MySQL服务器 </li></ol><p>这样就可以在其它任何的主机上以root身份登录啦！ </p><h2 id="2-链接MySQL提示“Too-many-connections”"><a href="#2-链接MySQL提示“Too-many-connections”" class="headerlink" title="2. 链接MySQL提示“Too many connections”"></a>2. 链接MySQL提示“Too many connections”</h2><p>字面意思就是连接数过多，超限了。那么现在就查下当前限制多少连接数，并且修改最大连接数。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 <span class="number">10</span>.<span class="number">0</span>.<span class="number">19043</span>.<span class="number">1348</span>]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">D:\<span class="title">Programs</span>\<span class="title">mysql</span>-8.0.23-<span class="title">winx64</span>&gt;<span class="title">cd</span> <span class="title">bin</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Programs</span>\<span class="title">mysql</span>-8.0.23-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysql</span> -<span class="title">u</span> <span class="title">root</span> -<span class="title">p</span> # 使用<span class="title">root</span>用户登录<span class="title">mysql</span></span></span><br><span class="line"><span class="function"><span class="title">Enter</span> <span class="title">password</span>: *******</span></span><br><span class="line"><span class="function"><span class="title">Welcome</span> <span class="title">to</span> <span class="title">the</span> <span class="title">MySQL</span> <span class="title">monitor</span>.  <span class="title">Commands</span> <span class="title">end</span> <span class="title">with</span> ; <span class="title">or</span> \<span class="title">g</span>.</span></span><br><span class="line"><span class="function"><span class="title">Your</span> <span class="title">MySQL</span> <span class="title">connection</span> <span class="title">id</span> <span class="title">is</span> 8</span></span><br><span class="line"><span class="function"><span class="title">Server</span> <span class="title">version</span>: 8.0.23 <span class="title">MySQL</span> <span class="title">Community</span> <span class="title">Server</span> - <span class="title">GPL</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> (<span class="title">c</span>) 2000, 2021, <span class="title">Oracle</span> <span class="title">and</span>/<span class="title">or</span> <span class="title">its</span> <span class="title">affiliates</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Oracle</span> <span class="title">is</span> <span class="title">a</span> <span class="title">registered</span> <span class="title">trademark</span> <span class="title">of</span> <span class="title">Oracle</span> <span class="title">Corporation</span> <span class="title">and</span>/<span class="title">or</span> <span class="title">its</span></span></span><br><span class="line"><span class="function"><span class="title">affiliates</span>. <span class="title">Other</span> <span class="title">names</span> <span class="title">may</span> <span class="title">be</span> <span class="title">trademarks</span> <span class="title">of</span> <span class="title">their</span> <span class="title">respective</span></span></span><br><span class="line"><span class="function"><span class="title">owners</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Type</span> &#x27;<span class="title">help</span>;&#x27; <span class="title">or</span> &#x27;\<span class="title">h</span>&#x27; <span class="title">for</span> <span class="title">help</span>. <span class="title">Type</span> &#x27;\<span class="title">c</span>&#x27; <span class="title">to</span> <span class="title">clear</span> <span class="title">the</span> <span class="title">current</span> <span class="title">input</span> <span class="title">statement</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">show</span> <span class="title">processlist</span>; # 查询<span class="title">mysql</span>的所有连接</span></span><br><span class="line"><span class="function">+----+-----------------+-----------------+------+---------+------+------------------------+------------------+</span></span><br><span class="line"><span class="function">| <span class="title">Id</span> | <span class="title">User</span>            | <span class="title">Host</span>            | <span class="title">db</span>   | <span class="title">Command</span> | <span class="title">Time</span> | <span class="title">State</span>                  | <span class="title">Info</span>             |</span></span><br><span class="line"><span class="function">+----+-----------------+-----------------+------+---------+------+------------------------+------------------+</span></span><br><span class="line"><span class="function">|  5 | <span class="title">event_scheduler</span> | <span class="title">localhost</span>       | <span class="title">NULL</span> | <span class="title">Daemon</span>  | 4304 | <span class="title">Waiting</span> <span class="title">on</span> <span class="title">empty</span> <span class="title">queue</span> | <span class="title">NULL</span>             |</span></span><br><span class="line"><span class="function">|  8 | <span class="title">root</span>            | <span class="title">localhost</span>:55747 | <span class="title">NULL</span> | <span class="title">Query</span>   |    0 | <span class="title">init</span>                   | <span class="title">show</span> <span class="title">processlist</span> |</span></span><br><span class="line"><span class="function">+----+-----------------+-----------------+------+---------+------+------------------------+------------------+</span></span><br><span class="line"><span class="function">2 <span class="title">rows</span> <span class="title">in</span> <span class="title">set</span> (0.00 <span class="title">sec</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">show</span> <span class="title">variables</span> <span class="title">like</span> &#x27;%<span class="title">max_connections</span>%&#x27;; # 查询最大连接数，看到只有 20</span></span><br><span class="line"><span class="function">+------------------------+-------+</span></span><br><span class="line"><span class="function">| <span class="title">Variable_name</span>          | <span class="title">Value</span> |</span></span><br><span class="line"><span class="function">+------------------------+-------+</span></span><br><span class="line"><span class="function">| <span class="title">max_connections</span>        | 20    |</span></span><br><span class="line"><span class="function">| <span class="title">mysqlx_max_connections</span> | 100   |</span></span><br><span class="line"><span class="function">+------------------------+-------+</span></span><br><span class="line"><span class="function">2 <span class="title">rows</span> <span class="title">in</span> <span class="title">set</span>, 1 <span class="title">warning</span> (0.01 <span class="title">sec</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">set</span> <span class="title">GLOBAL</span> <span class="title">max_connections</span>=1000; # 设置最大连接数 1000</span></span><br><span class="line"><span class="function"><span class="title">Query</span> <span class="title">OK</span>, 0 <span class="title">rows</span> <span class="title">affected</span> (0.00 <span class="title">sec</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">show</span> <span class="title">variables</span> <span class="title">like</span> &#x27;%<span class="title">max_connections</span>%&#x27;; # 再次查询最大连接数，看到已经是设置好的 1000 了</span></span><br><span class="line"><span class="function">+------------------------+-------+</span></span><br><span class="line"><span class="function">| <span class="title">Variable_name</span>          | <span class="title">Value</span> |</span></span><br><span class="line"><span class="function">+------------------------+-------+</span></span><br><span class="line"><span class="function">| <span class="title">max_connections</span>        | 1000  |</span></span><br><span class="line"><span class="function">| <span class="title">mysqlx_max_connections</span> | 100   |</span></span><br><span class="line"><span class="function">+------------------------+-------+</span></span><br><span class="line"><span class="function">2 <span class="title">rows</span> <span class="title">in</span> <span class="title">set</span>, 1 <span class="title">warning</span> (0.00 <span class="title">sec</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">exit</span> # 退出<span class="title">mysql</span>命令行</span></span><br><span class="line"><span class="function"><span class="title">Bye</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Programs</span>\<span class="title">mysql</span>-8.0.23-<span class="title">winx64</span>\<span class="title">bin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>超过连接数的原因，是mysql的连接数保持时间太长。可以修改一下保活机制<code>show global variables like &#39;wait_timeout&#39;</code> ，就是最大睡眠时间。</p><p>修改一下<code>set global wait_timeout=300;</code> 自动杀死线程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like &#x27;wait_timeout&#x27;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| wait_timeout  | 28800 |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global wait_timeout=300;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show global variables like &#x27;wait_timeout&#x27;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| wait_timeout  | 300   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>刚刚的配置是临时修改，重启mysql会失效。可以通过修改mysql的配置/etc/my.cnf。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">max_connections = 1024</span><br><span class="line">group_concat_max_len = 1024</span><br><span class="line"># 最大睡眠时间</span><br><span class="line">wait_timeout=300</span><br><span class="line"># 超时时间设置</span><br><span class="line">interactive_timeout = 500</span><br></pre></td></tr></table></figure><p>修改完毕后，重启mysql即可。</p><h2 id="3-Loading-class-com-mysql-jdbc-Driver-This-is-deprecated-The-new-driver-class-is-com-mysql-cj-jdbc-Driver-The-driver-is-automatically-registered-via-the-SPI-and-manual-loading-of-the-driver-class-is-generally-unnecessary"><a href="#3-Loading-class-com-mysql-jdbc-Driver-This-is-deprecated-The-new-driver-class-is-com-mysql-cj-jdbc-Driver-The-driver-is-automatically-registered-via-the-SPI-and-manual-loading-of-the-driver-class-is-generally-unnecessary" class="headerlink" title="3. Loading class com.mysql.jdbc.Driver. This is deprecated. The new driver class is com.mysql.cj.jdbc.Driver. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary."></a>3. Loading class <code>com.mysql.jdbc.Driver</code>. This is deprecated. The new driver class is <code>com.mysql.cj.jdbc.Driver</code>. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</h2><p>因为连接mysql8版本的数据库需要新的驱动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><h2 id="4-MySQL-Workbench-连接不上mysql问题"><a href="#4-MySQL-Workbench-连接不上mysql问题" class="headerlink" title="4. MySQL Workbench 连接不上mysql问题"></a>4. MySQL Workbench 连接不上mysql问题</h2><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FMySQL%20Workbench%20%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8Amysql%E9%97%AE%E9%A2%98-1.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FMySQL%20Workbench%20%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8Amysql%E9%97%AE%E9%A2%98-2.png"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FMySQL%20Workbench%20%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8Amysql%E9%97%AE%E9%A2%98-3.png"></p><p>加入host的范围</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span>,host <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span> host      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span>  flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>终于成功。记得权限类的要<code>flush privileges</code>!</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FMySQL%20Workbench%20%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8Amysql%E9%97%AE%E9%A2%98-4.png"></p><h2 id="5-设置expire-logs-days自动过期清理binlog"><a href="#5-设置expire-logs-days自动过期清理binlog" class="headerlink" title="5. 设置expire_logs_days自动过期清理binlog"></a>5. 设置expire_logs_days自动过期清理binlog</h2><p>最近发现磁盘满了，saomiaoxia该分区发现mysql/data下大量<code>binlog.000xxx</code>文件，每个都几乎1G多，这是mysql二进制日志文件用于日志记录与操作恢复的，从没清理过，导致占用很大空间。</p><p>查看binlog过期时间，设置的时间为90天，这个值默认是0天，也就是说不自动清理，可以根据生产情况修改，本例修改为7天</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;expire_logs_days&#x27;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| expire_logs_days | 0     |</span><br><span class="line">+------------------+-------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global expire_logs_days=7;</span><br><span class="line">ERROR 3683 (HY000): The option expire_logs_days and binlog_expire_logs_seconds cannot be used together. Please use binlog_expire_logs_seconds to set the expire time (expire_logs_days is deprecated)</span><br><span class="line">mysql&gt; set global  binlog_expire_logs_seconds=60*60*24*7;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#x27;%expire%&#x27;;</span><br><span class="line">+--------------------------------+--------+</span><br><span class="line">| Variable_name                  | Value  |</span><br><span class="line">+--------------------------------+--------+</span><br><span class="line">| binlog_expire_logs_seconds     | 604800 |</span><br><span class="line">| disconnect_on_expired_password | ON     |</span><br><span class="line">| expire_logs_days               | 0      |</span><br><span class="line">+--------------------------------+--------+</span><br><span class="line">3 rows in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>设置之后不会立即清除，触发条件是：</p><ul><li>binlog大小超过max_binlog_size</li><li>手动执行flush logs</li><li>重新启动时(MySQL将会new一个新文件用于记录binlog)</li></ul><p>我们执行<code>flush logs;</code> 使之立即生效，过期日志文件就被删除了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  flush logs;</span><br><span class="line">Query OK, 0 rows affected (0.30 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>删除指定日期之前的 binlog ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; PURGE MASTER LOGS BEFORE &#x27;2020-11-11 11:11:11&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.19 sec)</span><br></pre></td></tr></table></figure><p>清空所有 binlog</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; RESET MASTER;</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br></pre></td></tr></table></figure><p>配置自动清理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global expire_logs_days=7;</span><br></pre></td></tr></table></figure><p>设置过期时长。过期自动删除，上面我刚试了，但提示：</p><blockquote><p> The option expire_logs_days and binlog_expire_logs_seconds cannot be used together. Please use binlog_expire_logs_seconds to set the expire time (expire_logs_days is deprecated)</p></blockquote><p>大意是 <code>expire_logs_days</code> 与 <code>binlog_expire_logs_seconds</code> 不能同时使用，让我们使用 <code>binlog_expire_logs_seconds</code>, 因为 <code>expire_logs_days</code> 已经过时了。 <code>binlog_expire_logs_seconds</code> 设置的过期时长单位是秒，设置7天过期：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global  binlog_expire_logs_seconds=60*60*24*7;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#x27;%expire%&#x27;;</span><br><span class="line">+--------------------------------+--------+</span><br><span class="line">| Variable_name                  | Value  |</span><br><span class="line">+--------------------------------+--------+</span><br><span class="line">| binlog_expire_logs_seconds     | 604800 |</span><br><span class="line">| disconnect_on_expired_password | ON     |</span><br><span class="line">| expire_logs_days               | 0      |</span><br><span class="line">+--------------------------------+--------+</span><br><span class="line">3 rows in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://www.cnblogs.com/childking/p/12695588.html">MySQL优化之配置文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 踩坑记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高国内访问GitHub的速度</title>
      <link href="/article/%E6%8F%90%E9%AB%98%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AEGitHub%E7%9A%84%E9%80%9F%E5%BA%A6/"/>
      <url>/article/%E6%8F%90%E9%AB%98%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AEGitHub%E7%9A%84%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为某些原因，github访问速度确实太慢,于是就出现了很多提高github访问速度的方案。在此记录几种。</p><span id="more"></span><h2 id="GitHub-镜像访问"><a href="#GitHub-镜像访问" class="headerlink" title="GitHub 镜像访问"></a>GitHub 镜像访问</h2><p>这里提供两个最常用的镜像地址：</p><ul><li><a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org</a></li><li><a href="https://hub.fastgit.org/">https://hub.fastgit.org</a></li></ul><p>也就是说上面的镜像就是一个克隆版的 GitHub，你可以访问上面的镜像网站，网站的内容跟 GitHub 是完整同步的镜像，然后在这个网站里面进行下载克隆等操作。</p><blockquote><p>不要在克隆站上登录你的github账号</p></blockquote><h2 id="GitHub-文件加速"><a href="#GitHub-文件加速" class="headerlink" title="GitHub 文件加速"></a>GitHub 文件加速</h2><p>利用 Cloudflare Workers 对 github release 、archive 以及项目文件进行加速，部署无需服务器且自带CDN.</p><ul><li><a href="https://gh.api.99988866.xyz/">https://gh.api.99988866.xyz</a></li><li><a href="https://g.ioiox.com/">https://g.ioiox.com</a></li></ul><p>以上网站为演示站点，如无法打开可以查看开源项目：<a href="https://hunsh.net/archives/23/">gh-proxy-GitHub</a> 文件加速自行部署。</p><h2 id="Github-加速下载"><a href="#Github-加速下载" class="headerlink" title="Github 加速下载"></a>Github 加速下载</h2><p>只需要复制当前 GitHub 地址粘贴到输入框中就可以代理加速下载！</p><p>地址：<a href="http://toolwa.com/github/">http://toolwa.com/github/</a></p><h2 id="加速你的-Github"><a href="#加速你的-Github" class="headerlink" title="加速你的 Github"></a>加速你的 Github</h2><p><a href="https://github.zhlh6.cn/">https://github.zhlh6.cn</a></p><p>输入 Github 仓库地址，使用生成的地址进行 git ssh 等操作</p><h2 id="GitHub-raw-加速"><a href="#GitHub-raw-加速" class="headerlink" title="GitHub raw 加速"></a>GitHub raw 加速</h2><p>GitHub raw 域名并非 <code>github.com</code> 而是 <code>raw.githubusercontent.com</code>，上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务。</p><p>将 <code>raw.githubusercontent.com</code> 替换为 <code>raw.staticdn.net</code> 即可加速。</p><h2 id="GitHub-Jsdelivr"><a href="#GitHub-Jsdelivr" class="headerlink" title="GitHub + Jsdelivr"></a>GitHub + Jsdelivr</h2><p>jsdelivr 唯一美中不足的就是它不能获取 exe 文件以及 Release 处附加的 exe 和 dmg 文件。</p><p>也就是说如果 exe 文件是附加在 Release 处但是没有在 code 里面的话是无法获取的。所以只能当作静态文件 cdn 用途，而不能作为 Release 加速下载的用途。</p><h2 id="通过-Gitee-中转-fork-仓库下载"><a href="#通过-Gitee-中转-fork-仓库下载" class="headerlink" title="通过 Gitee 中转 fork 仓库下载"></a>通过 Gitee 中转 fork 仓库下载</h2><p>网上有很多相关的教程，就是将github的仓库克隆同步到gitee上</p><h2 id="通过修改-HOSTS-文件进行加速"><a href="#通过修改-HOSTS-文件进行加速" class="headerlink" title="通过修改 HOSTS 文件进行加速"></a>通过修改 HOSTS 文件进行加速</h2><p>手动把cdn和ip地址绑定。</p><ul><li>获取 github 的 <code>global.ssl.fastly</code> 地址访问：<a href="http://github.global.ssl.fastly.net.ipaddress.com/#ipinfo">http://github.global.ssl.fastly.net.ipaddress.com/#ipinfo</a> 获取cdn和ip域名：</li></ul><p>得到：199.232.69.194 <a href="https://github.global.ssl.fastly.net/">https://github.global.ssl.fastly.net</a></p><ul><li>获取github.com地址</li></ul><p>访问：<a href="https://github.com.ipaddress.com/#ipinfo">https://github.com.ipaddress.com/#ipinfo</a> 获取cdn和ip：</p><p>得到：140.82.114.4 <a href="http://github.com/">http://github.com</a></p><ul><li>修改 host 文件映射上面查找到的 IP</li></ul><p>windows系统：</p><ul><li>修改C:WindowsSystem32driversetchosts文件的权限，指定可写入：右击-&gt;hosts-&gt;属性-&gt;安全-&gt;编辑-&gt;点击Users-&gt;在Users的权限“写入”后面打勾。然后点击确定。</li><li>右击-&gt;hosts-&gt;打开方式-&gt;选定记事本（或者你喜欢的编辑器）-&gt;在末尾处添加以下内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.114.4 github.com</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/xc7wvTDcM4kTS_qILIlg2w">提高国内访问 GitHub 的速度的 9 种方案</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中让shell脚本变成可执行文件</title>
      <link href="/article/Linux%E4%B8%AD%E8%AE%A9shell%E8%84%9A%E6%9C%AC%E5%8F%98%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/"/>
      <url>/article/Linux%E4%B8%AD%E8%AE%A9shell%E8%84%9A%E6%9C%AC%E5%8F%98%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何创建Linux脚本，在Linux中创建脚本如何运行？</p><span id="more"></span><p>先创建一个脚本文件<code>run.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> run.sh</span><br></pre></td></tr></table></figure><p>输入内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author : Sogrey</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;What&#x27;s your name?&quot;</span></span><br><span class="line"><span class="built_in">read</span> PERSON</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello, <span class="variable">$PERSON</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="sh-bash执行Bash脚本"><a href="#sh-bash执行Bash脚本" class="headerlink" title="sh/bash执行Bash脚本"></a>sh/bash执行Bash脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[sogrey@bogon 文档]$ sh run.sh</span><br><span class="line">What<span class="string">&#x27;s your name?</span></span><br><span class="line"><span class="string">Sogrey</span></span><br><span class="line"><span class="string">Hello, Sogrey</span></span><br><span class="line"><span class="string">[sogrey@bogon 文档]$ bash run.sh</span></span><br><span class="line"><span class="string">What&#x27;</span>s your name?</span><br><span class="line">Sogrey</span><br><span class="line">Hello, Sogrey</span><br></pre></td></tr></table></figure><h2 id="chmod命令设置可执行权限"><a href="#chmod命令设置可执行权限" class="headerlink" title="chmod命令设置可执行权限"></a>chmod命令设置可执行权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[sogrey@bogon 文档]$ <span class="built_in">chmod</span> +x ./run.sh</span><br><span class="line">[sogrey@bogon 文档]$ ll</span><br><span class="line">总用量 28</span><br><span class="line">-rwx------. 1 sogrey sogrey   90 3月   7 12:02 run.sh</span><br><span class="line">[sogrey@bogon 文档]$ ./run.sh</span><br><span class="line">What<span class="string">&#x27;s your name?</span></span><br><span class="line"><span class="string">Sogrey</span></span><br><span class="line"><span class="string">Hello, Sogrey</span></span><br><span class="line"><span class="string">[sogrey@bogon 文档]$ </span></span><br></pre></td></tr></table></figure><h2 id="shc打包二进制文件"><a href="#shc打包二进制文件" class="headerlink" title="shc打包二进制文件"></a>shc打包二进制文件</h2><h3 id="gzexe加密"><a href="#gzexe加密" class="headerlink" title="gzexe加密"></a>gzexe加密</h3><p>gzexe命令即可隐藏shell源码，这个命令是系统自带的gzexe程序。在运用中， gzexe  script.sh会把原来没有加密的文件备份为 script.sh~ ,同时 script.sh 即被变成加密文件。 gzexe  -d script.sh会解密还原脚本，所以只能够满足一般的加密用途。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[sogrey@bogon 文档]$ gzexe run.sh <span class="comment"># 加密</span></span><br><span class="line">run.sh:  7.8%</span><br><span class="line">[sogrey@bogon 文档]$ gzexe -d run.sh <span class="comment"># 解密</span></span><br><span class="line">[sogrey@bogon 文档]$ </span><br></pre></td></tr></table></figure><h3 id="shc打包二进制文件-1"><a href="#shc打包二进制文件-1" class="headerlink" title="shc打包二进制文件"></a>shc打包二进制文件</h3><p>在源中搜索软件：<code>apt-cache search shc</code>，显示shc为Shell script compiler，然后安装 <code>apt-get install shc</code> ，安装后程序放置于/usr/bin/shc。</p><p>shc把shell脚本封装为一个可执行的二进制文件，<code>shc -h</code>查看使用方法。</p><p><code>shc -v -r -f run.sh</code> 打包成<code>run.sh.x</code>二进制文件，同时生成<code>run.sh.x.c</code>文件，这个为C语言文件。猜想这个工具是将shell脚本转为C语言，然后在打包成二进制文件。</p><p>如果打包不成功的话，<code>shc -h</code>最下面有environment环境要求，要在保证满足。</p><h3 id="shc的反编译UnSHc"><a href="#shc的反编译UnSHc" class="headerlink" title="shc的反编译UnSHc"></a>shc的反编译UnSHc</h3><p>github上克隆：<code>git clone https://github.com/yanncam/UnSHc.git</code>，文件夹lastest中有个脚本<code>unshc.sh</code>可以完成反编译功能。</p><p><code>./unshc.sh -h</code>查看使用方法，笔者使用sample里面的例程测试可以。但是笔者觉得这个工具意义不大，除非知道二级制文件是使用shc来编译的，不然反编译出来也不成功。反编译UnSHc对于开发人员来说作用不大。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/69ce43a5c355">如何让shell脚本变成可执行文件</a></li><li><a href="https://www.jianshu.com/p/fae2e9b1d1f6">Linux中将shell脚本打包为可执行文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装.netcore</title>
      <link href="/article/CentOS%E5%AE%89%E8%A3%85-netcore/"/>
      <url>/article/CentOS%E5%AE%89%E8%A3%85-netcore/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装-Net-Core"><a href="#安装-Net-Core" class="headerlink" title="安装.Net Core"></a>安装.Net Core</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm</span><br><span class="line">sudo yum update -y</span><br><span class="line">sudo yum install -y dotnet-runtime-2.1</span><br><span class="line">dotnet --info</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装-Net-Core-SDK"><a href="#安装-Net-Core-SDK" class="headerlink" title="安装.Net Core SDK"></a>安装.Net Core SDK</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y dotnet-sdk-2.1</span><br><span class="line">dotnet --version</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装Asp-Net-Core"><a href="#安装Asp-Net-Core" class="headerlink" title="安装Asp.Net Core"></a>安装Asp.Net Core</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y aspnetcore-runtime-2.1</span><br><span class="line">dotnet --info</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="卸载-Net-Core"><a href="#卸载-Net-Core" class="headerlink" title="卸载.Net Core"></a>卸载.Net Core</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove -y aspnetcore-*</span><br><span class="line">sudo yum remove -y dotnet-*</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.microsoft.com/net/download/linux-package-manager/centos/sdk-current">https://www.microsoft.com/net/download/linux-package-manager/centos/sdk-current</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> .netcore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise.all和Promise.allSettled的区别</title>
      <link href="/article/Promise-all%E5%92%8CPromise-allSettled%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/article/Promise-all%E5%92%8CPromise-allSettled%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一句话概括Promise.allSettled和Promise.all的最大不同：<strong>Promise.allSettled永远不会被reject</strong>。</p><span id="more"></span><p>转自：<a href="https://segmentfault.com/a/1190000023413699">Promise.all和Promise.allSettled的区别</a></p><h2 id="解决Promise-all的痛点"><a href="#解决Promise-all的痛点" class="headerlink" title="解决Promise.all的痛点"></a>解决Promise.all的痛点</h2><p>当需要处理多个Promise并行时，大多数情况下Promise.all用起来是非常顺手的，比如下面这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">delay</span> = n =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, n));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="title function_">delay</span>(<span class="number">100</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">1</span>),</span><br><span class="line">  <span class="title function_">delay</span>(<span class="number">200</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">2</span>),</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="function"><span class="params">values</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(values))</span><br><span class="line"><span class="comment">// 最终输出： [1, 2]</span></span><br></pre></td></tr></table></figure><p>可是，是一旦有一个promise出现了异常，被reject了，情况就会变的麻烦。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="title function_">delay</span>(<span class="number">100</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">1</span>),</span><br><span class="line">  <span class="title function_">delay</span>(<span class="number">200</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">2</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>)</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="function"><span class="params">values</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(values))</span><br><span class="line"><span class="comment">// 最终输出： Uncaught (in promise) 3</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">values</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(values))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br><span class="line"><span class="comment">// 加入catch语句后，最终输出：3</span></span><br></pre></td></tr></table></figure><p>尽管能用catch捕获其中的异常，但你会发现其他执行成功的Promise的消息都丢失了，仿佛石沉大海一般。</p><p>要么全部成功，要么全部重来，这是Promise.all本身的强硬逻辑，也是痛点的来源，不能说它错，但这的确给Promise.allSettled留下了立足的空间。</p><p>假如使用Promise.allSettled来处理这段逻辑会怎样呢?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="title function_">delay</span>(<span class="number">100</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">1</span>),</span><br><span class="line">  <span class="title function_">delay</span>(<span class="number">200</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">2</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>)</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises).<span class="title function_">then</span>(<span class="function"><span class="params">values</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(values))</span><br><span class="line"><span class="comment">// 最终输出： </span></span><br><span class="line"><span class="comment">//    [</span></span><br><span class="line"><span class="comment">//      &#123;status: &quot;fulfilled&quot;, value: 1&#125;,</span></span><br><span class="line"><span class="comment">//      &#123;status: &quot;fulfilled&quot;, value: 2&#125;,</span></span><br><span class="line"><span class="comment">//      &#123;status: &quot;rejected&quot;, value: 3&#125;,</span></span><br><span class="line"><span class="comment">//    ]</span></span><br></pre></td></tr></table></figure><p>可以看到所有promise的数据都被包含在then语句中，且每个promise的返回值多了一个status字段，表示当前promise的状态，没有任何一个promise的信息被丢失。</p><p>因此，当用Promise.allSettled时，我们只需专注在then语句里，当有promise被异常打断时，我们依然能妥善处理那些已经成功了的promise，不必全部重来。</p><h2 id="当前大环境对Promise-allSettled的支持"><a href="#当前大环境对Promise-allSettled的支持" class="headerlink" title="当前大环境对Promise.allSettled的支持"></a>当前大环境对Promise.allSettled的支持</h2><p>nodejs从<a href="https://nodejs.org/en/blog/release/v12.9.0/">v12.9.0</a>开始加入了对Promise.allSettled的支持，主流浏览器们也各自在2019年发布的版本中支持了此方法，这意味着你已经可以放心大胆的使用了。</p><p><img src="https://image-static.segmentfault.com/292/869/2928695017-5f20c43ed364c_articlex" alt="promise-allsettled.png"></p><p><a href="https://caniuse.com/?search=Promise.allSettled">点此查询</a></p><p>对于那些不支持此方法的环境，你可以直接引用开源社区中实现了此方法的npm包：</p><ul><li><a href="https://www.npmjs.com/package/promise.allsettled">promise.allsettled</a></li><li><a href="https://www.npmjs.com/package/promise-settle">promise-settle</a></li><li><a href="https://www.npmjs.com/package/promise-all-settled">promise-all-settled</a></li><li><a href="https://www.npmjs.com/package/es2015-promise.allsettled">es2015-promise.allsettled</a></li></ul><p>或者，你可以直接基于Promise.all写一个polyfill，给你的项目打上补丁：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Promise</span> &amp;&amp; !<span class="title class_">Promise</span>.<span class="property">allSettled</span>) &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="property">allSettled</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">promise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">state</span>: <span class="string">&#x27;fulfilled&#x27;</span>, <span class="attr">value</span>: value &#125;;</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">state</span>: <span class="string">&#x27;rejected&#x27;</span>, <span class="attr">reason</span>: reason &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>Promise.allSettled</code>是<code>对Promise.all</code>的一种补充，当面对多个promise并行时，它额外提供了一种处理方式，解决了当多个promise并行时reject的出现会伴随着其他promise数据丢失的问题。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoCAD_ID、指针、句柄和ads_name的区别</title>
      <link href="/article/AutoCAD_ID__Handle__ads_name/"/>
      <url>/article/AutoCAD_ID__Handle__ads_name/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>转载自：<a href="https://my.oschina.net/u/2930533/blog/759617">https://my.oschina.net/u/2930533/blog/759617</a></p><p><img src="http://static.oschina.net/uploads/space/2016/1017/165317_6Tgq_2930533.png" alt=" "></p><span id="more"></span><p>访问实体的特性必须通过对象指针，但是一旦你获得了实体的ID、句柄或者ads_name，都能通过ID作中介而获得对象的指针。其中ID是一个桥梁。句柄是Windows编程一个常用的概念，在ObjectARX编程中一般指AcDbHandle类（也可指Windows编程的界面元素），该类封装了一个64位整形标识符，随DWG文件一同保存。ads_name则是在ADS编程中出现的一个概念，其实际上是一个二维数组，数组元素类型为长整型，在与用户交互的函数中经常用到。</p><h2 id="ID、句柄和-ads-name-具有各自的特点："><a href="#ID、句柄和-ads-name-具有各自的特点：" class="headerlink" title="ID、句柄和 ads_name 具有各自的特点："></a>ID、句柄和 ads_name 具有各自的特点：</h2><ol><li>AcDbObjectId：当dwg图形被打开后,数据库中的实体对象都会在内存中对应一个唯一的id(AcDbObjectId),AcDbObjectId也是与对象相关联的唯一标识符.AcDbObjectId仅存在于其所存在的数据库从内存中产生到数据库被删除之间.如果操作多个dwg,AcDbObjectId在多个数据库之间都是唯一的.</li><li>AcDbHandle：dwg文件中每一个实体都有一个唯一的标识符,用AcDbHandle表示,在一个AutoCAD中，不能保证每个实体的句柄都唯一。在autoCAD的两个Dwg中同一实体的句柄是相同的。实体的AcDbHandle可以随dwg文件被保存,所以即使dwg未被cad打开,也可以根据句柄搜索dwg文件获取对象信息.</li><li>AcDbObject对象指针:当一个对象被打开后,AutoCAD会返回指向AcDbObject或其派生类型的应该c++指针,然后就可以采用标准c++类对象的方式对实体进行操作.</li><li>ads_name：AutoCAd定义的一个数据类型.一般用来保存用户交互过程中成功选择实体的节点,ads_name是不稳定的，仅当你在一旦退出 AutoCAD 或者切换到另一个图形，ads_name 就会丢失.</li></ol><h2 id="ID、指针、句柄和-ads-name-之间具有下面的转换关系："><a href="#ID、指针、句柄和-ads-name-之间具有下面的转换关系：" class="headerlink" title="ID、指针、句柄和 ads_name 之间具有下面的转换关系："></a>ID、指针、句柄和 ads_name 之间具有下面的转换关系：</h2><ol><li>从 AcDbObjectId 到AcDbObject对象:acdbOpenAcDbObject() 或者 acdbOpenObject() 。</li><li>从 AcDbObject 对象到 AcDbObjectId ：所有的数据库常驻对象都继承自 AcDbObjectId 函数能获得所指向对象的 ID。</li><li>从AcDbHandle 到 AcDbObjectId ： AcDbDatabase::getAcDbObjectId();</li><li>从 AcDbObjectId 到AcDbHandle ：AcDbObjectId::handle() 。</li><li>从 AcDbObject 到AcDbHandle ：AcDbObject::getAcDbHandle().</li><li>从 ads_name 到 AcDbObjectId ：使用全局函数 acdbGetObjectId()。</li><li>从 AcDbObjectId 到 ads_name ：使用全局函数 acdbGetAdsName()。</li></ol>]]></content>
      
      
      <categories>
          
          <category> AutoCad </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cad </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致敬2020，重启2021</title>
      <link href="/article/2020-2021/"/>
      <url>/article/2020-2021/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><a href="https://sogrey.top/article/%E5%86%8D%E8%A7%812018%EF%BC%8C%E4%BD%A0%E5%A5%BD2019/">再见2018，你好2019</a></li><li><a href="https://sogrey.top/article/zj2019-zw2020/">总结2019，展望2020</a></li></ul><hr><p>今年注定将是不平凡的一年，自年初，噩耗传来，一场疫情打破了我们所有人的生活，眼看年底将至，我们依旧还能听闻有关疫情的讯息。这一年，国人展现出无比团结，一城遭苦难，举国来驰援。最艰难的时刻已经渡过，2021已然在路上。</p><span id="more"></span><h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><p>比起去年，今年的工作总结就简单太多了，自2月开始，加入到公司CAD引擎组，到年底几乎全年主要的任务中心就放在了引擎开发上。截止目前引擎已经历了三次大的版本更新，从最早的单图元mesh，到现在应用分层分块实例化应运，对于图纸加载素对有了很大提升，支持更大图纸。直到现在，我们又到了一个瓶颈期，需要支持更大图纸、更少的数据交互以及更快的渲染速度，这次将是个更大的挑战，我们开始考虑重新定义数据结构已优化数据传输速度，这项工作已经在进行中了。</p><p>由于一些工作上的需求，最近也参与修改和完善了一些Java的项目，我本Android出身，Java略懂皮毛，参与修改 Java Springboot 项目，开始是没什么信心的，但接触了下也得到了同事的指导，也就慢慢上手了。重新接触Java，成功上手并未接触过的Springboot觉得还是蛮有成就感。</p><h2 id="个人提升"><a href="#个人提升" class="headerlink" title="个人提升"></a>个人提升</h2><p>今年由于受到疫情影响、工作内容也很充实，也就无暇太多的顾及其他方面的知识和技能。要说的其他方面的知识与技能也是有的：</p><ol><li>华为鸿蒙（HarmonyOS）开源，自己也上手写过很简单的demo，追过华为开发者联盟推出的共14期的公开课程，对于分布式系统也算是有所了解。</li><li>参与Java Springboot项目，发现这是个很好用的框架，为此我查过很多资料，虽然大多是工作需求驱使，但在此过程中也学到很多，也是个不错的方向。</li><li>由于Java项目要同时运行在Windows和Linux两个平台上，Linux接触并不多，为了测试项目成果，也查阅了不少Linux知识、命令，也算是有收获的。</li><li>可能也是受其他博主影响，这一年也尽量的每天学习和记录有关前端、Android开发等方面知识并记录，有的可能是实际应用终于到的问题或者在查阅资料时看到比较好的经验总结，也算是站在很多个巨人的肩上眺望远方。</li></ol><h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><p>亲爱的宝贝闺女终于上幼儿园了，虽然受疫情影响，晚上一学期。每天从微信群中看到老师发布的幼儿动态，宝贝状态比我预期的要好不少，不哭不闹。希望两个宝贝都能健康成长、快快乐乐。</p><h2 id="未来期许"><a href="#未来期许" class="headerlink" title="未来期许"></a>未来期许</h2><p>对于将来的期许，眼下，还是以目前手里的工作为主，CAD引擎到了瓶颈期，需要一次跨越，我们将为此努力。除此外还有:</p><ol><li>去年提到要考学驾照，今年得空去考了科一，但后续由于工作原因（其实是因为懒）没有继续练车再考，2021年完成剩余的科目。</li><li>坚持每日学习和记录至少一项知识点</li><li>鸿蒙的开源也让我试着成为一个鸿蒙开发者，毕竟有Android的开发经验，这样的过渡应该不难。</li><li>继续学习一些其他的编程语言，像Typescript、Es6+、Flutter等</li><li>…</li></ol>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java调用shell脚本</title>
      <link href="/article/java%E8%B0%83%E7%94%A8shell%E8%84%9A%E6%9C%AC/"/>
      <url>/article/java%E8%B0%83%E7%94%A8shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>需要bash环境下执行，Windows推荐安装Git For Windows（<a href="https://github.com/waylau/git-for-win">国内下载站</a>），Linux下默认就是bash。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">systemType</span> <span class="operator">=</span> <span class="string">&quot;linux&quot;</span>;<span class="comment">//区分Linux和Windows</span></span><br><span class="line"><span class="type">String</span> <span class="variable">tifShPath</span> <span class="operator">=</span> <span class="string">&quot;F:/test.sh&quot;</span>;<span class="comment">// shell脚本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (systemType.equalsIgnoreCase(<span class="string">&quot;linux&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;chmod 755 -R &quot;</span> + tifShPath);<span class="comment">//获取可读可执行权限</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">cmd = tifShPath;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// windows</span></span><br><span class="line">cmd = <span class="string">&quot;bash &quot;</span> + tifShPath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Process</span> <span class="variable">child</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> child.getInputStream();</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">child.waitFor();</span><br><span class="line"><span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">bufferedReader.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/sayoko06/article/details/88797838">java调用shell脚本及注意事项</a></li><li><a href="https://blog.csdn.net/qq_39477018/article/details/88849003">java调用shell文件、远程调用shell文件并且传入参数、.sh文件执行的几种方法</a></li><li><a href="https://blog.csdn.net/dream_broken/article/details/54289008">java调用shell脚本并传递参数</a></li><li><a href="https://www.yuque.com/docs/share/86e3fa77-39f5-4362-b809-a3c161370bcc">【大数据】Shell任务在Java中的执行</a></li><li><a href="https://www.jianshu.com/p/10f4771909f9">使用ProcessBuilder执行命令行操作</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 项目瘦身</title>
      <link href="/article/SpringBoot%E9%A1%B9%E7%9B%AE%E7%98%A6%E8%BA%AB/"/>
      <url>/article/SpringBoot%E9%A1%B9%E7%9B%AE%E7%98%A6%E8%BA%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们发现Spring Boot用起来非常方便，但是即使新建的空项目打包jar之后也要14M大小，将jar包解压发现<code>BOOT-INF/lib</code>大小就占到13.6M.我们对Springboot打包jar瘦身就是从包内将 <code>lib</code> 分离出来，因为对于项目而言架构确定后，引入的三方jar包基本就不会变动了；要是有新增库那就将新增的三方库分离出来就好啦。</p><span id="more"></span><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FSpringboot-lib-size.png"></p><h2 id="分离出lib依赖三方库"><a href="#分离出lib依赖三方库" class="headerlink" title="分离出lib依赖三方库"></a>分离出lib依赖三方库</h2><p>pom.xml文件的build节点 可能是如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>top.sogrey.HelloApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分离前我们需要通过常用的打包命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Maven ckean</span><br><span class="line">Maven install</span><br></pre></td></tr></table></figure><p>从<code>target</code>目录下拿到完整的jar包（14M）,解压，将<code>BOOT-INF/lib</code>另存。</p><h2 id="修改pom-xml配置，编译出不带-lib-文件夹的Jar包"><a href="#修改pom-xml配置，编译出不带-lib-文件夹的Jar包" class="headerlink" title="修改pom.xml配置，编译出不带 lib 文件夹的Jar包"></a>修改pom.xml配置，编译出不带 lib 文件夹的Jar包</h2><p>修改后的pom.xml文件的build节点:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>top.sogrey.HelloApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nothing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次执行打包命令得到不带lib的jar包，大小才98k.</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FSpringboot-lib-size2.png"></p><p>这时将之前分离出来的lib目录与不含lib的jar放在同一目录下,最终目录结构如下：</p><p>最终目录文件结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── lib   #lib文件夹  </span><br><span class="line">|  ├─ classmate-1.3.3.jar</span><br><span class="line">|  └─ ... # 其他jar包</span><br><span class="line">└── SpringBootDemo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -Dloader.path=lib -jar SpringBootDemo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FSpringboot-lib-size3.png"></p><p>完整的jar包启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar SpringBootDemo-0.0.1-SNAPSHOT-FULL.jar</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/9CuGyrF5EGigxFmOhZtC4g">Spring Boot 项目瘦身指南，瘦到不可思议！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot跨域请求</title>
      <link href="/article/Springboot%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/article/Springboot%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring Boot部署起来可以很简单，但是只要部署在网络就存在跨域问题，Springboot添加跨域请求的处理也有好几种方法。</p><span id="more"></span><h2 id="增加注解-CrossOrigin"><a href="#增加注解-CrossOrigin" class="headerlink" title="增加注解@CrossOrigin"></a>增加注解@CrossOrigin</h2><p>在需要跨域的类或方法上方增加注解<code>@CrossOrigin</code>，只针对单个方法或类有效，适用于只有个别方法需要跨域的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">// 标明这是一个SpringMVC的Controller控制器</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持跨域请求的-Configuration"><a href="#支持跨域请求的-Configuration" class="headerlink" title="支持跨域请求的 Configuration"></a>支持跨域请求的 Configuration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理AJAX请求跨域的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ORIGINS[] = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span> &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>).allowedOrigins(<span class="string">&quot;*&quot;</span>).allowCredentials(<span class="literal">true</span>).allowedMethods(ORIGINS)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨域过滤器"><a href="#跨域过滤器" class="headerlink" title="跨域过滤器"></a>跨域过滤器</h2><p>此法亲测可用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagementApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ManagementApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CorsConfiguration <span class="title function_">buildConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨域过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, buildConfig()); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以单独出来一个加注解<code>@Configuration</code>的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> CorsConfiguration <span class="title function_">buildConfig</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();  </span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>); <span class="comment">// 1  </span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>); <span class="comment">// 2  </span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>); <span class="comment">// 3  </span></span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();  </span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, buildConfig()); <span class="comment">// 4  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理跨域问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OriginFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res,</span></span><br><span class="line"><span class="params">            FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS, DELETE,PUT&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://my.oschina.net/u/2351298/blog/1813710">Springboot 处理跨域请求</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot支持HTTPS</title>
      <link href="/article/SpringBoot%E6%94%AF%E6%8C%81HTTPS/"/>
      <url>/article/SpringBoot%E6%94%AF%E6%8C%81HTTPS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里讲的是 Spring Boot 内嵌式 Server 打 jar 包运行的方式，打 WAR 包部署的就不存在要 Spring Boot 支持 HTTPS 了，只需去外部对应的 Server 配置。</p><span id="more"></span><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p><code>HTTPS</code> （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 在HTTP 的基础下加入<a href="https://baike.baidu.com/item/SSL/320778">SSL</a> 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。 HTTPS 存在不同于 HTTP 的默认端口及一个加密/身份验证层（在 HTTP与 <a href="https://baike.baidu.com/item/TCP/33012">TCP</a> 之间）。这个系统提供了身份验证与加密通讯方法。它被广泛用于万维网上安全敏感的通讯，例如交易支付等方面。</p><h2 id="SpringBoot支持Https"><a href="#SpringBoot支持Https" class="headerlink" title="SpringBoot支持Https"></a>SpringBoot支持Https</h2><h3 id="第一步：获取证书"><a href="#第一步：获取证书" class="headerlink" title="第一步：获取证书"></a>第一步：获取证书</h3><p>要获取一个https证书，本地我们可以借助 Java 自带的 JDK 管理工具 keytool 来生成一个免费的 https 证书，也可以到腾讯云免费申请一个。</p><p>使用JDK生成，首先需要安装JDK，配置好java环境变量。</p><p><code>cmd</code>进入命令行输入<code>keytool</code>回车有输出不报错就行。</p><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> spring -keypass 123456 -storetype PKCS12 -keyalg RSA -keysize 2048 -validity 365 -keystore E:/spring.keystore -storepass 654321</span><br></pre></td></tr></table></figure><blockquote><p>E:/spring.keystore  -&gt; E:/spring.p12 ??</p></blockquote><p>其中几个参数的解释如下：</p><ol><li><code>-alias</code> 指定别名</li><li><code>-keypass</code>此别名对应密码</li><li><code>-storetype</code> 指定密钥仓库类型</li><li><code>-keyalg</code> 生证书的算法名称，RSA是一种非对称加密算法</li><li><code>-keysize</code> 证书大小</li><li><code>-keystore</code> 生成的证书文件的存储路径</li><li><code>-validity</code> 证书的有效期</li></ol><p>依次填写证书相关的信息:</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fkeytool%E7%94%9F%E6%88%90ssl%E8%AF%81%E4%B9%A6.png" alt="keytool生成ssl证书"></p><p>在E盘下就生成一个文件<code>spring.keystore</code>。</p><h3 id="第二步：springboot项目中引入https"><a href="#第二步：springboot项目中引入https" class="headerlink" title="第二步：springboot项目中引入https"></a>第二步：springboot项目中引入https</h3><p>将刚刚生成的证书文件拷贝到项目中的<code>resources</code>目录中，修改<code>application.properties</code>文件，添加<code>HTTPS</code>支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.ssl.key-store=spring.keystore</span><br><span class="line">server.ssl.key-store-password=654321</span><br><span class="line">server.ssl.keyStoreType=PKCS12</span><br><span class="line">server.ssl.keyAlias:spring</span><br></pre></td></tr></table></figure><p>配置完成后就启动可以启动项目了。</p><p>部署完成后使用工具：<a href="https://infinisign.com/tools/sslcheck/?lang=cn">SSL证书验证,SSL检测安装工具</a> 来检查SSL是否部署成功。</p><h2 id="配置好Https兼容http"><a href="#配置好Https兼容http" class="headerlink" title="配置好Https兼容http"></a>配置好Https兼容http</h2><p>配置好Https发现http就不好用了，此时访问http地址是不成功的，如果需要支持支持HTTP重定向到HTTPS，需要在配置类中配置一个<code>TomcatEmbeddedServletContainerFactory</code> bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title function_">servletContainer</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">TomcatEmbeddedServletContainerFactory</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatEmbeddedServletContainerFactory</span>() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessContext</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="type">SecurityConstraint</span> <span class="variable">securityConstraint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityConstraint</span>();</span><br><span class="line">        securityConstraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);</span><br><span class="line">        <span class="type">SecurityCollection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityCollection</span>();</span><br><span class="line">        collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        securityConstraint.addCollection(collection);</span><br><span class="line">        context.addConstraint(securityConstraint);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  tomcat.addAdditionalTomcatConnectors(initiateHttpConnector());</span><br><span class="line">  <span class="keyword">return</span> tomcat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Connector <span class="title function_">initiateHttpConnector</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">  connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">  connector.setPort(<span class="number">8081</span>);</span><br><span class="line">  connector.setSecure(<span class="literal">false</span>);</span><br><span class="line">  connector.setRedirectPort(<span class="number">8080</span>);</span><br><span class="line">  <span class="keyword">return</span> connector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问<a href="http://localhost:8081/">http://localhost:8081</a> 会自动跳转到<a href="https://localhost:8080/">https://localhost:8080</a>  表明配置成功。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/u013322876/article/details/95594859">Spring Boot 支持 HTTPS 如此简单，So easy!</a></li><li><a href="https://zhuanlan.zhihu.com/p/31385073">Spring Boot 使用SSL-HTTPS</a></li><li><a href="https://www.cnblogs.com/huanzi-qch/p/12133872.html">SpringBoot系列——启用https</a></li><li><a href="https://www.jianshu.com/p/8d4aba3b972d">SpringBoot配置HTTPS,并实现HTTP访问自动转HTTPS访问</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实现定时任务</title>
      <link href="/article/SpringBoot%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/article/SpringBoot%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring 3.0 版本之后自带定时任务，提供了@EnableScheduling注解和@Scheduled注解来实现定时任务功能。</p><p>使用SpringBoot创建定时任务非常简单，目前主要有以下三种创建方式：</p><ol><li>基于注解（@Scheduled）</li><li>基于接口（SchedulingConfigurer） 前者相信大家都很熟悉，但是实际使用中我们往往想从数据库中读取指定时间来动态执行定时任务，这时候基于接口的定时任务就派上用场了。</li><li>基于注解设定多线程定时任务</li></ol><span id="more"></span><h2 id="基于注解（-Scheduled）"><a href="#基于注解（-Scheduled）" class="headerlink" title="基于注解（@Scheduled）"></a>基于注解（@Scheduled）</h2><h3 id="Scheduled注解和-EnableScheduling注解的使用"><a href="#Scheduled注解和-EnableScheduling注解的使用" class="headerlink" title="@Scheduled注解和@EnableScheduling注解的使用"></a>@Scheduled注解和@EnableScheduling注解的使用</h3><p>基于注解@Scheduled默认为单线程，开启多个任务时，任务的执行时机会受上一个任务执行时间的影响。</p><ul><li><code>@EnableScheduling</code>注解： 在配置类上使用，开启计划任务的支持（类上）。</li><li><code>@Scheduled</code>注解： 来声明这是一个任务，包括 <code>cron</code>，<code>fixDelay</code>，<code>fixRate</code> 等类型（方法上，需先开启计划任务的支持）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">// 开启定时任务</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 程序主入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的定时任务，每5秒执行一次：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask</span> &#123;</span><br><span class="line"><span class="meta">@Scheduled(cron=&quot;0/5 * *  * * ? &quot;)</span>   <span class="comment">//每5秒执行一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>); <span class="comment">//设置日期格式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;定时任务，当前时刻： &quot;</span> + df.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动执行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定时任务，当前时刻： 2020-12-23 23:37:30</span><br><span class="line">定时任务，当前时刻： 2020-12-23 23:37:35</span><br><span class="line">定时任务，当前时刻： 2020-12-23 23:37:40</span><br><span class="line">定时任务，当前时刻： 2020-12-23 23:37:45</span><br><span class="line">定时任务，当前时刻： 2020-12-23 23:37:50</span><br><span class="line">定时任务，当前时刻： 2020-12-23 23:37:55</span><br><span class="line">定时任务，当前时刻： 2020-12-23 23:38:00</span><br></pre></td></tr></table></figure><h3 id="Scheduled注解参数"><a href="#Scheduled注解参数" class="headerlink" title="@Scheduled注解参数"></a><code>@Scheduled</code>注解参数</h3><p>先来看下 Scheduled 源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2018 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.scheduling.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An annotation that marks a method to be scheduled. Exactly one of</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #cron()&#125;, &#123;<span class="doctag">@link</span> #fixedDelay()&#125;, or &#123;<span class="doctag">@link</span> #fixedRate()&#125;</span></span><br><span class="line"><span class="comment"> * attributes must be specified.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The annotated method must expect no arguments. It will typically have</span></span><br><span class="line"><span class="comment"> * a &#123;<span class="doctag">@code</span> void&#125; return type; if not, the returned value will be ignored</span></span><br><span class="line"><span class="comment"> * when called through the scheduler.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Processing of &#123;<span class="doctag">@code</span> <span class="doctag">@Scheduled</span>&#125; annotations is performed by</span></span><br><span class="line"><span class="comment"> * registering a &#123;<span class="doctag">@link</span> ScheduledAnnotationBeanPostProcessor&#125;. This can be</span></span><br><span class="line"><span class="comment"> * done manually or, more conveniently, through the &#123;<span class="doctag">@code</span> &lt;task:annotation-driven/&gt;&#125;</span></span><br><span class="line"><span class="comment"> * element or @&#123;<span class="doctag">@link</span> EnableScheduling&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This annotation may be used as a &lt;em&gt;meta-annotation&lt;/em&gt; to create custom</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;composed annotations&lt;/em&gt; with attribute overrides.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark Fisher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chris Beams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableScheduling</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ScheduledAnnotationBeanPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Schedules</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(Schedules.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scheduled &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A special cron expression value that indicates a disabled trigger: &#123;<span class="doctag">@value</span>&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is primarily meant for use with $&#123;...&#125; placeholders, allowing for</span></span><br><span class="line"><span class="comment"> * external disabling of corresponding scheduled methods.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">String</span> <span class="variable">CRON_DISABLED</span> <span class="operator">=</span> <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A cron-like expression, extending the usual UN*X definition to include triggers</span></span><br><span class="line"><span class="comment"> * on the second as well as minute, hour, day of month, month and day of week.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;E.g. &#123;<span class="doctag">@code</span> &quot;0 * * * * MON-FRI&quot;&#125; means once per minute on weekdays</span></span><br><span class="line"><span class="comment"> * (at the top of the minute - the 0th second).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The special value &#123;<span class="doctag">@link</span> #CRON_DISABLED &quot;-&quot;&#125; indicates a disabled cron trigger,</span></span><br><span class="line"><span class="comment"> * primarily meant for externally specified values resolved by a $&#123;...&#125; placeholder.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an expression that can be parsed to a cron schedule</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.scheduling.support.CronSequenceGenerator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">cron</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A time zone for which the cron expression will be resolved. By default, this</span></span><br><span class="line"><span class="comment"> * attribute is the empty String (i.e. the server&#x27;s local time zone will be used).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a zone id accepted by &#123;<span class="doctag">@link</span> java.util.TimeZone#getTimeZone(String)&#125;,</span></span><br><span class="line"><span class="comment"> * or an empty String to indicate the server&#x27;s default time zone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.scheduling.support.CronTrigger#CronTrigger(String, java.util.TimeZone)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.util.TimeZone</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">zone</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute the annotated method with a fixed period in milliseconds between the</span></span><br><span class="line"><span class="comment"> * end of the last invocation and the start of the next.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the delay in milliseconds</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">fixedDelay</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute the annotated method with a fixed period in milliseconds between the</span></span><br><span class="line"><span class="comment"> * end of the last invocation and the start of the next.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the delay in milliseconds as a String value, e.g. a placeholder</span></span><br><span class="line"><span class="comment"> * or a &#123;<span class="doctag">@link</span> java.time.Duration#parse java.time.Duration&#125; compliant value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.2.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">fixedDelayString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute the annotated method with a fixed period in milliseconds between</span></span><br><span class="line"><span class="comment"> * invocations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the period in milliseconds</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">fixedRate</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute the annotated method with a fixed period in milliseconds between</span></span><br><span class="line"><span class="comment"> * invocations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the period in milliseconds as a String value, e.g. a placeholder</span></span><br><span class="line"><span class="comment"> * or a &#123;<span class="doctag">@link</span> java.time.Duration#parse java.time.Duration&#125; compliant value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.2.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">fixedRateString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Number of milliseconds to delay before the first execution of a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #fixedRate()&#125; or &#123;<span class="doctag">@link</span> #fixedDelay()&#125; task.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the initial delay in milliseconds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">initialDelay</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Number of milliseconds to delay before the first execution of a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #fixedRate()&#125; or &#123;<span class="doctag">@link</span> #fixedDelay()&#125; task.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the initial delay in milliseconds as a String value, e.g. a placeholder</span></span><br><span class="line"><span class="comment"> * or a &#123;<span class="doctag">@link</span> java.time.Duration#parse java.time.Duration&#125; compliant value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.2.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">initialDelayString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cron-参数接收一个cron表达式，cron表达式是一个字符串，字符串以5或6个空格隔开，分开共6或7个域，每一个域代表一个含义。"><a href="#cron-参数接收一个cron表达式，cron表达式是一个字符串，字符串以5或6个空格隔开，分开共6或7个域，每一个域代表一个含义。" class="headerlink" title="cron 参数接收一个cron表达式，cron表达式是一个字符串，字符串以5或6个空格隔开，分开共6或7个域，每一个域代表一个含义。"></a><code>cron</code> 参数接收一个cron表达式，cron表达式是一个字符串，字符串以5或6个空格隔开，分开共6或7个域，每一个域代表一个含义。</h4><p>cron 表达式语法：</p><p>格式：**[秒] [分] [小时] [日] [月] [周] [年]**</p><table><thead><tr><th align="left">序号</th><th align="left">说明</th><th align="left">是否必填</th><th align="left">允许填写的值</th><th align="left">允许的通配符</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">秒</td><td align="left">是</td><td align="left">0-59</td><td align="left">, - * /</td></tr><tr><td align="left">2</td><td align="left">分</td><td align="left">是</td><td align="left">0-59</td><td align="left">, - * /</td></tr><tr><td align="left">3</td><td align="left">小时</td><td align="left">是</td><td align="left">0-23</td><td align="left">, - * /</td></tr><tr><td align="left">4</td><td align="left">日</td><td align="left">是</td><td align="left">1-31</td><td align="left">, - * ? / L W</td></tr><tr><td align="left">5</td><td align="left">月</td><td align="left">是</td><td align="left">1-12 or JAN-DEC</td><td align="left">, - * /</td></tr><tr><td align="left">6</td><td align="left">周</td><td align="left">是</td><td align="left">1-7 or SUN-SAT</td><td align="left">, - * ? / L #</td></tr><tr><td align="left">7</td><td align="left">年</td><td align="left">否</td><td align="left">empty 或 1970-2099</td><td align="left">, - * /</td></tr></tbody></table><p>特殊字符说明：</p><ul><li><strong>秒</strong>  允许值范围: 0~59 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常<ul><li><code>*</code>  每隔1秒钟触发</li><li><code>,</code>  在指定的秒数触发，比如”0,15,45”代表0秒、15秒和45秒时触发任务</li><li><code>-</code>  在指定的范围内触发，比如”25-45”代表从25秒开始触发到45秒结束触发，每隔1秒触发1次</li><li><code>/</code>  代表触发步进(step)，”/“前面的值代表初始值(“<em>“等同”0”)，后面的值代表偏移量，比如”0/20”或者”</em>/20”代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；”5/20”代表5秒触发1次，25秒触发1次，45秒触发1次；”10-45/20”代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次</li></ul></li><li><strong>分钟</strong>  允许值范围: 0~59 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常<ul><li><code>*</code>  代表每隔1分钟触发</li><li><code>,</code>  代表在指定的分钟触发，比如”10,20,40”代表10分钟、20分钟和40分钟时触发任务</li><li><code>-</code>  代表在指定的范围内触发，比如”5-30”代表从5分钟开始触发到30分钟结束触 发，每隔1分钟触发</li><li><code>/</code>  代表触发步进(step)，”/“前面的值代表初始值(“<em>“等同”0”)，后面的值代表偏移量，比如”0/25”或者”</em>/25”代表从0分钟开始，每隔25分钟触发1次，即0分钟触发1次，第25分钟触发1次，第50分钟触发1次；”5/25”代表5分钟触发1次，30分钟触发1次，55分钟触发1次；”10-45/20”代表在[10,45]内步进20分钟命中的时间点触发，即10分钟触发1次，30分钟触发1次</li></ul></li><li><strong>小时</strong>  允许值范围: 0~23 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常<ul><li><code>*</code>  代表每隔1小时触发</li><li><code>,</code>  代表在指定的时间点触发，比如”10,20,23”代表10点钟、20点钟和23点触发任务</li><li><code>-</code>  代表在指定的时间段内触发，比如”20-23”代表从20点开始触发到23点结束触发，每隔1小时触发</li><li><code>/</code>  代表触发步进(step)，”/“前面的值代表初始值(“<em>“等同”0”)，后面的值代表偏移量，比如”0/1”或者”</em>/1”代表从0点开始触发，每隔1小时触发1次；”1/2”代表从1点开始触发，以后每隔2小时触发一次</li></ul></li><li><strong>日期</strong>  允许值范围: 1~12 (JAN-DEC),不允许为空值，若值不合法，调度器将抛出SchedulerException异常<ul><li><code>*</code>  代表每个月都触发</li><li><code>,</code>  代表在指定的月份触发，比如”1,6,12”代表1月份、6月份和12月份触发任务</li><li><code>-</code>  代表在指定的月份范围内触发，比如”1-6”代表从1月份开始触发到6月份结束触发，每隔1个月触发</li><li><code>/</code>  代表触发步进(step)，”/“前面的值代表初始值(“<em>“等同”1”)，后面的值代表偏移量，比如”1/2”或者”</em>/2”代表从1月份开始触发，每隔2个月触发1次；”6/6”代表从6月份开始触发，以后每隔6个月触发一次；”1-6/12”表达式意味着每年1月份触发</li></ul></li><li><strong>星期</strong>  允许值范围: 1~7 (SUN-SAT),1代表星期天(一星期的第一天)，以此类推，7代表星期六(一星期的最后一天)，不允许为空值，若值不合法，调度器将抛出SchedulerException异常<ul><li><code>*</code>  代表每星期都触发</li><li><code>,</code>  代表在指定的星期约定触发，比如”1,3,5”代表星期天、星期二和星期四触发</li><li><code>-</code>  代表在指定的星期范围内触发，比如”2-4”代表从星期一开始触发到星期三结束触发，每隔1天触发</li><li><code>/</code>  代表触发步进(step)，”/“前面的值代表初始值(“<em>“等同”1”)，后面的值代表偏移量，比如”1/3”或者”</em>/3”代表从星期天开始触发，每隔3天触发1次；”1-5/2”表达式意味着在[1,5]范围内，每隔2天触发，即星期天、星期二、星期四触发</li><li><code>?</code>  与{日期}互斥，即意味着若明确指定{日期}触发，则表示{星期}无意义，以免引起冲突和混乱</li><li><code>L</code>  如果{星期}占位符如果是”L”，即意味着星期的的最后一天触发，即星期六触发，L= 7或者 L = SAT，因此，”5L”意味着一个月的最后一个星期四触发</li><li><code>#</code>  用来指定具体的周数，”#”前面代表星期，”#”后面代表本月第几周，比如”2#2”表示本月第二周的星期一，”5#3”表示本月第三周的星期四，因此，”5L”这种形式只不过是”#”的特殊形式而已</li></ul></li><li><strong>年份</strong>  允许值范围: 1970~2099 ,允许为空，若值不合法，调度器将抛出SchedulerException异常<ul><li><code>*</code>  代表每年都触发</li><li><code>,</code>  代表在指定的年份才触发，比如”2011,2012,2013”代表2011年、2012年和2013年触发任务</li><li><code>-</code>  代表在指定的年份范围内触发，比如”2011-2020”代表从2011年开始触发到2020年结束触发，每隔1年触发</li><li><code>/</code>  代表触发步进(step)，”/“前面的值代表初始值(“<em>“等同”1970”)，后面的值代表偏移量，比如”2011/2”或者”</em>/2”代表从2011年开始触发，每隔2年触发1次 </li></ul></li></ul><p><strong>注意：除了{日期}和{星期}可以使用”?”来实现互斥，表达无意义的信息之外，其他占位符都要具有具体的时间含义，且依赖关系为：年-&gt;月-&gt;日期(星期)-&gt;小时-&gt;分钟-&gt;秒数</strong></p><ul><li><code>*</code>字符被用来指定所有的值。如：<code>*</code>在分钟的字段域里表示“每分钟”。</li><li><code>?</code>字符只在日期域和星期域中使用。它被用来指定“非明确的值”。当你需要通过在这两个域中的一个来指定一些东西的时候，它是有用的。看下面的例子你就会明白。 月份中的日期和星期中的日期这两个元素时互斥的一起应该通过设置一个问号来表明不想设置那个字段。</li><li><code>-</code>字符被用来指定一个范围。如：“10-12”在小时域意味着“10点、11点、12点”。</li><li><code>,</code>字符被用来指定另外的值。如：“MON,WED,FRI”在星期域里表示”星期一、星期三、星期五”。</li><li><code>/</code>字符用于指定增量。如：“0/15”在秒域意思是每分钟的0，15，30和45秒。“5/15”在分钟域表示每小时的5，20，35和50。符号“<em>”在“/”前面（如：</em>/10）等价于0在“/”前面（如：0/10）。记住一条本质：表达式的每个数值域都是一个有最大值和最小值的集合，如：秒域和分钟域的集合是0-59，日期域是1-31，月份域是1-12。字符“/”可以帮助你在每个字符域中取相应的数值。如：“7/6”在月份域的时候只有当7月的时候才会触发，并不是表示每个6月。</li><li><code>L</code>是‘last’的省略写法可以表示day-of-month和day-of-week域，但在两个字段中的意思不同，例如day-of-month域中表示一个月的最后一天。如果在day-of-week域表示‘7’或者‘SAT’，如果在day-of-week域中前面加上数字，它表示一个月的最后几天，例如‘6L’就表示一个月的最后一个星期五。</li><li><code>W</code>字符只允许日期域出现。这个字符用于指定日期的最近工作日。例如：如果你在日期域中写 “15W”，表示：这个月15号最近的工作日。所以，如果15号是周六，则任务会在14号触发。如果15好是周日，则任务会在周一也就是16号触发。如果是在日期域填写“1W”即使1号是周六，那么任务也只会在下周一，也就是3号触发，“W”字符指定的最近工作日是不能够跨月份的。字符“W”只能配合一个单独的数值使用，不能够是一个数字段，如：1-15W是错误的。</li></ul><blockquote><p><code>L</code>和<code>W</code>可以在日期域中联合使用，LW表示这个月最后一周的工作日。</p></blockquote><ul><li><code>#</code>字符只允许在星期域中出现。这个字符用于指定本月的某某天。例如：“6#3”表示本月第三周的星期五（6表示星期五，3表示第三周）。“2#1”表示本月第一周的星期一。“4#5”表示第五周的星期三。</li><li><code>C</code>字符允许在日期域和星期域出现。这个字符依靠一个指定的“日历”。也就是说这个表达式的值依赖于相关的“日历”的计算结果，如果没有“日历”关联，则等价于所有包含的“日历”。如：日期域是“5C”表示关联“日历”中第一天，或者这个月开始的第一天的后5天。星期域是“1C”表示关联“日历”中第一天，或者星期的第一天的后1天，也就是周日的后一天（周一）。</li></ul><p><strong>表达式举例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;0 0 12 * * ?&quot; 每天中午12点触发</span><br><span class="line">&quot;0 15 10 ? * *&quot; 每天上午10:15触发</span><br><span class="line">&quot;0 15 10 * * ?&quot; 每天上午10:15触发</span><br><span class="line">&quot;0 15 10 * * ? *&quot; 每天上午10:15触发</span><br><span class="line">&quot;0 15 10 * * ? 2005&quot; 2005年的每天上午10:15触发</span><br><span class="line">&quot;0 * 14 * * ?&quot; 在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class="line">&quot;0 0/5 14 * * ?&quot; 在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="line">&quot;0 0/5 14,18 * * ?&quot; 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="line">&quot;0 0-5 14 * * ?&quot; 在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="line">&quot;0 10,44 14 ? 3 WED&quot; 每年三月的星期三的下午2:10和2:44触发</span><br><span class="line">&quot;0 15 10 ? * MON-FRI&quot; 周一至周五的上午10:15触发</span><br><span class="line">&quot;0 15 10 15 * ?&quot; 每月15日上午10:15触发</span><br><span class="line">&quot;0 15 10 L * ?&quot; 每月最后一日的上午10:15触发</span><br><span class="line">&quot;0 15 10 ? * 6L&quot; 每月的最后一个星期五上午10:15触发</span><br><span class="line">&quot;0 15 10 ? * 6L 2002-2005&quot; 2002年至2005年的每月的最后一个星期五上午10:15触</span><br><span class="line">&quot;0 15 10 ? * 6#3&quot; 每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure><p>在线Cron表达式生成器 : <a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></p><h2 id="基于接口SchedulingConfigurer"><a href="#基于接口SchedulingConfigurer" class="headerlink" title="基于接口SchedulingConfigurer"></a>基于接口SchedulingConfigurer</h2><p>Spring 中，创建定时任务除了使用<code>@Scheduled</code> 注解外，还可以使用 <code>SchedulingConfigurer</code>。</p><p><code>@Schedule</code> 注解有一个缺点，其定时的时间不能动态的改变，而基于 <code>SchedulingConfigurer</code> 接口的方式可以做到。<code>SchedulingConfigurer</code> 接口可以实现在<code>@Configuration</code> 类上，同时不要忘了，还需要<code>@EnableScheduling</code> 注解的支持。</p><p>该接口的实现方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span></span><br></pre></td></tr></table></figure><p>方法包含定时任务，延时任务，基于 <code>Cron</code> 表达式的任务，以及 <code>Trigger</code> 触发的任务。</p><p>下面演示了使用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.learn&quot;)</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">taskRegistrar.addFixedRateTask(() -&gt; System.out.println(<span class="string">&quot;执行定时任务1: &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>()), <span class="number">1000</span>);</span><br><span class="line"><span class="type">TriggerTask</span> <span class="variable">triggrtTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TriggerTask</span>( <span class="comment">// 任务内容.拉姆达表达式</span></span><br><span class="line">() -&gt; &#123;System.out.println(<span class="string">&quot;执行定时任务2: &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());&#125;,</span><br><span class="line"><span class="comment">// 设置触发器，这里是一个拉姆达表达式，传入的TriggerContext类型，返回的是Date类型</span></span><br><span class="line">triggerContext -&gt; &#123;</span><br><span class="line"><span class="comment">// 2.3 返回执行周期(Date)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CronTrigger</span>(<span class="string">&quot;*/2 * * * * ?&quot;</span>).nextExecutionTime(triggerContext);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">taskRegistrar.addTriggerTask(triggrtTask);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的，<code>SchedulingConfigurer</code> 使用的也是单线程的方式，如果需要配置多线程，则需要指定 <code>PoolSize</code>，加入如下代码即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line"><span class="type">ThreadPoolTaskScheduler</span> <span class="variable">taskScheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">taskScheduler.setPoolSize(<span class="number">10</span>);</span><br><span class="line">taskScheduler.initialize();</span><br><span class="line">taskRegistrar.setTaskScheduler(taskScheduler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态修改定时规则</p><h2 id="基于注解设定多线程定时任务"><a href="#基于注解设定多线程定时任务" class="headerlink" title="基于注解设定多线程定时任务"></a>基于注解设定多线程定时任务</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/pan_junbiao/article/details/109399280">SpringBoot使用@Scheduled注解实现定时任务</a></li><li><a href="https://www.jianshu.com/p/e9ce1a7e1ed1">Cron表达式的详细用法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring boot </tag>
            
            <tag> Scheduled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot注解简介</title>
      <link href="/article/SpringBoot%E6%B3%A8%E8%A7%A3%E7%AE%80%E4%BB%8B/"/>
      <url>/article/SpringBoot%E6%B3%A8%E8%A7%A3%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用注解的优势：</p><ol><li>采用纯java代码，不在需要配置繁杂的xml文件</li><li>在配置中也可享受面向对象带来的好处</li><li>类型安全对重构可以提供良好的支持</li><li>减少复杂配置文件的同时亦能享受到springIoC容器提供的功能</li></ol><span id="more"></span><h2 id="一、注解-annotations-列表"><a href="#一、注解-annotations-列表" class="headerlink" title="一、注解(annotations)列表"></a>一、注解(annotations)列表</h2><p>1、<code>@SpringBootApplication</code></p><p>包含了<code>@ComponentScan</code>、<code>@Configuration</code>和<code>@EnableAutoConfiguration</code>注解。<br>其中<code>@ComponentScan</code>让<code>Spring Boot</code>扫描到<code>Configuration</code>类并把它加入到程序上下文。</p><p>2、<code>@ComponentScan</code></p><p>组件扫描，可自动发现和装配一些<code>Bean</code>。</p><p>3、<code>@Configuration</code></p><p>等同于<code>Spring</code>的<code>XML</code>配置文件；使用<code>Java</code>代码可以检查类型安全。</p><p>4、<code>@EnableAutoConfiguration</code></p><p>自动配置</p><p>5、<code>@RestController</code></p><p>该注解是<code>@Controller</code>和<code>@ResponseBody</code>的合集,表示这是个控制器<code>Bean</code>,并且是将函数的返回值直接填入<code>HTTP</code>响应体中,是<code>REST</code>风格的控制器。</p><p>6、<code>@Autowired</code></p><p>自动导入。</p><p>7、<code>@PathVariable</code></p><p>获取参数。</p><p>8、<code>@JsonBackReference</code></p><p>解决嵌套外链问题。</p><p>9、<code>@RepositoryRestResourcepublic</code></p><p>配合spring-boot-starter-data-rest使用。</p><h2 id="二、注解-annotations-详解"><a href="#二、注解-annotations-详解" class="headerlink" title="二、注解(annotations)详解"></a>二、注解(annotations)详解</h2><p>1、<code>@SpringBootApplication</code>：申明让<code>Spring Boot</code>自动给程序进行必要的配置，这个配置等同于：<code>@Configuration</code> ，<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 三个配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan</span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、<code>@ResponseBody</code>：表示该方法的返回结果直接写入<code>HTTP Response Body</code>中，一般在异步获取数据时使用，用于构建<code>RESTful</code>的<code>api</code>。</p><p>在使用<code>@RequestMapping</code>后，返回值通常解析为跳转路径，加上<code>@ResponseBody</code>后返回结果不会被解析为跳转路径，而是直接写入<code>HTTP Response Body</code>中。</p><p>比如异步获取<code>json</code>数据，加上<code>@ResponseBody</code>后，会直接返回<code>json</code>数据。</p><p>该注解一般会配合<code>@RequestMapping</code>一起使用。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(“/test”)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String test()&#123;</span><br><span class="line">    return ”ok”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、<code>@Controller</code>：用于定义控制器类，在<code>spring</code> 项目中由控制器负责将用户发来的<code>URL</code>请求转发到对应的服务接口（<code>service</code>层）</p><p>一般这个注解在类中，通常方法需要配合注解<code>@RequestMapping</code>。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(“/demoInfo”)</span><br><span class="line">publicclass DemoController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DemoInfoService demoInfoService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String hello(Map map)&#123;</span><br><span class="line">        System.out.println(&quot;DemoController.hello()&quot;);</span><br><span class="line">        map.put(&quot;hello&quot;,&quot;from TemplateController.helloHtml&quot;);</span><br><span class="line">        // 会使用hello.html或者hello.ftl模板进行渲染显示.</span><br><span class="line">        return&quot;/hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、<code>@RestController</code>：用于标注控制层组件(如<code>struts</code>中的<code>action</code>)，<code>@ResponseBody</code>和<code>@Controller</code>的合集。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(“/demoInfo2”)</span><br><span class="line">publicclass DemoController2 &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public String test()&#123;</span><br><span class="line">        return&quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、<code>@RequestMapping</code>：提供路由信息，负责<code>URL</code>到<code>Controller</code>中的具体函数的映射。</p><p>6、<code>@EnableAutoConfiguration</code>：<code>Spring Boot</code>自动配置（<code>auto-configuration</code>）：尝试根据你添加的<code>jar</code>依赖自动配置你的<code>Spring</code>应用。</p><p>例如，如果你的<code>classpath</code>下存在HSQLDB，并且你没有手动配置任何数据库连接<code>beans</code>，那么我们将自动配置一个内存型（<code>in-memory</code>）数据库”。</p><p>你可以将<code>@EnableAutoConfiguration</code>或者<code>@SpringBootApplication</code>注解添加到一个<code>@Configuration</code>类上来选择自动配置。</p><p>如果发现应用了你不想要的特定自动配置类，你可以使用<code>@EnableAutoConfiguration</code>注解的排除属性来禁用它们。</p><p>搜索Java知音公众号，回复“后端面试”，送你一份Java面试题宝典.pdf</p><p>7、<code>@ComponentScan</code>：表示将该类自动发现扫描组件。</p><p>个人理解相当于，如果扫描到有<code>@Component</code>、<code>@Controller</code>、<code>@Service</code>等这些注解的类，并注册为<code>Bean</code>，可以自动收集所有的<code>Spring</code>组件，包括<code>@Configuration</code>类。</p><p>我们经常使用<code>@ComponentScan</code>注解搜索<code>beans</code>，并结合<code>@Autowired</code>注解导入。可以自动收集所有的<code>Spring</code>组件，包括<code>@Configuration</code>类。</p><p>如果没有配置的话，<code>Spring Boot</code>会扫描启动类所在包下以及子包下的使用了<code>@Service</code>、<code>@Repository</code>等注解的类。</p><p>8、<code>@Configuration</code>：相当于传统的<code>xml</code>配置文件，如果有些第三方库需要用到<code>xml</code>文件，建议仍然通过<code>@Configuration</code>类作为项目的配置主类——可以使用<code>@ImportResource</code>注解加载<code>xml</code>配置文件。</p><p>9、<code>@Import</code>：用来导入其他配置类。</p><p>10、<code>@ImportResource</code>：用来加载<code>xml</code>配置文件。</p><p>11、<code>@Autowired</code>：自动导入依赖的<code>bean</code></p><p>12、<code>@Service</code>：一般用于修饰<code>service</code>层的组件</p><p>13、<code>@Repository</code>：使用<code>@Repository</code>注解可以确保<code>DAO</code>或者<code>repositories</code>提供异常转译，这个注解修饰的<code>DAO</code>或者<code>repositories</code>类会被<code>ComponetScan</code>发现并配置，同时也不需要为它们提供<code>XML</code>配置项。</p><p>14、<code>@Bean</code>：用<code>@Bean</code>标注方法等价于<code>XML</code>中配置的<code>bean</code>。</p><p>15、<code>@Value</code>：注入<code>Spring boot</code> <code>application.properties</code>配置的属性的值。示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(value = “#&#123;message&#125;”)</span><br><span class="line">private String message;</span><br></pre></td></tr></table></figure><p>16、<code>@Inject</code>：等价于默认的<code>@Autowired</code>，只是没有<code>required</code>属性；</p><p>17、<code>@Component</code>：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><p>18、<code>@Bean</code>：相当于<code>XML</code>中的,放在方法的上面，而不是类，意思是产生一个<code>bean</code>,并交给<code>spring</code>管理。</p><p>19、<code>@AutoWired</code>：自动导入依赖的<code>bean</code>。<code>byType</code>方式。把配置好的<code>Bean</code>拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（<code>required=false</code>）时，就算找不到<code>bean</code>也不报错。</p><p>20、<code>@Qualifier</code>：当有多个同一类型的<code>Bean</code>时，可以用<code>@Qualifier(“name”)</code>来指定。与<code>@Autowired</code>配合使用。<code>@Qualifier</code>限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">@Qualifier(value = “demoInfoService”)</span><br><span class="line">private DemoInfoService demoInfoService;</span><br></pre></td></tr></table></figure><p>21、<code>@Resource(name=”name”,type=”type”)</code>：没有括号内内容的话，默认<code>byName</code>。与<code>@Autowired</code>干类似的事。</p><h2 id="三、JPA注解"><a href="#三、JPA注解" class="headerlink" title="三、JPA注解"></a>三、JPA注解</h2><p>1、<code>@Entity</code>：<code>@Table(name=”“)</code>：表明这是一个实体类。一般用于<code>jpa</code>这两个注解一般一块使用，但是如果表名和实体类名相同的话，<code>@Table</code>可以省略。</p><p>2、<code>@MappedSuperClass</code>:用在确定是父类的<code>entity</code>上。父类的属性子类可以继承。</p><p>3、<code>@NoRepositoryBean</code>:一般用作父类的<code>repository</code>，有这个注解，<code>Spring</code>不会去实例化该<code>repository</code>。</p><p>4、<code>@Column</code>：如果字段名与列名相同，则可以省略。</p><p>5、<code>@Id</code>：表示该属性为主键。</p><p>6、<code>@GeneratedValue(strategy=GenerationType.SEQUENCE,generator= “repair_seq”)</code>：表示主键生成策略是<code>sequence</code>（可以为<code>Auto</code>、<code>IDENTITY</code>、<code>native</code>等，<code>Auto</code>表示可在多个数据库间切换），指定<code>sequence</code>的名字是<code>repair_seq</code>。</p><p>7、<code>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)</code>：<code>name</code>为<code>sequence</code>的名称，以便使用，<code>sequenceName</code>为数据库的<code>sequence</code>名称，两个名称可以一致。</p><p>8、<code>@Transient</code>：表示该属性并非一个到数据库表的字段的映射,<code>ORM</code>框架将忽略该属性。</p><p>如果一个属性并非数据库表的字段映射,就务必将其标示为<code>@Transient</code>,否则,<code>ORM</code>框架默认其注解为<code>@Basic</code>。</p><p>9、<code>@Basic(fetch=FetchType.LAZY)</code>：标记可以指定实体属性的加载方式。</p><p>10、<code>@JsonIgnore</code>：作用是<code>json</code>序列化时将<code>Java bean</code>中的一些属性忽略掉,序列化和反序列化都受影响。</p><p>11、<code>@JoinColumn（name=”loginId”）</code>:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。</p><p>12、<code>@OneToOne、@OneToMany、@ManyToOne</code>：对应<code>hibernate</code>配置文件中的一对一，一对多，多对一。</p><h2 id="四、SpringMVC相关注解"><a href="#四、SpringMVC相关注解" class="headerlink" title="四、SpringMVC相关注解"></a>四、SpringMVC相关注解</h2><p>1、<code>@RequestMapping</code>：<code>@RequestMapping(“/path”)</code>表示该控制器处理所有“/path”的UR L请求。</p><p><code>RequestMapping</code>是一个用来处理请求地址映射的注解，可用于类或方法上。</p><p>用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。该注解有六个属性：</p><ul><li><code>params</code>:指定<code>request</code>中必须包含某些参数值是，才让该方法处理。</li><li><code>headers</code>:指定<code>request</code>中必须包含某些指定的<code>header</code>值，才能让该方法处理请求。</li><li><code>value</code>:指定请求的实际地址，指定的地址可以是<code>URI Template</code> 模式</li><li><code>method</code>:指定请求的method类型， <code>GET、POST、PUT、DELETE</code>等</li><li><code>consumes</code>:指定处理请求的提交内容类型（<code>Content-Type</code>），如<code>application/json,text/html</code>;</li><li><code>produces</code>:指定返回的内容类型，仅当<code>request</code>请求头中的(<code>Accept</code>)类型中包含该指定类型才返回。</li></ul><p>2、<code>@RequestParam</code>：用在方法的参数前面。</p><p>3、<code>@PathVariable</code>:路径变量。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestMapping(“user/get/&#123;macAddress&#125;”)</span><br><span class="line">public String getByMacAddress(@PathVariable String macAddress)&#123;</span><br><span class="line">    //do something;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数与大括号里的名字一样要相同。</p><h2 id="五、全局异常处理"><a href="#五、全局异常处理" class="headerlink" title="五、全局异常处理"></a>五、全局异常处理</h2><p><code>@ControllerAdvice</code>：包含<code>@Component</code>。可以被扫描到。统一处理异常。</p><p><code>@ExceptionHandler（Exception.class）</code>：用在方法上面表示遇到这个异常就执行以下方法。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下如何创建文件</title>
      <link href="/article/Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6/"/>
      <url>/article/Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 Linux 上，包括设备在内的一切皆文件。Linux用户每天都会多次执行创建文件，但在linux上右键菜单中只有创建文件夹（我们也可以使用<code>mkdir</code>命令创建），但并没有创建文件的菜单。</p><span id="more"></span><p>创建文件可以通过以下六个方式来完成。</p><ul><li><code>&gt;</code>：标准重定向符允许我们创建一个 0KB 的空文件。</li><li><code>touch</code>：如果文件不存在的话，<code>touch</code> 命令将会创建一个 0KB 的空文件。</li><li><code>echo</code>：通过一个参数显示文本的某行。</li><li><code>printf</code>：用于显示在终端给定的文本。</li><li><code>cat</code>：它串联并打印文件到标准输出。</li><li><code>vi</code>/<code>vim</code>：Vim 是一个向上兼容 Vi 的文本编辑器。它常用于编辑各种类型的纯文本。</li><li><code>nano</code>：是一个简小且用户友好的编辑器。它复制了 <code>pico</code> 的外观和优点，但它是自由软件。</li><li><code>head</code>：用于打印一个文件开头的一部分。</li><li><code>tail</code>：用于打印一个文件的最后一部分。</li><li><code>truncate</code>：用于缩小或者扩展文件的尺寸到指定大小。</li></ul><h3 id="使用重定向符（-gt-）创建一个文件"><a href="#使用重定向符（-gt-）创建一个文件" class="headerlink" title="使用重定向符（&gt;）创建一个文件"></a>使用重定向符（&gt;）创建一个文件</h3><p>标准重定向符允许我们创建一个 0KB 的空文件。它通常用于重定向一个命令的输出到一个新文件中。在没有命令的情况下使用重定向符号时，它会创建一个文件。</p><p>但是它不允许你在创建文件时向其中输入任何文本。然而它对于不是很勤劳的管理员是非常简单有用的。只需要输入重定向符后面跟着你想要的文件名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ &gt; demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>ls</code> 命令查看刚刚创建的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -lh demo.txt</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 0 12月 10 18:33 demo.txt</span><br></pre></td></tr></table></figure><h3 id="使用-touch-命令创建一个文件"><a href="#使用-touch-命令创建一个文件" class="headerlink" title="使用 touch 命令创建一个文件"></a>使用 touch 命令创建一个文件</h3><p><code>touch</code> 命令常用于将每个文件的访问和修改时间更新为当前时间。</p><p>如果指定的文件名不存在，将会创建一个新的文件。<code>touch</code> 不允许我们在创建文件的同时向其中输入一些文本。它默认创建一个 0KB 的空文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>ls</code> 命令查看刚刚创建的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lh demo.txt</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 0 12月 10 18:33 demo.txt</span><br></pre></td></tr></table></figure><h3 id="在-Linux-上使用-echo-命令创建一个文件"><a href="#在-Linux-上使用-echo-命令创建一个文件" class="headerlink" title="在 Linux 上使用 echo 命令创建一个文件"></a>在 Linux 上使用 echo 命令创建一个文件</h3><p><code>echo</code> 内置于大多数的操作系统中。它常用于脚本、批处理文件，以及作为插入文本的单个命令的一部分。</p><p>它允许你在创建一个文件时就向其中输入一些文本。当然也允许你在之后向其中输入一些文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Love you.&quot;</span> &gt; demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>ls</code> 命令查看刚刚创建的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lh demo.txt</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 10 12月 10 18:38 demo.txt</span><br></pre></td></tr></table></figure><p>可以使用 <code>cat</code> 命令查看文件的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> demo.txt</span><br><span class="line">Love you.</span><br></pre></td></tr></table></figure><p>你可以使用两个重定向符 (<code>&gt;&gt;</code>) 添加其他内容到同一个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Love you,too.&quot;</span> &gt;&gt; demo.txt</span><br></pre></td></tr></table></figure><p>你可以使用 <code>cat</code> 命令查看添加的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> demo.txt</span><br><span class="line">Love you.</span><br><span class="line">Love you,too.</span><br></pre></td></tr></table></figure><h3 id="使用-printf-命令创建一个新的文件"><a href="#使用-printf-命令创建一个新的文件" class="headerlink" title="使用 printf 命令创建一个新的文件"></a>使用 printf 命令创建一个新的文件</h3><p><code>printf</code> 命令也可以以类似 <code>echo</code> 的方式执行。</p><p><code>printf</code> 命令常用来显示在终端窗口给出的字符串。<code>printf</code> 可以有格式说明符、转义序列或普通字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;Love you.\n&quot;</span> &gt; demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>ls</code> 命令查看刚刚创建的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lh demo.txt</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 10 12月 10 18:38 demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>cat</code> 命令查看文件的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> demo.txt</span><br><span class="line">Love you.</span><br></pre></td></tr></table></figure><p>你可以使用两个重定向符 (<code>&gt;&gt;</code>) 添加其他的内容到同一个文件中去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;Love you,too.\n&quot;</span> &gt;&gt; demo.txt</span><br></pre></td></tr></table></figure><p>你可以使用 <code>cat</code> 命令查看这个文件中添加的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> demo.txt</span><br><span class="line">Love you.</span><br><span class="line">Love you,too.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用-cat-创建一个文件"><a href="#使用-cat-创建一个文件" class="headerlink" title="使用 cat 创建一个文件"></a>使用 cat 创建一个文件</h3><p><code>cat</code> 表示串联concatenate。在 Linux 经常用于读取一个文件中的数据。</p><p><code>cat</code> 是在类 Unix 系统中最常使用的命令之一。它提供了三个与文本文件相关的功能：显示一个文件的内容、组合多个文件的内容到一个输出以及创建一个新的文件。（LCTT 译注：如果 <code>cat</code> 命令后如果不带任何文件的话，下面的命令在回车后也不会立刻结束，回车后的操作可以按 <code>Ctrl-C</code> 或 <code>Ctrl-D</code> 来结束。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt; demo.txt</span><br><span class="line">Love you.</span><br><span class="line">Love you,too.</span><br><span class="line">^C <span class="comment"># Ctrl + C 结束输入</span></span><br></pre></td></tr></table></figure><p>使用 <code>ls</code> 命令查看创建的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lh demo.txt</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 24 12月 10 21:28 demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>cat</code> 命令查看文件的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> demo.txt</span><br><span class="line">Love you.</span><br><span class="line">Love you,too.</span><br></pre></td></tr></table></figure><p>如果你想向同一个文件中添加其他内容，使用两个连接的重定向符（<code>&gt;&gt;</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; demo.txt</span><br><span class="line">Love you,everyday.</span><br></pre></td></tr></table></figure><p>你可以使用 <code>cat</code> 命令查看添加的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> demo.txt</span><br><span class="line">Love you.</span><br><span class="line">Love you,too.</span><br><span class="line">Love you,everyday.</span><br></pre></td></tr></table></figure><h3 id="使用-vi-vim-命令创建一个文件"><a href="#使用-vi-vim-命令创建一个文件" class="headerlink" title="使用 vi/vim 命令创建一个文件"></a>使用 vi/vim 命令创建一个文件</h3><p><code>vim</code> 是一个向上兼容 <code>vi</code> 的文本编辑器。它通常用来编辑所有种类的纯文本。在编辑程序时特别有用。</p><p><code>vim</code> 中有很多功能可以用于编辑单个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vi demo.txt</span><br><span class="line">Love you.</span><br><span class="line">Love you,too.</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p>按<code>Esc</code>输入<code>:wq</code>保存退出。</p><p>使用 <code>ls</code> 查看刚才创建的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lh demo.txt</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 25 12月 10 21:36 demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>cat</code> 命令查看文件的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> demo.txt</span><br><span class="line">Love you.</span><br><span class="line">Love you,too.</span><br></pre></td></tr></table></figure><h3 id="使用-nano-命令创建一个文件"><a href="#使用-nano-命令创建一个文件" class="headerlink" title="使用 nano 命令创建一个文件"></a>使用 nano 命令创建一个文件</h3><p><code>nano</code> 是一个编辑器，它是一个自由版本的 <code>pico</code> 克隆。<code>nano</code> 是一个小且用户友好的编辑器。它复制了 <code>pico</code> 的外观及优点，并且是一个自由软件，它添加了 <code>pico</code> 缺乏的一系列特性，像是打开多个文件、逐行滚动、撤销/重做、语法高亮、行号等等。</p><p>光标只能使用键盘方向键控制移动，快捷键使用<code>Ctrl</code>+菜单字母标识。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ nano demo.java</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fnano%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6.png" alt="nano创建文件"></p><p>按<code>Ctrl+X</code>离开，<code>Ctrl+Y</code>选择保存，确定文件名回车即可，使用 <code>ls</code> 命令查看创建的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lh demo.java</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 121 12月 10 21:50 demo.java</span><br></pre></td></tr></table></figure><p>使用 <code>cat</code> 命令来查看一个文件的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> demo.java</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-head-命令创建一个文件"><a href="#使用-head-命令创建一个文件" class="headerlink" title="使用 head 命令创建一个文件"></a>使用 head 命令创建一个文件</h3><p><a href="https://www.runoob.com/linux/linux-comm-head.html"><code>head</code></a> 命令通常用于输出一个文件开头的一部分。它默认会打印一个文件的开头 10 行到标准输出。如果有多个文件，则每个文件前都会有一个标题，用来表示文件名。</p><p>如下，创建一个0kb空文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">head</span> -c 0K &gt; demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>ls</code> 命令查看创建的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lh demo.txt</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 0 12月 10 21:58 demo.txt</span><br></pre></td></tr></table></figure><h3 id="使用-tail-创建一个文件"><a href="#使用-tail-创建一个文件" class="headerlink" title="使用 tail 创建一个文件"></a>使用 tail 创建一个文件</h3><p><code>tail</code> 命令通常用来输出一个文件最后的一部分。它默认会打印每个文件的最后 10 行到标准输出。如果有多个文件，则每个文件前都会有一个标题，用来表示文件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">tail</span> -c 0K &gt; demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>ls</code> 命令查看创建的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lh demo.txt</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 0 12月 10 21:59 demo.txt</span><br></pre></td></tr></table></figure><h3 id="使用-truncate-命令创建一个文件"><a href="#使用-truncate-命令创建一个文件" class="headerlink" title="使用 truncate 命令创建一个文件"></a>使用 truncate 命令创建一个文件</h3><p><code>truncate</code> 命令通常用作将一个文件的尺寸缩小或者扩展为某个指定的尺寸。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">truncate</span> -s 0K demo.txt</span><br></pre></td></tr></table></figure><p>使用 <code>ls</code> 命令检查创建的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lh demo.txt</span><br><span class="line">-rw-rw-r--. 1 sogrey sogrey 0 12月 10 21:59 demo.txt</span><br></pre></td></tr></table></figure><hr><p>当作笔记，做个记录。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://linux.cn/article-10549-1.html">在 Linux 上创建文件的 10 个方法</a></li><li><a href="https://www.2daygeek.com/create-a-file-in-specific-certain-size-linux/">在Linux上创建一个特定大小的文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】提示用户不在sudoers文件中的解决方法</title>
      <link href="/article/%E3%80%90Linux%E3%80%91%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E4%B8%8D%E5%9C%A8sudoers%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/article/%E3%80%90Linux%E3%80%91%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E4%B8%8D%E5%9C%A8sudoers%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 在使用Linux系统过程中，通常情况下，我们都会使用普通用户进行日常操作，而root用户只有在权限分配及系统设置时才会使用，而root用户的密码也不可能公开。普通用户执行到系统程序时，需要临时提升权限，sudo就是我们常用的命令，仅需要输入当前用户密码，便可以完成权限的临时提升。在使用sudo命令的过程中，我们经常会遇到当前用户不在sudoers文件中的提示信息，如果解决该问题呢？通过下面几个步骤，可以很简单的解决此问题。</p><span id="more"></span><p>工具：Oracle VM VirtualBox<br>系统：CentOS,Huawei Eulor OS(基于CentOS)</p><p>1.切换到root用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">密码 <span class="comment">#输入密码，密码不可见</span></span><br></pre></td></tr></table></figure><p>2.查看<code>/etc/sudoers</code>文件权限，通常是只读权限，修改为可写权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /etc/sudoers <span class="comment"># 查看文件权限</span></span><br><span class="line">-r--r-----. 1 root root 4030 9月  25 00:57 /etc/sudoers <span class="comment">#r读 w写 目前是只读状态</span></span><br><span class="line"><span class="built_in">chmod</span> 777 /etc/sudoers <span class="comment"># 修改为可写权限</span></span><br><span class="line"><span class="built_in">ls</span> -l /etc/sudoers <span class="comment"># 再次查看文件权限</span></span><br><span class="line">-rwxrwxrwx. 1 root root 4030 9月  25 00:57 /etc/sudoers <span class="comment">#r读 w写 现在是可写状态</span></span><br></pre></td></tr></table></figure><p>3.执行<code>vi</code>命令，编辑<code>/etc/sudoers</code>文件，添加要提升权限的用户；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ./etc/sudoers</span><br></pre></td></tr></table></figure><p>在文件中找到<code>root  ALL=(ALL) ALL</code>，在该行下添加提升权限的用户信息，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">user    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>说明：格式为（<code>用户名    网络中的主机=（执行命令的目标用户）    执行的命令范围</code>）</p><p>保存退出<code>vi</code>,按<code>Esc</code>键输出<code>:wq</code>。</p><pre><code>编辑模式　　使用vi进入文本后，按i开始编辑文本退出编辑模式 　　按ESC键，然后：　　　　退出vi　　　 :q!  不保存文件，强制退出vi命令　　　 :w   保存文件，不退出vi命令　　　 :wq  保存文件，退出vi命令</code></pre><p>4.保存退出后恢复<code>/etc/sudoers</code>的访问权限为<code>440</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 440 /etc/sudoers <span class="comment"># 恢复只读</span></span><br><span class="line"><span class="built_in">ls</span> -l /etc/sudoers <span class="comment"># 查看文件读写状态</span></span><br><span class="line">-r--r-----. 1 root root 4030 9月  25 00:57 /etc/sudoers <span class="comment"># r读 w写 目前只读</span></span><br></pre></td></tr></table></figure><p>进行完以上步骤，切换回普通用户，该用户权限提升功能完成。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Flinux%E6%8F%90%E5%8D%87%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90sudoers.png" alt="linux提升用户权限sudoers"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FEulorOS%E6%8F%90%E5%8D%87%E7%94%A8%E6%88%B7su%E6%9D%83%E9%99%90.png" alt="Huawei EulorOS提升用户su权限"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/mouday/article/details/88758437">Linux：设置文件和文件夹的读写权限</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> sudo </tag>
            
            <tag> sudoers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装软件</title>
      <link href="/article/Linux%E4%B8%8B%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
      <url>/article/Linux%E4%B8%8B%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>linux系统下怎么安装软件？</p><ul><li>deb 是 ubuntu 、debian 的格式。</li><li>rpm 是 redhat 、fedora 、suse 的格式。</li></ul><span id="more"></span><h2 id="安装deb文件"><a href="#安装deb文件" class="headerlink" title="安装deb文件"></a>安装deb文件</h2><p>deb是debian发行版的软件包，而ubuntu是基于debian 发行的所以可以用。</p><p>.deb是solaris系统下的安装包后缀名。安装方法如下：</p><ol><li><code>cd</code> 到安装包的目录</li><li><code>dpkg -i 安装包名字</code> 如果权限不够，<code>sudo</code>来凑。</li></ol><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2F%E5%AE%89%E8%A3%85deb.png"></p><h2 id="安装rpm文件"><a href="#安装rpm文件" class="headerlink" title="安装rpm文件"></a>安装rpm文件</h2><p>如果你使用的是red hat linux，然后运行以下命令安装：</p><ol><li><code>cd</code> 到安装包的目录</li><li><code>rpm -ivh 安装包名字</code></li></ol><h2 id="安装tar-gz文件"><a href="#安装tar-gz文件" class="headerlink" title="安装tar.gz文件"></a>安装tar.gz文件</h2><p>有时，部分软件是以<code>.tar.gz</code>打包的，比如我要安装的java jdk:jdk-8u161-linux-x64.tar.gz</p><p>执行命令：<code>tar -zxvf jdk-8u161-linux-x64.tar.gz</code></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2F%E5%AE%89%E8%A3%85tar.png"></p><p>其中必要参数有如下：</p><ul><li><code>-A</code> 新增压缩文件到已存在的压缩</li><li><code>-c</code> 建立新的压缩文件</li><li><code>-d</code> 记录文件的差别</li><li><code>-r</code> 添加文件到已经压缩的文件</li><li><code>-u</code> 添加改变了和现有的文件到已经存在的压缩文件</li><li><code>-x</code> 从压缩的文件中提取文件</li><li><code>-t</code> 显示压缩文件的内容</li><li><code>-z</code> 支持<code>gzip</code>解压文件</li><li><code>-j</code> 支持<code>bzip2</code>解压文件</li><li><code>-Z</code> 支持compress解压文件</li><li><code>-v</code> 显示操作过程</li><li><code>-l</code> 文件系统边界设置</li><li><code>-k</code> 保留原有文件不覆盖</li><li><code>-m</code> 保留文件不被覆盖</li><li><code>-W</code> 确认压缩文件的正确性</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.runoob.com/w3cnote/linux-tar-gz.html">Linux tar.gz、tar、bz2、zip 等解压缩、压缩命令详解</a></li><li><a href="https://blog.csdn.net/imyang2007/article/details/7634470">linux tar 解压命令总结</a></li><li><a href="https://www.cnblogs.com/nhdlb/p/11568991.html">Linux：linux下解压*压缩tar.xz、tar、tar.gz、tar.bz2、tar.Z、rar、zip、war等文件方法</a></li><li><a href="https://man.linuxde.net/wget">wget命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> deb </tag>
            
            <tag> rpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot项目打包和自启动</title>
      <link href="/article/spring-boot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%92%8C%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
      <url>/article/spring-boot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%92%8C%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>springboot的打包方式有很多种。有打成war的，有打成jar的，也有直接提交到github，通过jekins进行打包部署的。这里主要介绍如何打成jar进行部署。不推荐用war，因为springboot适合前后端分离，打成jar进行部署更合适。</p><span id="more"></span><h2 id="spring-boot项目打包"><a href="#spring-boot项目打包" class="headerlink" title="spring-boot项目打包"></a>spring-boot项目打包</h2><ol><li><p>在application.properties当中配置端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080</span><br></pre></td></tr></table></figure></li><li><p>pom.xml添加配置，已经配置过可忽略</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置主类入口--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>top.Sogrey.MainApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>项目右键-&gt;<code>Run As</code>-&gt;<code>Maven clean</code> 先清理</p></li><li><p>项目右键-&gt;<code>Run As</code>-&gt;<code>Maven install</code> Maven执行打包</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fspring-boot-%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85.png" alt="spring-boot-项目打包"></p><p>等待出现<code>BUILD SUCCESS</code>字样，打包成功，在项目根目录<code>target</code>下查看生成的<code>jar</code>文件。</p></li></ol><h2 id="运行jar包"><a href="#运行jar包" class="headerlink" title="运行jar包"></a>运行jar包</h2><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar myProject.jar</span><br></pre></td></tr></table></figure><h2 id="添加到系统自启动"><a href="#添加到系统自启动" class="headerlink" title="添加到系统自启动"></a>添加到系统自启动</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>准备工具：<a href="https://github.com/winsw/winsw/releases">winsw</a>,是一个可以将任何应用程序注册成服务的软件</p><ol><li><p>将下载的<code>WinSW.NET4.exe</code>与springboot项目打包的jar包（比如:<code>myProject.jar</code>）放在同一个文件夹中，并将<code>WinSW.NET4.exe</code>重命名为与jar文件同名,比如：<code>myProject.exe</code>。</p></li><li><p>同目录下创建同名的xml文件,比如，输入内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--安装成Windows服务后的服务名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>myProjectServiceID<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--显示的服务名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>myProjectServiceName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对服务的描述--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>此处可填写该服务的描述<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里写java的路径，如何配置了环境变量直接写&quot;java&quot;就行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>java<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Xmx256m 代表堆内存最大值为256MB -jar后面的是项目名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-Xmx256m -jar myProject.jar<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志模式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logmode</span>&gt;</span>rotate<span class="tag">&lt;/<span class="name">logmode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>cmd到当前目录下，执行安装命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myProject.exe install</span><br></pre></td></tr></table></figure></li><li><p>命令提示符界面输入启动服务命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> myProjectServiceName</span><br></pre></td></tr></table></figure></li><li><p>打开系统服务功能：运行——输入<code>services.msc</code>，即可看见自己命名的服务<code>myProjectServiceName</code>,自启动就好了，可重启系统再次查看系统服务功能。</p></li><li><p>删除服务。既然启动了服务，我们也可以删除他，同样是两步：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> stop myProjectServiceName #停止运行服务</span><br><span class="line">myProject.exe uninstall #删除服务</span><br></pre></td></tr></table></figure></li><li><p>一键部署命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#例如myProjectStart.bat内容如下：</span><br><span class="line">myProject.exe install</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> myProjectServiceName</span><br><span class="line"></span><br><span class="line">#例如myProjectStop.bat内容如下：</span><br><span class="line"><span class="built_in">net</span> stop myProjectServiceName</span><br><span class="line">myProject.exe uninstall</span><br></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3></li><li><p>开启后台自执行</p></li></ol><p>命令： <code>nohup</code> 详细文档说明可参考<a href="https://www.runoob.com/linux/linux-comm-nohup.html">Linux nohup 命令</a></p><p>语法格式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> Command [ Arg … ] [　&amp; ]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar myProject.jar &amp;</span><br></pre></td></tr></table></figure><p>在终端如果看到以下输出说明运行成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appending output to nohup.out</span><br></pre></td></tr></table></figure><ol start="2"><li>停止运行,杀死进程</li></ol><p>先使用以下命令查找到 nohup 运行脚本到 PID，然后使用 kill 命令来删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep <span class="string">&quot;myProject.jar&quot;</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>a</code> : 显示所有程序</li><li><code>u</code> : 以用户为主的格式来显示</li><li><code>x</code> : 显示所有程序，不区分终端机</li></ul><p>另外也可以使用 <code>ps -def | grep &quot;myProject.jar&quot;</code> 命令来查找。</p><p>找到 PID 后，就可以使用 <a href="https://www.runoob.com/linux/linux-comm-kill.html">kill</a> PID 来删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9  进程号PID</span><br></pre></td></tr></table></figure><p>以下命令在后台执行 root 目录下的 runoob.sh 脚本，并重定向输入到 runoob.log 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> /root/runoob.sh &gt; runoob.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><code>2&gt;&amp;1</code> 解释：</p><p>将标准错误 2 重定向到标准输出 &amp;1 ，标准输出 &amp;1 再被重定向输入到 runoob.log 文件中。</p><ul><li><code>0</code> – stdin (standard input，标准输入)</li><li><code>1</code> – stdout (standard output，标准输出)</li><li><code>2</code> – stderr (standard error，标准错误输出)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring boot </tag>
            
            <tag> Maven </tag>
            
            <tag> Myeclipse </tag>
            
            <tag> winsw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Maven搭建spring boot项目（下）</title>
      <link href="/article/%E4%BD%BF%E7%94%A8Maven%E6%90%AD%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/article/%E4%BD%BF%E7%94%A8Maven%E6%90%AD%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/article/%E4%BD%BF%E7%94%A8Maven%E6%90%AD%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE/">上节</a>我们搭建了一个简单的Spring boot web项目，要想运行起来还需加入Spring boot，现在安排。</p><span id="more"></span><h2 id="在pom-xml中引入相关依赖"><a href="#在pom-xml中引入相关依赖" class="headerlink" title="在pom.xml中引入相关依赖"></a>在pom.xml中引入相关依赖</h2><ol><li><p>引入<code>spring-boot-start-parent</code>，spring官方的叫stater poms，它可以提供dependency management，也就是依赖管理，引入以后在声明其它dependency的时候就不需要version了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入<code>spring-boot-starter-web</code>，spring官方解释spring-boot-start-web包含了spring webmvc和tomcat等web开发的特性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>引入<code>spring-boot-maven-plugin</code>,用于启动spring，否则是无法启动的。如果使用maven的<code>spring-boot:run</code>的话就不需要此配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>完整pom.xml见<a href="https://github.com/Sogrey/SpringBootDemo/blob/main/pom.xml">https://github.com/Sogrey/SpringBootDemo/blob/main/pom.xml</a></p><h2 id="添加java相关代码"><a href="#添加java相关代码" class="headerlink" title="添加java相关代码"></a>添加java相关代码</h2><ol><li><p>创建启动类，然后在启动类声明让spring boot自动给我们配置spring需要的配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// Spring Boot项目的核心注解，主要目的是开启自动配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloApplication</span> &#123;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在main方法中启动一个应用，即：这个应用的入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p>其中<code>@SpringBootApplication</code>声明让spring boot自动给程序进行必要的配置，等价于以默认属性使用<code>@Configuration</code>，<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>。</p></li><li><p>添加控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 标明这是一个SpringMVC的Controller控制器</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>两种运行方式：</p><ol><li><p>右键<code>Run As</code> -&gt; <code>Java Application</code>。之后打开浏览器输入地址：</p><p><a href="http://localhost:10111/api/">http://localhost:10111/api/</a></p><p><a href="http://localhost:10111/api/hello?name=Sogrey">http://localhost:10111/api/hello?name=Sogrey</a>  //带参数</p><p>试试看。</p></li><li><p>第二种方式右键<code>Run as</code> –&gt;<code>Maven build</code> – 在Goals里输入<code>spring-boot:run</code> ,然后Apply,最后点击Run。</p></li></ol><p>github地址：<a href="https://github.com/Sogrey/SpringBootDemo.git">https://github.com/Sogrey/SpringBootDemo.git</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring boot </tag>
            
            <tag> Maven </tag>
            
            <tag> Myeclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Maven搭建spring boot项目</title>
      <link href="/article/%E4%BD%BF%E7%94%A8Maven%E6%90%AD%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE/"/>
      <url>/article/%E4%BD%BF%E7%94%A8Maven%E6%90%AD%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>准备工具：</p><ul><li>MyEclipse CI 2019.4.0</li><li>JDK1.8</li><li>Tomcat 8.5</li></ul><p>MyEclipse 和 JDK 的下载安装就不细说了，自行百度，一带而过。</p><span id="more"></span><h2 id="MyEclipse使用Maven搭建spring-boot项目"><a href="#MyEclipse使用Maven搭建spring-boot项目" class="headerlink" title="MyEclipse使用Maven搭建spring boot项目"></a>MyEclipse使用Maven搭建spring boot项目</h2><ol><li><p><code>File</code>-&gt;<code>New</code>-&gt;<code>Project</code>-&gt;<code>Maven Project</code></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fcreate-spring-boot-by-ME1.png" alt="create-spring-boot-by-ME"></p></li><li><p><code>Next</code>, 选择<code>Use default Workspace location</code>。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fcreate-spring-boot-by-ME2.png" alt="create-spring-boot-by-ME"></p></li><li><p><code>Next</code>, 选择<code>maven-archetype-webapp</code>创建一个webapp目录结构的项目</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fcreate-spring-boot-by-ME3.png" alt="create-spring-boot-by-ME"></p></li><li><p>填<code>Group Id</code>，<code>Artifact Id</code>，和<code>Package，点击</code>Finish`</p><ul><li>GroupId：一般是公司名或组织名。</li><li>ArtifactId：一般是project名。</li><li>Packaging：打包类型，jar/war/rar/ear/pom等，默认是jar。</li><li>Version：版本号，GroupId+ArtifactId+Packaging+Version构成项目的唯一标识。</li></ul><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fcreate-spring-boot-by-ME4.png" alt="create-spring-boot-by-ME"></p></li><li><p>等待MyEclipse创建项目,完成后，文件目录结构如下</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fcreate-spring-boot-by-ME5.png" alt="create-spring-boot-by-ME"></p></li></ol><h2 id="Eclipse暂时通过Spring-Initializr官网快速构建spring-boot工程"><a href="#Eclipse暂时通过Spring-Initializr官网快速构建spring-boot工程" class="headerlink" title="Eclipse暂时通过Spring Initializr官网快速构建spring boot工程"></a>Eclipse暂时通过Spring Initializr官网快速构建spring boot工程</h2><ol><li>使用浏览器打开： <a href="http://start.spring.io/">http://start.spring.io</a></li><li>填写项目相关信息，选取依赖，然后生成项目</li><li>解压项目，在Eclipse导入Maven工程</li></ol><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fcreate-spring-boot-by-Spring-Initializr.png" alt="create-spring-boot-by-Spring-Initializr"></p><p>到此，一个简单的Spring boot web项目就初步搭建了，要想运行起来还需加入Spring boot，<a href="/article/%E4%BD%BF%E7%94%A8Maven%E6%90%AD%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%8B%EF%BC%89/">下节</a>安排。</p><h2 id="解决一些异常"><a href="#解决一些异常" class="headerlink" title="解决一些异常"></a>解决一些异常</h2><ol><li><p>创建完成后，发现index.jsp报错，打开index.jsp，报错如下</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fcreate-spring-boot-by-ME6.png" alt="create-spring-boot-by-ME"></p><p>在项目上右键-&gt;<code>build path</code>-&gt;<code>AddLibrary</code>,选择MyEclipse Server Library,Next后，选择一个Tomcat，Finish。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fcreate-spring-boot-by-ME8.png" alt="create-spring-boot-by-ME"></p></li><li><p>pom.xml报错,有小红叉</p><p>项目上右键选<code>maven</code>-&gt;<code>Update Project</code></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fcreate-spring-boot-by-ME9.png" alt="create-spring-boot-by-ME"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring boot </tag>
            
            <tag> Maven </tag>
            
            <tag> Myeclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解锁github高级搜索技能</title>
      <link href="/article/%E8%A7%A3%E9%94%81github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E8%83%BD/"/>
      <url>/article/%E8%A7%A3%E9%94%81github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>作为程序员，github是必备网站，那么我们一般是怎么在github中中查找开源项目呢？今天我也来学习下常用的github高级搜索命令。</p><span id="more"></span><h2 id="搜索仓库"><a href="#搜索仓库" class="headerlink" title="搜索仓库"></a>搜索仓库</h2><h3 id="按仓库名称、说明或自述文件内容搜索"><a href="#按仓库名称、说明或自述文件内容搜索" class="headerlink" title="按仓库名称、说明或自述文件内容搜索"></a>按仓库名称、说明或自述文件内容搜索</h3><p>通过 <code>in</code> 限定符，您可以将搜索限制为仓库名称<code>name</code>、仓库说明<code>description</code>、自述文件内容<code>readme</code>或这些的任意组合。如果省略此限定符，则只搜索仓库名称和说明。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>in:name</code></td><td align="left"><strong>sogrey in:name</strong> 匹配其名称中含有 “sogrey” 的仓库。</td></tr><tr><td align="left"><code>in:description</code></td><td align="left"><strong>sogrey in:name,description</strong> 匹配其名称或说明中含有 “sogrey” 的仓库。</td></tr><tr><td align="left"><code>in:readme</code></td><td align="left"><strong>sogrey in:readme</strong> 匹配其自述文件中提及 “sogrey” 的仓库。</td></tr></tbody></table><p>也可以直接搜索指定仓库：</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>repo:owner/name</code></td><td><strong>repo:sogrey/sogrey</strong> 匹配特定仓库名称。</td></tr></tbody></table><h3 id="在用户或组织的仓库内搜索"><a href="#在用户或组织的仓库内搜索" class="headerlink" title="在用户或组织的仓库内搜索"></a>在用户或组织的仓库内搜索</h3><p>要在特定用户或组织拥有的所有仓库中搜索，您可以使用 <code>user</code> 或 <code>org</code> 限定符。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>user:*USERNAME*</code></td><td align="left"><strong>user:defunkt forks:&gt;100</strong> 匹配来自 @defunkt、拥有超过 100 复刻的仓库。</td></tr><tr><td align="left"><code>org:*ORGNAME*</code></td><td align="left"><strong>org:github</strong> 匹配来自 GitHub 的仓库。</td></tr></tbody></table><h3 id="按仓库大小搜索"><a href="#按仓库大小搜索" class="headerlink" title="按仓库大小搜索"></a>按仓库大小搜索</h3><p><code>size</code> 限定符使用大于、小于和范围限定符查找匹配特定大小（以千字节  <code>kb</code> 为单位）的仓库。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>size:*n*</code></td><td align="left"><strong>size:1000</strong> 匹配恰好为 1 MB 的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>size:&gt;=30000</strong> 匹配至少为 30 MB 的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>size:&lt;50</strong> 匹配小于 50 KB 的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>size:50..120</strong> 匹配介于 50 KB 与 120 KB 之间的仓库。</td></tr></tbody></table><h3 id="按关注者数量搜索"><a href="#按关注者数量搜索" class="headerlink" title="按关注者数量搜索"></a>按关注者数量搜索</h3><p>使用 <code>followers</code> 限定符以及大于、小于和范围限定符基于仓库拥有的关注者数量过滤仓库。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>followers:*n*</code></td><td align="left"><strong>node followers:&gt;=10000</strong> 匹配有 10,000 或更多关注者提及文字 “node” 的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>styleguide linter followers:1..10</strong> 匹配拥有 1 到 10 个关注者并且提及 “styleguide linter” 一词的的仓库。</td></tr></tbody></table><h3 id="按fork数量搜索"><a href="#按fork数量搜索" class="headerlink" title="按fork数量搜索"></a>按fork数量搜索</h3><p><code>forks</code> 限定符使用大于、小于和范围限定符指定仓库应具有的复刻数量。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>forks:*n*</code></td><td align="left"><strong>forks:5</strong> 匹配只有 5 个复刻的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>forks:&gt;=205</strong> 匹配具有至少 205 个复刻的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>forks:&lt;90</strong> 匹配具有少于 90 个复刻的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>forks:10..20</strong> 匹配具有 10 到 20 个复刻的仓库。</td></tr></tbody></table><h3 id="按star数量搜索"><a href="#按star数量搜索" class="headerlink" title="按star数量搜索"></a>按star数量搜索</h3><p>使用大于、小于和范围限定符基于仓库具有的星标数量搜索仓库</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>stars:*n*</code></td><td align="left"><strong>stars:500</strong> 匹配恰好具有 500 个星号的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>stars:10..20</strong> 匹配具有 10 到 20 个星号、小于 1000 KB 的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>stars:&gt;=500 fork:true language:php</strong> 匹配具有至少 500 个星号，包括复刻的星号（以 PHP 编写）的仓库。</td></tr></tbody></table><h3 id="按仓库创建或上次更新时间搜索"><a href="#按仓库创建或上次更新时间搜索" class="headerlink" title="按仓库创建或上次更新时间搜索"></a>按仓库创建或上次更新时间搜索</h3><p>您可以基于创建时间或上次更新时间过滤仓库。对于仓库创建，您可以使用 <code>created</code> 限定符；要了解仓库上次更新的时间，您要使用 <code>pushed</code> 限定符。<code>pushed</code> 限定符将返回仓库列表，按仓库中任意分支上最近进行的提交排序。</p><p>两者均采用日期作为参数。日期格式必须遵循 ISO8601标准，即 <code>YYYY-MM-DD</code>（年-月-日）。您也可以在日期后添加可选的时间信息 <code>THH:MM:SS+00:00</code>，以便按小时、分钟和秒进行搜索。这是 <code>T</code>，随后是 <code>HH:MM:SS</code>（时-分-秒）和 UTC 偏移 (<code>+00:00</code>)。</p><p>日期支持大于、小于和范围限定符。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>created:*YYYY-MM-DD*</code></td><td align="left"><strong>webos created:&lt;2011-01-01</strong> 匹配具有 “webos” 字样、在 2011 年之前创建的仓库。</td></tr><tr><td align="left"><code>pushed:*YYYY-MM-DD*</code></td><td align="left"><strong>css pushed:&gt;2013-02-01</strong> 匹配具有 “css” 字样、在 2013 年 1 月之后收到推送的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>case pushed:&gt;=2013-03-06 fork:only</strong> 匹配具有 “case” 字样、在 2013 年 3 月 6 日或之后收到推送并且作为复刻的仓库。</td></tr></tbody></table><h3 id="按语言搜索"><a href="#按语言搜索" class="headerlink" title="按语言搜索"></a>按语言搜索</h3><p>基于其编写采用的主要语言搜索仓库。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>language:*LANGUAGE*</code></td><td align="left"><strong>rails language:javascript</strong> 匹配具有 “rails” 字样、以 JavaScript 编写的仓库。</td></tr></tbody></table><h3 id="按topic搜索"><a href="#按topic搜索" class="headerlink" title="按topic搜索"></a>按topic搜索</h3><p>查找归类为特定主题的所有仓库。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>topic:*TOPIC*</code></td><td align="left"><strong>topic:jekyll</strong>匹配已归类为 “jekyll” 主题的仓库。</td></tr></tbody></table><h3 id="按topic数量搜索"><a href="#按topic数量搜索" class="headerlink" title="按topic数量搜索"></a>按topic数量搜索</h3><p>使用 <code>topics</code> 限定符以及大于、小于和范围限定符按应用于仓库的主题数量搜索仓库。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>topics:*n*</code></td><td align="left"><strong>topics:5</strong> 匹配具有五个主题的仓库。</td></tr><tr><td align="left"></td><td align="left"><strong>topics:&gt;3</strong> 匹配超过三个主题的仓库。</td></tr></tbody></table><h3 id="按许可搜索"><a href="#按许可搜索" class="headerlink" title="按许可搜索"></a>按许可搜索</h3><p>按其许可搜索仓库。您必须使用许可关键词按特定许可或许可系列过滤仓库。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>license:*LICENSE_KEYWORD*</code></td><td align="left"><strong>license:apache-2.0</strong> 匹配根据 Apache License 2.0 授权的仓库。</td></tr></tbody></table><h3 id="按公共或私有仓库搜索"><a href="#按公共或私有仓库搜索" class="headerlink" title="按公共或私有仓库搜索"></a>按公共或私有仓库搜索</h3><p>基于仓库是公共还是私有来过滤搜索。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>is:public</code></td><td align="left"><strong>is:public org:github</strong> 匹配 GitHub 拥有的公共仓库。</td></tr><tr><td align="left"><code>is:private</code></td><td align="left"><strong>is:private pages</strong> 匹配您有访问权限且包含 “pages” 字样的私有仓库。</td></tr></tbody></table><h2 id="搜索代码"><a href="#搜索代码" class="headerlink" title="搜索代码"></a>搜索代码</h2><h3 id="按文件内容或文件路径搜索"><a href="#按文件内容或文件路径搜索" class="headerlink" title="按文件内容或文件路径搜索"></a>按文件内容或文件路径搜索</h3><p>使用 <code>in</code> 限定符，您可以将搜索限制为源代码文件的内容、文件路径或两者。如果省略此限定符，则只搜索文件内容。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>in:file</code></td><td align="left"><strong>octocat in:file</strong> 匹配文件内容中出现 “octocat” 的代码。</td></tr><tr><td align="left"><code>in:path</code></td><td align="left"><strong>octocat in:path</strong> 匹配文件路径中出现 “octocat” 的代码。</td></tr><tr><td align="left"></td><td align="left"><strong>octocat in:file,path</strong> 匹配文件内容或文件路径中出现 “octocat” 的代码。</td></tr></tbody></table><h3 id="在用户或组织的仓库内搜索-1"><a href="#在用户或组织的仓库内搜索-1" class="headerlink" title="在用户或组织的仓库内搜索"></a>在用户或组织的仓库内搜索</h3><p>要在特定用户或组织拥有的所有仓库中搜索代码，您可以使用 <code>user</code> 或 <code>org</code> 限定符。要在特定仓库中搜索代码，您可以使用 <code>repo</code> 限定符。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>user:*USERNAME*</code></td><td align="left"><strong>user:defunkt extension:rb</strong> 匹配来自 @defunkt、以 <em>.rb</em> 结尾的代码。</td></tr><tr><td align="left"><code>org:*ORGNAME*</code></td><td align="left"><strong>org:github extension:js</strong> 匹配来自 GitHub、以 <em>.js</em> 结尾的代码。</td></tr><tr><td align="left"><code>repo:*USERNAME/REPOSITORY*</code></td><td align="left"><strong>repo:mozilla/shumway extension:as</strong> 匹配来自 @mozilla 的 shumway 项目、以 <em>.as</em> 结尾的代码。</td></tr></tbody></table><h3 id="按文件位置搜索"><a href="#按文件位置搜索" class="headerlink" title="按文件位置搜索"></a>按文件位置搜索</h3><p>可使用 <code>path</code> 限定符搜索仓库中特定位置显示的源代码。使用 <code>path:/</code> 可搜索位于仓库根目录级别的文件。或者，指定目录名称或目录路径以搜索位于该命令或其任何子目录中的文件。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>path:/</code></td><td align="left"><strong>octocat filename:readme path:/</strong> 匹配位于仓库根目录级别且含有 “octocat” 字样的 <em>readme</em> 文件。</td></tr><tr><td align="left"><code>path:*DIRECTORY*</code></td><td align="left"><strong>form path:cgi-bin language:perl</strong> 匹配位于 <em>cgi-bin</em> 目录或其任何子目录中且含有 “form” 字样的 Perl 文件。</td></tr><tr><td align="left"><code>path:*PATH/TO/DIRECTORY*</code></td><td align="left"><strong>console path:app/public language:javascript</strong> 匹配 <em>app/public</em> 目录或其任何子目录（即使其位于 <em>app/public/js/form-validators</em> 中）中且含有 “console” 字样的 JavaScript 文件。</td></tr></tbody></table><h3 id="按语言搜索-1"><a href="#按语言搜索-1" class="headerlink" title="按语言搜索"></a>按语言搜索</h3><p>可以基于所编写的语言搜索代码。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>language:*LANGUAGE*</code></td><td align="left"><strong>element language:xml size:100</strong> 匹配标记为 XML 且恰好有 100 个字节的并含有 “element” 字样的代码。</td></tr><tr><td align="left"></td><td align="left"><strong>display language:scss</strong> 匹配标记为 SCSS 且含有 “display” 字样的代码。</td></tr><tr><td align="left"></td><td align="left"><strong>org:mozilla language:markdown</strong> 匹配标记为 Markdown 且来自所有 @mozilla 仓库的代码。</td></tr></tbody></table><h3 id="按文件大小搜索"><a href="#按文件大小搜索" class="headerlink" title="按文件大小搜索"></a>按文件大小搜索</h3><p>可以使用 <code>size</code> 限定符基于代码所在文件的大小搜索源代码。<code>size</code> 限定符使用大于、小于和范围限定符基于在其中找到代码的文件的字节大小来过滤结果。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>size:*n*</code></td><td align="left"><strong>function size:&gt;10000 language:python</strong> 匹配含有 “function” 字样、以 Python 编写、位于大于 10 KB 的文件中的代码。</td></tr></tbody></table><h3 id="按文件名搜索"><a href="#按文件名搜索" class="headerlink" title="按文件名搜索"></a>按文件名搜索</h3><p><code>filename</code> 限定符匹配具有特定文件名的代码文件。您还可以使用文件查找器在仓库中查找文件。更多信息请参阅“在 GitHub 上查找文件”。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>filename:*FILENAME*</code></td><td align="left"><strong>filename:linguist</strong> 匹配名为 “linguist” 的文件。</td></tr><tr><td align="left"></td><td align="left"><strong>filename:.vimrc commands</strong> 匹配含有 “commands” 字样的 <em>.vimrc</em> 文件。</td></tr><tr><td align="left"></td><td align="left"><strong>filename:test_helper path:test language:ruby</strong> 匹配 <em>test</em> 目录内名为 <em>test_helper</em> 的 Ruby 文件。</td></tr></tbody></table><h3 id="按文件扩展名搜索"><a href="#按文件扩展名搜索" class="headerlink" title="按文件扩展名搜索"></a>按文件扩展名搜索</h3><p><code>extension</code> 限定符匹配具有特定文件扩展名的代码文件。</p><table><thead><tr><th align="left">限定符</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>extension:*EXTENSION*</code></td><td align="left"><strong>form path:cgi-bin extension:pm</strong> 匹配含有 “form” 字样、位于 <em>cgi-bin</em> 下且具有 <em>.pm</em> 文件扩展名的代码。</td></tr><tr><td align="left"></td><td align="left"><strong>icon size:&gt;200000 extension:css</strong> 匹配大于 200 KB、以 .css 结尾且含有 “icon” 字样的文件。</td></tr></tbody></table><h2 id="github官方高级搜索页面"><a href="#github官方高级搜索页面" class="headerlink" title="github官方高级搜索页面"></a>github官方高级搜索页面</h2><p>github官方地址：<a href="https://github.com/search/advanced">https://github.com/search/advanced</a></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何完全卸载AutoCAD</title>
      <link href="/article/%E5%A6%82%E4%BD%95%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BDAutoCAD/"/>
      <url>/article/%E5%A6%82%E4%BD%95%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BDAutoCAD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近开发CAD图纸相关，卸载重装AutoCAD时遇装不上了，提示是已安装。这是因为上一次卸载后没有清理干净。</p><span id="more"></span><h2 id="如何完全卸载AutoCAD"><a href="#如何完全卸载AutoCAD" class="headerlink" title="如何完全卸载AutoCAD"></a>如何完全卸载AutoCAD</h2><p>先说明我的操作系统是 <code>window 10 专业版</code>，安装的CAD版本是 <code>AutoCAD 2020简体中文版</code>。</p><p>具体操作如下：</p><p>1、在电脑左下角，<code>开始（Windows）</code> &gt; <code>设置</code> &gt; <code>应用</code> &gt; <code>应用和功能</code> 最下面找到<code>程序和功能</code> 点击打开 <code>卸载或更改程序</code> ，在控制面板中，找到<strong>Autodesk</strong>，一个一个的只要是能卸载的，都卸载掉。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FTIM-20200726081959.png" alt="如何完全卸载cad"></p><p>2、打开桌面我的电脑，找到AUTOCAD安装的文件夹，删掉。一般是在C盘，或自己装的其它盘。都看看，找到删掉。</p><p>还有一个隐藏位置，在<code>C://ProgramData</code>下，都删了，这里包含你安装的CAD所有版本。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FTIM-20200726082227.png" alt="如何完全卸载cad"></p><p>3、彻底删除CAD注册表</p><p>在电脑左下角，点开始，运行，输入<code>regedit</code>回车或点确定。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FTIM-20200726082331.png" alt="如何完全卸载cad"></p><p>出现注册表，找到“HKEY_CURRENT_USER\software\”目录下的Autodesk文件夹，在Autodesk文件夹上右键，删除。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FTIM-20200726082552.png" alt="如何完全卸载（删除）cad吗？"></p><p>找到“HKEY_LOCAL_MACHINE\software\”目录下的Autodesk文件夹，在Autodesk文件夹上右键，删掉。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FTIM-20200726082659.png" alt="如何完全卸载（删除）cad吗？"></p><p>删除“HKEY_LOCAL_MACHINE\software\classes\installer\products”目录下的挨个找一遍，一般会出现开头和尾号一样的几条在一起，看右边是否有<code>AutoCAD</code>字样，有就删掉。</p><p>注：这里不同版本的CAD，products下的可能不一样，大家点开耐心看图二右侧处是不是CAD，是的话删除。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FTIM-20200726082817.png" alt="如何完全卸载CAD"></p><p>再关闭注册表，现在再重装就能装上了。</p><h2 id="安装异常"><a href="#安装异常" class="headerlink" title="安装异常"></a>安装异常</h2><h3 id="安装CAD时，提示1603错误"><a href="#安装CAD时，提示1603错误" class="headerlink" title="安装CAD时，提示1603错误"></a>安装CAD时，提示1603错误</h3><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fautocad-error-1603.png" alt="安装CAD时，提示1603错误"></p><ol><li><p>删除安装程序，找到一下路径<code>C:\Program Files (x86)\Common Files\Autodesk Shared\AdskLicensing</code>，然后以管理员身份运行duUNINSTALL.EXE程序，删除软件,重试。</p></li><li><p>如果还存在以上问题，以管理员身份运行命令窗口，然后输入命令<code>C:\Program Files(x86)\Common Files\Autodesk Shared\AdskLicensing\Current\AdskLicensingService\AdskLicensingService.exe</code> 重新安装软件，再试，建议下载最新的安装包</p></li></ol><h3 id="Cad-界面出现乱码"><a href="#Cad-界面出现乱码" class="headerlink" title="Cad 界面出现乱码"></a>Cad 界面出现乱码</h3><p>如图：</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FCAD%E7%95%8C%E9%9D%A2%E4%B9%B1%E7%A0%81.png" alt="CAD界面乱码"></p><p>解决方案：</p><p>找到AutoCAD安装目录跟目下的Fonts文件夹，该文件夹存放的就是字体了，在该文件夹下找到simsun.ttc字体删除就好了。</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FCAD%E7%95%8C%E9%9D%A2%E4%B9%B1%E7%A0%81%E4%BF%AE%E5%A4%8D.png" alt="CAD界面乱码修复"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> AutoCAD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专为编程而生的字体 —— Fira Code</title>
      <link href="/article/%E4%B8%93%E4%B8%BA%E7%BC%96%E7%A8%8B%E8%80%8C%E7%94%9F%E7%9A%84%E5%AD%97%E4%BD%93/"/>
      <url>/article/%E4%B8%93%E4%B8%BA%E7%BC%96%E7%A8%8B%E8%80%8C%E7%94%9F%E7%9A%84%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>程序员使用很多符号，通常用几个字符编码。对于人类大脑，像 <code>-&gt;</code> ，<code>&lt;=</code> 或 <code>:=</code> 这样的序列是单个逻辑标记，即使它们在屏幕上占用两个或三个字符。 您的眼睛花费非零的能量来扫描、解析和连接多个字符到一个逻辑字符中。理想情况下，所有编程语言都应该为运算符设计完整的 Unicode 符号，但目前还不是这样。</p><span id="more"></span><h2 id="迄今为止最漂亮的适合程序员的字体"><a href="#迄今为止最漂亮的适合程序员的字体" class="headerlink" title="迄今为止最漂亮的适合程序员的字体"></a>迄今为止最漂亮的适合程序员的字体</h2><p>这是一款<strong>美到没朋友</strong>的等宽字体 —— Fira Code，<a href="https://github.com/tonsky/FiraCode">github地址在此</a> <a href="https://github.com/tonsky/FiraCode/blob/master/README.md">README.md</a>,可以从这里下载最新版。<a href="https://github.com/tonsky/FiraCode/tree/master/distr">这里</a>多种格式可供选择。</p><p>如题所述，在我们写代码的时候，经常会用到 <code>-&gt;</code>、<code>=&gt;</code>、<code>::</code>、<code>&gt;=</code>、<code>.=</code> 等超过一个字符的操作符，但是这个操作符其实在现实生活中，很多都有与之对应的数学符号，只是因为不能通过常规的方式输入而选择用多个字符代表一个操作符。而 Fira Code 包含一组用于常见编程多字符组合的连字，它通过渲染，将我们输入的多个字符变为更有意义的数学符号，<strong>这有助于更快地阅读和理解代码。</strong>不仅如此，Fira Code 还更正了一些常见操作符，比如 <code>...</code>、<code>\\</code> 等的字符间距。</p><p>但请注意：</p><ol><li>Fira Code 只是将你输入的字符渲染呈现成连字，只是样子发生变化，功能没有发生任何改变。</li><li>Fira Code 的连字可能会给一些不用 Fira Code 字体的人带来困扰，因为原来的语法里没有这些符号。</li></ol><p>先上段代码感受下：</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2FTIM%E6%88%AA%E5%9B%BE20200725102225.png" alt="Fira Code预览"></p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/picgo/Fira%20Code.png" alt="FiraCode的具体字符演示"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>以 VSCode 为例。</p><ol><li><p>打开 vscode 的配置页面，按住 <code>CTRL + SHIFT + P</code>，然后输入 <code>settings</code>，选择<code>首选项：打开设置（json）</code>；</p></li><li><p>将下列代码复制到 setting.json 中。</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;Fira Code&#x27;, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span><span class="punctuation">,</span><span class="comment">//将 &#x27;Fira Code&#x27; 放在最前面</span></span><br></pre></td></tr></table></figure><p> 如果想某个类型文件中生效需添加：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fira Code&quot;</span><span class="punctuation">,</span><span class="comment">//设置的字体类型为 Fira Code</span></span><br><span class="line"><span class="attr">&quot;editor.fontLigatures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//这个控制是否启用字体连字，true启用，false不启用，这里选择启用</span></span><br><span class="line"><span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span><span class="comment">//设置字体大小</span></span><br><span class="line"><span class="attr">&quot;editor.fontWeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span><span class="comment">//这个设置字体粗细，可选normal,bold,&quot;100&quot;~&quot;900&quot;等，选择合适的就行</span></span><br></pre></td></tr></table></figure></li><li><p>然后保存，字体就应用成功了。</p></li></ol><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/tonsky/FiraCode@1.206/distr/fira_code.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="keyword">@import</span> url(<span class="attribute">https</span>://cdn.jsdelivr.net/gh/tonsky/FiraCode@<span class="number">1.206</span>/distr/fira_code.css);</span><br><span class="line"><span class="comment">/* Specify in CSS */</span></span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;Fira Code&#x27;</span>, monospace;</span><br></pre></td></tr></table></figure><ul><li>IE 10+，Edge：使用 font-feature-settings启用：“calt”1;</li><li>火狐</li><li>Safari浏览器</li><li>基于 Chromium 的浏览器（Chrome，Opera）</li><li>ACE</li><li>CodeMirror（使用 font-variant-ligatures: contextual; 启用）</li><li>JetBrains Mono介绍和下载：<a href="https://www.jetbrains.com/lp/mono(%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90)">https://www.jetbrains.com/lp/mono(免费开源)</a></li></ul><h2 id="其他带有连字的等宽字体"><a href="#其他带有连字的等宽字体" class="headerlink" title="其他带有连字的等宽字体"></a>其他带有连字的等宽字体</h2><ul><li><a href="https://github.com/i-tu/Hasklig">Hasklig </a>（免费）</li><li><a href="http://www.fsd.it/fonts/pragmatapro.htm">PragmataPro </a>（€59）</li><li><a href="http://larsenwork.com/monoid/">Monoid </a>（免费）</li><li><a href="https://github.com/kika/fixedsys">Fixedsys Excelsior </a>（免费）</li><li><a href="https://be5invis.github.io/Iosevka/">Iosevka </a>（免费）</li><li><a href="https://github.com/SSNikolaevich/DejaVuSansCode">DejaVu Sans Code </a>（免费）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 字体 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js之Promise</title>
      <link href="/article/Js%E4%B9%8BPromise/"/>
      <url>/article/Js%E4%B9%8BPromise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="promise是什么？"><a href="#promise是什么？" class="headerlink" title="promise是什么？"></a>promise是什么？</h2><ul><li>promise是一个对象，对象和函数的区别就是对象可以保存状态，有3个状态分别是：等待态（默认） 成功态 失败态，函数不可以（闭包除外）</li><li>并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据</li><li>代码风格，容易理解，便于维护</li><li>多个异步等待合并便于解决</li></ul><p>ES6 原生提供了 Promise 对象。</p><span id="more"></span><h2 id="promise-之前如何异步操作"><a href="#promise-之前如何异步操作" class="headerlink" title="promise 之前如何异步操作"></a>promise 之前如何异步操作</h2><h3 id="1-事件监听"><a href="#1-事件监听" class="headerlink" title="1. 事件监听"></a>1. 事件监听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;#start&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, start, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 响应事件，进行相应的操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// jquery on 监听</span></span><br><span class="line">$(<span class="string">&#x27;#start&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, start)</span><br></pre></td></tr></table></figure><h3 id="2-回调"><a href="#2-回调" class="headerlink" title="2. 回调"></a>2. 回调</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较常见的有ajax</span></span><br><span class="line">$.<span class="title function_">ajax</span>(<span class="string">&#x27;http://www.wysite.com/&#x27;</span>, &#123;</span><br><span class="line"> success (res) &#123;</span><br><span class="line">   <span class="comment">// 这里可以监听res返回的数据做回调逻辑的处理</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者在页面加载完毕后回调</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">// 页面结构加载完成，做回调逻辑处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>异步回调的问题</strong>：</p><ul><li>之前处理异步是通过纯粹的回调函数的形式进行处理</li><li>很容易进入到回调地狱中，剥夺了函数return的能力</li><li>问题可以解决，但是难以读懂，维护困难</li><li>稍有不慎就会踏入回调地狱 - 嵌套层次深，不好维护</li></ul><h2 id="promise-如何异步操作"><a href="#promise-如何异步操作" class="headerlink" title="promise 如何异步操作"></a>promise 如何异步操作</h2><blockquote><p>使用回调函数存在的问题在于他剥夺了我们使用 <code>return</code> 和 <code>throw</code> 这些关键字的能力。而 Promise 很好地解决了这一切。</p></blockquote><p>每个promise实例都有一个<code>.then</code>方法。<code>resolve</code>（成功）,<code>reject</code>（失败）。<br><code>resolve</code>,<code>reject</code>是自己定义的，你需要他成功或者失败，要先调用的是谁？一旦成功了就不能失败；如果你手动抛出一个异常那就注定会进失败的结果了；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//耗时异步操作</span></span><br><span class="line">   <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>); <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span>&#123;    <span class="comment">//成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span> =&gt;</span>&#123;   <span class="comment">//失败</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>,err)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//成功</span></span><br></pre></td></tr></table></figure><p>其中：</p><ol><li><p>resolve作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p></li><li><p>promise有三个状态：<br>   1、pending[待定]初始状态<br>   2、fulfilled[实现]操作成功<br>   3、rejected[被否决]操作失败<br>   当promise状态发生改变，就会触发then()里的响应函数处理后续步骤；<br>   promise状态一经改变，不会再变。</p></li><li><p>Promise对象的状态改变，只有两种可能：<br>   从pending变为fulfilled<br>   从pending变为rejected。<br>   这两种情况只要发生，状态就凝固了，不会再变了。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p></li></ol><h2 id="promise-api"><a href="#promise-api" class="headerlink" title="promise api"></a>promise api</h2><ul><li><p>romise.resolve()</p></li><li><p>Promise.reject()</p></li><li><p>Promise.prototype.then()</p></li><li><p>Promise.prototype.catch()</p></li><li><p>Promise.all() // 所有的完成</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]);</span><br></pre></td></tr></table></figure><ul><li>Promise.race() // 竞速，完成一个即可</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"><strong>Promise</strong> - JavaScript | MDN</a></li><li><a href="https://www.jianshu.com/p/063f7e490e9a">Javascript 中的神器——Promise</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544">Promise @廖雪峰</a></li><li><a href="https://www.jianshu.com/p/1b63a13c2701">promise @王云飞_小四_wyunfei</a></li><li><a href="https://blog.csdn.net/qq_34645412/article/details/81170576">ES6 Promise用法小结</a></li><li><a href="https://zhuanlan.zhihu.com/p/146895201">从0到1掌握Promise</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结2019，展望2020</title>
      <link href="/article/zj2019-zw2020/"/>
      <url>/article/zj2019-zw2020/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2019年也接近尾声了，一直想写个总结，留坑已久，要么因为工作，要么因为个人还未想好要怎么写，直到现在，2020已来。</p><h3 id="回顾2018"><a href="#回顾2018" class="headerlink" title="回顾2018"></a>回顾2018</h3><p>先看一眼<a href="/article/%E5%86%8D%E8%A7%812018%EF%BC%8C%E4%BD%A0%E5%A5%BD2019/">2018年总结</a>。</p><p>2018年终期望实现情况：</p><ul><li>2018年接触到了很多新的开发语言，像<code>Kotlin</code>、<code>Flutter</code>、<code>Electron</code>等，19年除了使用<code>Kotlin</code>开发过项目写过App，使用<code>Electron</code>写过一个简单的音乐播放器（跟着教程写的）外，<code>Flutter</code>、<code>Vue</code>、<code>TypeScript</code>等基本都没有进展，<code>Kotlin</code>仍有像<code>高阶函数</code>、<code>协程</code>这样的硬骨头要啃。</li><li>2018年阅读技术软文的习惯，2019仍在延续，但相比18年，阅读量有所减少，现在更喜欢将所读到、动手实践（编程）得到知识，心得体会记录下来。</li></ul><h3 id="总结2019"><a href="#总结2019" class="headerlink" title="总结2019"></a>总结2019</h3><h4 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h4><p>总的来说，2019年，基本已经没有参与App的开发，主要的工作精力放在了Three.js引擎的开发和跟进维护，参与的项目有<em>DC设计器引擎</em>以及其衍生项目<em>HW数字化3D引擎</em>。接触Three.js快一年了，比起刚刚接触Three.js时一脸懵逼，现在已经好很多，很多的问题和需求已经可以独立开发。</p><p>年尾两个月开始转向Cesium 3D引擎的开发，此时又有了刚开始Three.js开发时的无力感。除了在之前Three.js引擎中积累的3D知识经验外，其他又踏上了从零学习之路，Cesium中很多新的知识都要自习。</p><p>2019年养成新的习惯，虽说开始也是被动的，但最终想来也是好的，那就是每周总结周报。我记录周报的习惯一般是现将之前未完成的罗列记录，新接到的需求也先纳入记录，待完成后标记完成。这样的好处就是可以帮助我们记录我们工作方向，那些急需完成，那些未完成，规划好时间，本周做不完的需要延续到次周，这样我们的目标便更加明确了。</p><h4 id="个人技能提升"><a href="#个人技能提升" class="headerlink" title="个人技能提升"></a>个人技能提升</h4><p>至于个人技能方面，2019，想了想，好像也没学习什么新的知识或涉及新的领域。说有提升，也是有的，2019虽说没参与公司App开发，但自己有需求或者巩固下Android知识不至于遗忘，还是会建一些demo级的App，主要是面向一些知识点或某个框架，今年新建的App全部采用了Kotlin开发，顺便提升下kotlin开发技能和运用。18年时接触过Flutter开发App，但今年却运用很少，在这方面提升甚微，希望2020年有所突破。</p><p>19年还有个比较大的提升就是培养自己多写文档，不止用于公司产品（引擎API文档），自己学习和积累都采用文档的形式记录下来。俗话说，好记性不如烂笔头。18年时，文档采用gitbook发布为电子书的形式，今年，改用vuepress(基于Node.js)发布线上文档，访问加载速度比gitbook更好。</p><p>知识在于积累，除了记录学习笔记外，我还建了两个面经库（<a href="https://sogrey.top/Android_QA/">Android 面经库</a>、 <a href="https://sogrey.top/Web-QA/">前端面经库</a>），旨在记录平时阅读时、工作中遇到的问题及解决方案。</p><p>年末双12购入自己朝思暮想第一个域名（<a href="sogrey.top">sogrey.top</a>）（真心图便宜），用于绑定我的github pages。</p><h4 id="存在不足"><a href="#存在不足" class="headerlink" title="存在不足"></a>存在不足</h4><ul><li>虽然接触Three.js快一年了，实现公司引擎业务也不想起初那样技穷。但直到现在也没有彻底把Three.js系统化的理一遍，一直都是有了需求采取研究寻找解决方案，处于被动。期间只简单整理了些（<a href="https://sogrey.top/Three.js-start/">Three.js-start</a>）。</li><li>切入Cesium，虽然仍是需求驱动，但是这次并不像学习Three.js一样，只学习和了解了需求中遇到的方面，闲余时间查阅了很多系列教程、博客、视频，列出一个很简陋的学习路线和框架（<a href="https://sogrey.top/Cesium-start/">Cesium 入门</a>），自己根据这样的一个路线学习。现在仍有两三个大的核心的还没有做深入学习，处于空白。即使学习了解过得知识也不一定理解的很透彻。</li><li>2019年总起说起来有些懒散了，除了最后两个月学习Cesium时认认真真的查阅资料学习整理外，其他记录笔记很少，Three.js也有记录但更新频率很低，毕竟有的知识慢慢熟悉起来也觉得懒得记录了，后面遇到问题明明记得看到过却想不起来，想查阅却没有东西可查。</li></ul><h3 id="展望2020"><a href="#展望2020" class="headerlink" title="展望2020"></a>展望2020</h3><h4 id="工作方面"><a href="#工作方面" class="headerlink" title="工作方面"></a>工作方面</h4><p>参与Cesium引擎开发，仍需很多东西要学，总是觉得没有方向，刚确定一个比较粗略的路线想系统的学习一下。由于是团队开发，而我们各自开发某个模块，我先采用插件式开发，开发时可脱离主API，开发完成或成型时在引入调用。学无止境，我把学习中遇到的好的资源、教程、博客、开源项目、资源收录在一起，共享学习资料。希望新的一年，站在这些巨人肩上能有更高的拔升。</p><p>Three.js引擎，仍有新的需求，比如同一个页面展示多个canvas用来展示多个场景，并且每个不相互干扰，这是个新的方向，可能会对之前引擎大改。</p><p>至于对于公司的工作建议或其他建议：</p><ul><li>需求明确化。需求是产品的前提，在做产品时第一步就是要明确需求，这样的产品才不会脱离方向。做App最不想听到的是<code>照5D BIM平台功能做个5D BIM App出来。</code>可以做，要做成什么样，使用什么样的主题，哪些功能能在App上比较实用，而哪些并不实用，实现以什么样的方式实现，有没有相关的设计样例图例，这些都是需求。</li><li>周报制度继续沿用。为了有效推进公司各项管理工作，进一步发挥管理部门职能作用，加强信息沟通与交流，便于公司领导了解主要工作进展情况。这些说起来很大，往小了说，便于自己明确自己的工作重心及工作内容，发现自己的不足，防止跑偏。每周我们都有自己的开发内容，也有不定期不定时新来的需求，先把它们一一列队，编好轻重缓急标识，再去一一攻克解决他们。</li><li>适当一些培训。不论是技术还是产品，适当的一些培训也好让员工了解自己公司的产品，以及提出好的意见，商务向客户推荐我们产品更有底气，开发对于产品有了更深的了解，开发起来也更顺手。不用再一个人埋头琢磨（经常性打扰别人自己也觉得不好意思了）。</li></ul><h4 id="个人方面"><a href="#个人方面" class="headerlink" title="个人方面"></a>个人方面</h4><ul><li>考取驾照。</li></ul><p>至于新知识的学习和巩固提升：</p><ul><li>移动开发kotlin、flutter、以及组件化、MVP等都是提升目标，列在计划。</li><li>引擎开发，Three.js和Cesium，尤其是Cesium要学习的很多 。</li><li>继续维护<a href="https://sogrey.top/Android_QA/">Android 面经库</a>和<a href="https://sogrey.top/Web-QA/">前端面经库</a>，并完善<a href="https://sogrey.top/Cesium-start/">Cesium 入门</a>，完善Cesium知识提升应用能力。</li><li>入手ECMAScript 6、webpack（Anguler、vue）、TypeScript</li></ul><p>总结现在，着眼未来！做更好的自己，成为公司期望的优秀成员！2020年，希望一切都好，继续努力。</p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hugo搭建个人博客</title>
      <link href="/article/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/article/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前使用<a href="https://hexo.io/"><code>Hexo</code></a>(<a href="https://sogrey.github.io/">https://sogrey.github.io/</a> <a href="https://github.com/Sogrey/Sogrey.github.io">github</a>)和<a href="http://jekyllcn.com/"><code>jekyll</code></a>(<a href="http://sogrey.gitee.io/">http://sogrey.gitee.io/</a> <a href="https://gitee.com/Sogrey/Sogrey">gitee</a>(私有仓库))搭建过个人博客，这次选择<code>Hugo</code>试试。</p><span id="more"></span><h2 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h2><p><a href="https://gohugo.io/">Hugo</a> 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>windows:</p><p>推荐二进制安装（简单、快速）</p><p>到 <a href="https://github.com/gohugoio/hugo/releases">Hugo Releases</a> 下载对应的操作系统版本的Hugo二进制文件（hugo或者<code>hugo.exe</code>）</p><p>Hugo Releases：<a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a></p><p>我下载到<code>hugo_0.60.1_Windows-64bit.zip</code>，解压后进入文件夹，会看到一个<code>hugo.exe</code>文件，将<code>hugo.exe</code>所在的目录添加到系统环境变量PATH下面,使用<code>cmd</code>命令行执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hugo version</span><br><span class="line">Hugo Static Site Generator v0.60.1-96066756 windows/amd64 BuildDate: 2019-11-29T14:57:23Z</span><br></pre></td></tr></table></figure><p>说明已配置成功。</p><p>mac:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install hugo</span><br><span class="line">hugo version</span><br></pre></td></tr></table></figure><p>请自行验证。</p><h2 id="创建站点和文章"><a href="#创建站点和文章" class="headerlink" title="创建站点和文章"></a>创建站点和文章</h2><h3 id="创建站点"><a href="#创建站点" class="headerlink" title="创建站点"></a>创建站点</h3><p>一行命令搞定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ hugo new site HugoSite</span><br><span class="line">Congratulations! Your new Hugo site is created <span class="keyword">in</span> G:\workspace\github\sogrey\hugo\HugoSite.</span><br><span class="line"></span><br><span class="line">Just a few more steps and you<span class="string">&#x27;re ready to go:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. Download a theme into the same-named folder.</span></span><br><span class="line"><span class="string">   Choose a theme from https://themes.gohugo.io/ or</span></span><br><span class="line"><span class="string">   create your own with the &quot;hugo new theme &lt;THEMENAME&gt;&quot; command.</span></span><br><span class="line"><span class="string">2. Perhaps you want to add some content. You can add single files</span></span><br><span class="line"><span class="string">   with &quot;hugo new &lt;SECTIONNAME&gt;\&lt;FILENAME&gt;.&lt;FORMAT&gt;&quot;.</span></span><br><span class="line"><span class="string">3. Start the built-in live server via &quot;hugo server&quot;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Visit https://gohugo.io/ for quickstart guide and full documentation.</span></span><br></pre></td></tr></table></figure><p>站点就创建好了，目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HugoSite/</span><br><span class="line">    archetypes/ </span><br><span class="line">    content/ </span><br><span class="line">    data/ </span><br><span class="line">    layouts/ </span><br><span class="line">    static/ </span><br><span class="line">    themes/</span><br><span class="line">    config.toml</span><br></pre></td></tr></table></figure><p>进入<code>HugoSite</code>目录，创建一篇文章吧。</p><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>在站点目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hugo new HelloWorld.md</span><br><span class="line">G:\workspace\github\sogrey\hugo\HugoSite\content\HelloWorld.md created</span><br></pre></td></tr></table></figure><p>创建第一篇文章<code>HelloWorld</code>。</p><p>打开<code>HelloWorld.md</code>（该文件位于 <code>HugoSite/content/</code>目录下）文件进行编辑，我是用的编辑器是<a href="http://typora.io/">typora</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;HelloWorld&quot;</span><br><span class="line">date: 2019-12-04T23:39:58+08:00</span><br><span class="line">tags = [&quot;Hugo&quot;]</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># Hello World</span><br></pre></td></tr></table></figure><blockquote><p>这里使用markdown来编写文章</p></blockquote><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>修改配置文件config.toml：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//默认为：</span><br><span class="line"><span class="attr">baseURL</span> = <span class="string">&quot;http://example.org/&quot;</span></span><br><span class="line"><span class="attr">languageCode</span> = <span class="string">&quot;en-us&quot;</span></span><br><span class="line"><span class="attr">title</span> = <span class="string">&quot;My New Hugo Site&quot;</span></span><br><span class="line">//修改为</span><br><span class="line"><span class="attr">baseURL</span> = <span class="string">&quot;github发布出去的博客地址&quot;</span></span><br><span class="line"><span class="attr">languageCode</span> = <span class="string">&quot;en-us&quot;</span></span><br><span class="line"><span class="attr">title</span> = <span class="string">&quot;My New Hugo Site&quot;</span></span><br><span class="line"><span class="attr">publishDir</span> = <span class="string">&quot;publish&quot;</span></span><br></pre></td></tr></table></figure><p>修改了baseURL，并增加了publishDir。publishDir的修改是因为：当在content目录下添加了.md文件后，需要执行<code>hugo -t &lt;主题名&gt;</code>来用hugo把发布用的目录编译出来，而默认的编译目录名为<code>publish</code>。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>Hugo themes：<a href="https://themes.gohugo.io/">https://themes.gohugo.io/</a></p><p>你可以到上面的网站中挑选你喜欢的主题。然后，根据指引找到<code>github</code>项目地址进行下载。</p><p>我这里选择<a href="https://themes.gohugo.io/hyde/">hyde</a> (<a href="https://github.com/spf13/hyde">github</a>),把主题通过git克隆或直接下载到本地。放到 <code>HugoSite/themes/</code>目录下,执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/spf13/hyde.git</span><br></pre></td></tr></table></figure><p>在“config.toml”文件中指定“hyde”作为默认主题。只需添加行:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme</span> = <span class="string">&quot;hyde&quot;</span></span><br></pre></td></tr></table></figure><p>配置主题<code>theme.toml</code>:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span> = <span class="string">&quot;Sogrey&#x27;s Hugo Site&quot;</span></span><br><span class="line"><span class="attr">license</span> = <span class="string">&quot;MIT&quot;</span></span><br><span class="line"><span class="attr">licenselink</span> = <span class="string">&quot;https://sogrey.github.io/about/mit.html&quot;</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;Sogrey&#x27;s Hugo Site&quot;</span></span><br><span class="line"><span class="attr">tags</span> = [<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;hugo&quot;</span>]</span><br><span class="line"><span class="attr">features</span> = [<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;themes&quot;</span>, <span class="string">&quot;disqus&quot;</span>]</span><br><span class="line"><span class="attr">min_version</span> = <span class="number">0.53</span></span><br><span class="line"></span><br><span class="line"><span class="section">[author]</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;Sogrey&quot;</span></span><br><span class="line">    <span class="attr">homepage</span> = <span class="string">&quot;https://sogrey.github.io&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If Porting existing theme</span></span><br><span class="line"><span class="section">[original]</span></span><br><span class="line">    <span class="attr">author</span> =  <span class="string">&quot;mdo&quot;</span></span><br><span class="line">    <span class="attr">homepage</span> = <span class="string">&quot;http://markdotto.com/&quot;</span></span><br><span class="line">    <span class="attr">repo</span> = <span class="string">&quot;https://www.github.com/mdo/hyde&quot;</span></span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ hugo server</span><br><span class="line">Building sites …</span><br><span class="line">                   | EN</span><br><span class="line">+------------------+----+</span><br><span class="line">  Pages            |  8</span><br><span class="line">  Paginator pages  |  0</span><br><span class="line">  Non-page files   |  0</span><br><span class="line">  Static files     |  6</span><br><span class="line">  Processed images |  0</span><br><span class="line">  Aliases          |  0</span><br><span class="line">  Sitemaps         |  1</span><br><span class="line">  Cleaned          |  0</span><br><span class="line"></span><br><span class="line">Built <span class="keyword">in</span> 5 ms</span><br><span class="line">Watching <span class="keyword">for</span> changes <span class="keyword">in</span> G:\workspace\github\sogrey\hugo\HugoSite\&#123;archetypes,content,data,layouts,static,themes&#125;</span><br><span class="line">Watching <span class="keyword">for</span> config changes <span class="keyword">in</span> G:\workspace\github\sogrey\hugo\HugoSite\config.toml</span><br><span class="line">Environment: <span class="string">&quot;development&quot;</span></span><br><span class="line">Serving pages from memory</span><br><span class="line">Running <span class="keyword">in</span> Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender</span><br><span class="line">Web Server is available at http://localhost:1313/HugoSite/ (<span class="built_in">bind</span> address 127.0.0.1)</span><br><span class="line">Press Ctrl+C to stop</span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:1313/HugoSite/</code></p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey-hugo-site.jpg"></p><p>站点就搭建好了。</p><h2 id="上传部署到GitHub"><a href="#上传部署到GitHub" class="headerlink" title="上传部署到GitHub"></a>上传部署到GitHub</h2><p>在github上新建仓库，我这里命名为<a href="https://github.com/Sogrey/HugoSite"><code>HugoSite</code></a>。</p><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ hugo -t hyde</span><br><span class="line">Building sites …</span><br><span class="line">                   | EN</span><br><span class="line">+------------------+----+</span><br><span class="line">  Pages            |  8</span><br><span class="line">  Paginator pages  |  0</span><br><span class="line">  Non-page files   |  0</span><br><span class="line">  Static files     |  6</span><br><span class="line">  Processed images |  0</span><br><span class="line">  Aliases          |  0</span><br><span class="line">  Sitemaps         |  1</span><br><span class="line">  Cleaned          |  0</span><br><span class="line"></span><br><span class="line">Total <span class="keyword">in</span> 43 ms</span><br></pre></td></tr></table></figure><p>多了<code>publish</code>,就是用于存放编译后的站点文件。</p><h3 id="推送github"><a href="#推送github" class="headerlink" title="推送github"></a>推送github</h3><p>我习惯将源码推送<code>master</code>主分支，站点发布在<code>gh-pages</code>分支，已提供好<a href="https://github.com/Sogrey/HugoSite/blob/master/deploy.sh"><code>deploy.sh</code></a>，修改其中的github地址为你自己的地址，尽情使用吧！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保脚本抛出遇到的错误</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32;40m [1/3] \033[0m commit 2 master branch&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&quot;</span></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&#x27;deploy master&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你想要部署到 https://USERNAME.github.io</span></span><br><span class="line">git push -f https://github.com/Sogrey/HugoSite.git master</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32;40m [2/3] \033[0m Building static files&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hugo -t hyde</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32;40m [3/3] \033[0m commit 2 gh-pages branch&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 进入生成的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> publish</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是发布到自定义域名</span></span><br><span class="line"><span class="comment"># echo &#x27;www.yourwebsite.com&#x27; &gt; CNAME</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&#x27;deploy gh-pages(web site)&#x27;</span></span><br><span class="line"></span><br><span class="line">git push -f https://github.com/Sogrey/HugoSite.git master:gh-pages</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure><p>执行如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">$ bash deploy.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ____        U  ___ u    ____      ____     U _____ u   __   __</span><br><span class="line"> / __<span class="string">&quot;| u      \/&quot;</span>_ \/ U /<span class="string">&quot;___|u U |  _&quot;</span>\ u  \| ___<span class="string">&quot;|/   \ \ / /</span></span><br><span class="line"><span class="string">&lt;\___ \/       | | | | \| |  _ /  \| |_) |/   |  _|&quot;</span>      \ V /</span><br><span class="line"> u___) |   .-,_| |_| |  | |_| |    |  _ &lt;     | |___     U_|<span class="string">&quot;|_u</span></span><br><span class="line"><span class="string"> |____/&gt;&gt;   \_)-\___/    \____|    |_| \_\    |_____|      |_|</span></span><br><span class="line"><span class="string">  )(  (__)       \\      _)(|_     //   \\_   &lt;&lt;   &gt;&gt;  .-,//|(_</span></span><br><span class="line"><span class="string"> (__)  .github.io(__)    (__)__)   (__)  (__) (__) (__)  \_) (__)  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [1/3]  commit 2 master branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Reinitialized existing Git repository in G:/workspace/github/sogrey/hugo/HugoSite/.git/</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in content/HelloWorld.md.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in publish/categories/index.xml.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in publish/helloworld/index.html.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in publish/index.xml.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in publish/sitemap.xml.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in publish/tags/index.xml.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">[master 60c0113] deploy master</span></span><br><span class="line"><span class="string"> 1 file changed, 1 insertion(+), 1 deletion(-)</span></span><br><span class="line"><span class="string">Enumerating objects: 7, done.</span></span><br><span class="line"><span class="string">Counting objects: 100% (7/7), done.</span></span><br><span class="line"><span class="string">Delta compression using up to 8 threads</span></span><br><span class="line"><span class="string">Compressing objects: 100% (3/3), done.</span></span><br><span class="line"><span class="string">Writing objects: 100% (4/4), 435 bytes | 435.00 KiB/s, done.</span></span><br><span class="line"><span class="string">Total 4 (delta 1), reused 0 (delta 0)</span></span><br><span class="line"><span class="string">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</span></span><br><span class="line"><span class="string">To https://github.com/Sogrey/HugoSite.git</span></span><br><span class="line"><span class="string">   bd0c5f8..60c0113  master -&gt; master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [2/3]  Building static files</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Building sites …</span></span><br><span class="line"><span class="string">                   | EN</span></span><br><span class="line"><span class="string">+------------------+----+</span></span><br><span class="line"><span class="string">  Pages            |  8</span></span><br><span class="line"><span class="string">  Paginator pages  |  0</span></span><br><span class="line"><span class="string">  Non-page files   |  0</span></span><br><span class="line"><span class="string">  Static files     |  6</span></span><br><span class="line"><span class="string">  Processed images |  0</span></span><br><span class="line"><span class="string">  Aliases          |  0</span></span><br><span class="line"><span class="string">  Sitemaps         |  1</span></span><br><span class="line"><span class="string">  Cleaned          |  0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Total in 40 ms</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> [3/3]  commit 2 gh-pages branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Reinitialized existing Git repository in G:/workspace/github/sogrey/hugo/HugoSite/publish/.git/</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in categories/index.xml.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in helloworld/index.html.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in index.xml.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in sitemap.xml.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">warning: LF will be replaced by CRLF in tags/index.xml.</span></span><br><span class="line"><span class="string">The file will have its original line endings in your working directory</span></span><br><span class="line"><span class="string">[master bfe7070] deploy gh-pages(web site)</span></span><br><span class="line"><span class="string"> 3 files changed, 3 insertions(+), 3 deletions(-)</span></span><br><span class="line"><span class="string">Enumerating objects: 11, done.</span></span><br><span class="line"><span class="string">Counting objects: 100% (11/11), done.</span></span><br><span class="line"><span class="string">Delta compression using up to 8 threads</span></span><br><span class="line"><span class="string">Compressing objects: 100% (5/5), done.</span></span><br><span class="line"><span class="string">Writing objects: 100% (6/6), 697 bytes | 697.00 KiB/s, done.</span></span><br><span class="line"><span class="string">Total 6 (delta 4), reused 0 (delta 0)</span></span><br><span class="line"><span class="string">remote: Resolving deltas: 100% (4/4), completed with 4 local objects.</span></span><br><span class="line"><span class="string">To https://github.com/Sogrey/HugoSite.git</span></span><br><span class="line"><span class="string">   ef3e33a..bfe7070  master -&gt; gh-pages</span></span><br><span class="line"><span class="string">/g/workspace/github/sogrey/hugo/HugoSite</span></span><br></pre></td></tr></table></figure><p>访问发布后的<a href="https://sogrey.github.io/HugoSite/">站点</a>;</p>]]></content>
      
      
      <categories>
          
          <category> Hugo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio开发组件化App遇到的问题</title>
      <link href="/article/Android-Studio%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6%E5%8C%96App%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/article/Android-Studio%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6%E5%8C%96App%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于项目需求，需要开发组件化App，开发过程中遇到些问题，特此记录，以防再遇。</p><h2 id="Q1-Compilation-is-not-supported-for-following-modules"><a href="#Q1-Compilation-is-not-supported-for-following-modules" class="headerlink" title="Q1 Compilation is not supported for following modules"></a>Q1 Compilation is not supported for following modules</h2><blockquote><p>Compilation is not supported for following modules: module1, module2, module3. Unfortunately you can’t have non-Gradle Java modules and Android-Gradle modules in one project.</p></blockquote><p>提示以上信息，当然其中的<code>module1, module2, module3</code>是我举例，实际会报告项目中的<code>mudule</code>的名字。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>Then you should go to <code>File</code> -&gt; <code>Invalidate Caches / Restart</code> -&gt; <code>Invalidate Caches &amp; Restart</code>.</p><p>Then try to build the application again.</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>Click on the button:<code>Sync Project with Gradle Files</code></p><h3 id="Solution-3-helpful-for-me"><a href="#Solution-3-helpful-for-me" class="headerlink" title="Solution 3 (helpful for me)"></a>Solution 3 (helpful for me)</h3><p>1- close the project</p><p>2- close <code>Android Studio</code> IDE</p><p>3- delete the <code>.idea</code> directory</p><p>4- delete all <code>.iml</code> files</p><p>5- open <code>Android Studio</code> IDE and import the project</p><span id="more"></span><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/Sync-Project-with-Gradle-Files-1.jpg"></td><td><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/Sync-Project-with-Gradle-Files-2.jpg"></td><td><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/Sync-Project-with-Gradle-Files-3.jpg"></td></tr></tbody></table><h2 id="Q2-依赖重复问题"><a href="#Q2-依赖重复问题" class="headerlink" title="Q2  依赖重复问题"></a>Q2  依赖重复问题</h2><p>一般组件化项目会有一个<code>baselibrary</code>的基础依赖库，基础组件中的依赖jar包,不能使用<code>implementation</code>,要使用<code>api</code>,比如Gson:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api <span class="string">&#x27;com.google.code.gson:gson:2.8.2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Q3-运行后手机上出现多个icon"><a href="#Q3-运行后手机上出现多个icon" class="headerlink" title="Q3  运行后手机上出现多个icon"></a>Q3  运行后手机上出现多个icon</h2><p>所有可能成为library的组件,都要改集成运行时的清单文件,否则还是会出问题</p><p>参考<a href="https://blog.csdn.net/u010899138/article/details/53516400">这里</a></p><h2 id="Q4-依赖库版本号统一"><a href="#Q4-依赖库版本号统一" class="headerlink" title="Q4 依赖库版本号统一"></a>Q4 依赖库版本号统一</h2><p>参考<a href="https://blog.csdn.net/gao_chun/article/details/58105089">这里</a></p><h2 id="Q5-多个ModuleApplication共存问题"><a href="#Q5-多个ModuleApplication共存问题" class="headerlink" title="Q5 多个ModuleApplication共存问题"></a>Q5 多个ModuleApplication共存问题</h2><blockquote><p>Execution failed for task <code>:app:processDebugManifest</code>.<br>Manifest merger failed : Attribute application@name value=(com.baseres.BaseApplication) from AndroidManifest.xml:8:9-51<br>   is also present at [:carcomponent] AndroidManifest.xml:14:9-55 value=(com.carcomponent.CarApplication).<br>   Suggestion: add <code>tools:replace=&quot;android:name&quot;</code> to <code>&lt;application&gt;</code> element at AndroidManifest.xml:7:5-24:19 to override.</p></blockquote><p>自定义 Application 需要声明在 AndroidManifest.xml 中。其次，每个 Module 都有该清单文件，但是最终的 APK 文件只能包含一个。因此，在构建应用时，Gradle 构建会将所有清单文件合并到一个封装到 APK 的清单文件中。</p><p>合并的优先级是:</p><p><code>App Module</code> &gt; <code>Library Module</code></p><p>参考<a href="https://www.jianshu.com/p/5ccc545596d4">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git clone 解决Permission Denied (publickey)问题</title>
      <link href="/article/git-clone-%E8%A7%A3%E5%86%B3Permission-Denied-publickey-%E9%97%AE%E9%A2%98/"/>
      <url>/article/git-clone-%E8%A7%A3%E5%86%B3Permission-Denied-publickey-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本地git bash 使用<code>git clone git@github.com:***.git</code>方式下载github代码至本地时需要依赖ssh key，遇到权限不足问题时一般都是SSH key失效或者SSH key不存在，重新创建SSH key一般就可以解决问题；</p><span id="more"></span><h2 id="步骤一、检查本地ssh-key是否存在"><a href="#步骤一、检查本地ssh-key是否存在" class="headerlink" title="步骤一、检查本地ssh key是否存在"></a>步骤一、检查本地ssh key是否存在</h2><p>1、windows下 开始 – 搜索框输入 git bash，打开git bash窗口；</p><p>2、git base窗口中输入指令 ls ~/.ssh/ 来检查ssh key是否存在；</p><p>3、如果key不存在则按照步骤二重新生成，ssh key已存在则跳过步骤二，执行步骤三；</p><h2 id="步骤二、生成ssh-key"><a href="#步骤二、生成ssh-key" class="headerlink" title="步骤二、生成ssh key"></a>步骤二、生成ssh key</h2><p>1、继续步骤一的git bash窗口执行指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -C <span class="string">&quot;你自己的邮箱地址&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>修改邮箱地址为你自己的邮箱地址，注意此处邮箱地址前后的双引号为英文格式双引号；</p></blockquote><p>2、指令执行后页面提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/&#123;你当前登录名&#125;/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>不做修改直接回车，会将生成的rsa文件保存为默认名称<code>id_rsa</code>,在<code>c/Users/&#123;你当前登录名&#125;/.ssh/</code>目录下可以找到。</p><p>再次回车提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br></pre></td></tr></table></figure><p>提示设置提交/l拉取代码到Github时需要的密码及确认密码；</p><blockquote><p>注意：输入密码时不会显示密码，所以输入时没有任何显示不要惊讶。输完直接回车就行。</p></blockquote><p>设置密码后再次回车提示Your identification has been saved in…. 即表示ssh key生成成功；</p><h2 id="步骤三、添加sshkey至ssh-agent"><a href="#步骤三、添加sshkey至ssh-agent" class="headerlink" title="步骤三、添加sshkey至ssh-agent"></a>步骤三、添加sshkey至ssh-agent</h2><p>1、执行 <code>eval $(ssh-agent -s)</code> 确认ssh-agent处于开启状态，打印pid… 表示启用中；<a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key">出处</a></p><p>2、执行指令  <code>ssh-add ~/.ssh/id_rsa</code>   添加ssh key至ssh agent，此步会要求输入步骤二设置的密码；</p><p>需要注意的是此处可能报错：<code>Could not open a connection to your authentication agent</code>，我的解决办法是关掉当前git bash窗口，重新以管理员身份运行git bash 即解决问题；</p><h2 id="步骤四、添加ssh-key至guthub"><a href="#步骤四、添加ssh-key至guthub" class="headerlink" title="步骤四、添加ssh key至guthub"></a><strong>步骤四、添加ssh key至guthub</strong></h2><p> 1、登录<a href="https://github.com/">https://github.com/</a>，在页面右上角自己头像右边箭头处右击，弹框中进入setting功能；</p><p> 2、setting界面右边菜单选择SSH and GPG keys，选择新建SSH keys，</p><blockquote><p>其中：</p><p>title：{随便填}</p><p>Key: 打开第二步生成的<code>id_rsa.pub</code>,将文件内容填入。也可以执行<code>cat ~/.ssh/id_rsa.pub</code>来查看内容。</p></blockquote><p>保存即可。</p><h2 id="步骤五：git-clone下载代码"><a href="#步骤五：git-clone下载代码" class="headerlink" title="步骤五：git clone下载代码"></a><strong>步骤五：git clone下载代码</strong></h2><p>此时再尝试本地使用git clone方式下载代码即可；</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><p><a href="https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys">https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys</a></p></li><li><p><a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key">https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key</a></p></li><li><p><a href="https://www.cnblogs.com/chucklu/p/4056499.html">github结合TortoiseGit使用sshkey，无需输入账号和密码</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js调试</title>
      <link href="/article/node-js%E8%B0%83%E8%AF%95/"/>
      <url>/article/node-js%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一般我们在调试javascript代码时常用的调试方法有：console日志和借助浏览器断点调试。</p><p>今遇到要调试node.js。Nodejs提供了一个内建调试器来帮助开发者调试应用程序。想要开启调试器我们需要在代码中加入debugger标签，当Nodejs执行到debugger标签时会自动暂停（debugger标签相当于在代码中开启一个断点）。</p><p>先看下几个命令的 说明：</p><p><strong>Stepping</strong></p><ul><li><code>cont</code>, <code>c</code> - Continue execution 继续执行,直到遇到下一个断点</li><li><code>next</code>, <code>n</code> - Step next 单步执行</li><li><code>step</code>, <code>s</code> - Step in 单步执行并进入函数</li><li><code>out</code>, <code>o</code> - Step out 从函数中步出</li><li><code>pause</code> - Pause running code (like pause button in Developer Tools)</li></ul><p><strong>Breakpoints</strong></p><ul><li><code>setBreakpoint()</code>, <code>sb()</code> - Set breakpoint on current line 当前行设置断点</li><li><code>setBreakpoint(line)</code>, <code>sb(line)</code> - Set breakpoint on specific line 在特定行上设置断点</li><li><code>setBreakpoint(&#39;fn()&#39;)</code>, <code>sb(...)</code> - Set breakpoint on a first statement in functions body 在函数f的第一行设置断点</li><li><code>setBreakpoint(&#39;script.js&#39;, 1)</code>, <code>sb(...)</code> - Set breakpoint on first line of <code>script.js</code> 在 script.js 的第20行设置断点</li><li><code>clearBreakpoint(&#39;script.js&#39;, 1)</code>, <code>cb(...)</code> - Clear breakpoint in <code>script.js</code> on line 1 清除断点</li></ul><p><strong>Information</strong></p><ul><li><code>backtrace</code>, <code>bt</code> - Print backtrace of current execution frame 显示当前的调用栈</li><li><code>list(5)</code> - List scripts source code with 5 line context (5 lines before and after) 显示当前执行到的前后5行代码</li><li><code>watch(expr)</code> - Add expression to watch list 把表达式 expr 加入监视列表</li><li><code>unwatch(expr)</code> - Remove expression from watch list 把表达式 expr 从监视列表移除</li><li><code>watchers</code> - List all watchers and their values (automatically listed on each breakpoint) 显示监视列表中所有的表达式和值</li><li><code>repl</code> - Open debugger’s repl for evaluation in debugging script’s context 在当前上下文打开即时求值环境</li><li><code>exec expr</code> - Execute an expression in debugging script’s context 在调试脚本的上下文中执行表达式</li></ul><p><strong>Execution control</strong></p><ul><li><code>run</code> - Run script (automatically runs on debugger’s start) 执行脚本,在第一行暂停</li><li><code>restart</code> - Restart script 重新执行脚本</li><li><code>kill</code> - Kill script 终止当前执行的脚本</li></ul><p><strong>Various</strong></p><ul><li><code>scripts</code> - List all loaded scripts 显示当前已加载的所有脚本</li><li><code>version</code> - Display V8’s version 显示v8版本</li></ul><p>参考网站：<a href="https://nodejs.org/api/debugger.html">https://nodejs.org/api/debugger.html</a></p><p><a href="https://www.cnblogs.com/axl234/p/6504336.htm">https://www.cnblogs.com/axl234/p/6504336.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口被占用，干掉它</title>
      <link href="/article/%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8-%E5%B9%B2%E6%8E%89%E5%AE%83/"/>
      <url>/article/%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8-%E5%B9%B2%E6%8E%89%E5%AE%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这个问题遇到过好几次，起初是在开发Android是adb端口被占用，就连360都曾占用过；特此记录：</p><p>这次是 <code>35729</code> 被占用了，看操作：</p><p><strong>1 . 查看占用端口的进程PID</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|findstr 35729  <span class="comment"># 35729是我这边被占用的端口，你根据自己的情况下而定。</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace\VSCode\three.js\Three.js-start (master -&gt; origin)</span><br><span class="line">λ netstat -ano|findstr 35729</span><br><span class="line">  TCP    0.0.0.0:35729          0.0.0.0:0              LISTENING       8084</span><br><span class="line">  TCP    [::]:35729             [::]:0                 LISTENING       8084</span><br><span class="line">  TCP    [::1]:10082            [::1]:35729            ESTABLISHED     10804</span><br><span class="line">  TCP    [::1]:35729            [::1]:10082            ESTABLISHED     8084</span><br></pre></td></tr></table></figure><p><strong>2 .  看到 <code>35729</code> 端口的 PID 是 <code>8084</code>,通过PID查看所有进程,看看谁在作祟</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist /fi <span class="string">&quot;PID eq 8084&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace\VSCode\three.js\Three.js-start (master -&gt; origin)</span><br><span class="line">λ tasklist /fi <span class="string">&quot;PID eq 8084&quot;</span></span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话<span class="comment">#       内存使用</span></span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">node.exe                     8084  Console                    1     98,516 K</span><br></pre></td></tr></table></figure><p><strong>3 . PID，干掉它：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /pid 8084 /f</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\workspace\VSCode\three.js\Three.js-start (master -&gt; origin)</span><br><span class="line">λ taskkill /pid 8084 /f</span><br><span class="line">成功: 已终止 PID 为 8084 的进程。</span><br></pre></td></tr></table></figure><p>完工。</p><p>最初发布在 <a href="http://blog.sina.com.cn/s/blog_694394d30102wgxg.html">http://blog.sina.com.cn/s/blog_694394d30102wgxg.html</a> </p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中apply()与call()的区别</title>
      <link href="/article/JS%E4%B8%ADapply-%E4%B8%8Ecall-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/article/JS%E4%B8%ADapply-%E4%B8%8Ecall-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JS中apply-与call-的区别"><a href="#JS中apply-与call-的区别" class="headerlink" title="JS中apply()与call()的区别"></a>JS中apply()与call()的区别</h1><p>JavaScript中的每一个Function对象都有一个apply()方法和一个call()方法，它们的语法分别为： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*apply()方法*/</span></span><br><span class="line"><span class="keyword">function</span>.<span class="title function_">apply</span>(thisObj[, argArray])</span><br><span class="line"></span><br><span class="line"><span class="comment">/*call()方法*/</span></span><br><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisObj[, arg1[, arg2[, [,...argN]]]]);</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>apply：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.apply(A, arguments);即A对象应用B对象的方法。</li><li>call：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.call(A, args1,args2);即A对象调用B对象的方法。</li></ul><p><strong>它们的共同之处：</strong></p><p>都“可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象”。</p><p><strong>它们的不同之处：</strong></p><ul><li>apply：最多只能有两个参数——新this对象和一个数组argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里。如果argArray不是一个有效的数组或arguments对象，那么将导致一个TypeError。如果没有提供argArray和thisObj任何一个参数，那么Global对象将被用作thisObj，并且无法被传递任何参数。</li><li>call：它可以接受多个参数，第一个参数与apply一样，后面则是一串参数列表。这个方法主要用在js对象各方法相互调用的时候，使当前this实例指针保持一致，或者在特殊情况下需要改变this指针。如果没有提供thisObj参数，那么 Global 对象被用作thisObj。 </li></ul><p>实际上，apply和call的功能是一样的，只是传入的参数列表形式不同。</p><h3 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a1 = add.<span class="title function_">apply</span>(sub,[<span class="number">4</span>,<span class="number">2</span>]);　　<span class="comment">//sub调用add的方法</span></span><br><span class="line"><span class="keyword">var</span> a2 = sub.<span class="title function_">apply</span>(add,[<span class="number">4</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1);  <span class="comment">//6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2);  <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*call的用法*/</span></span><br><span class="line"><span class="keyword">var</span> a1 = add.<span class="title function_">call</span>(sub,<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1);</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">showName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,[name]);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;咕咕&quot;</span>);</span><br><span class="line">cat.<span class="title function_">showName</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*call的用法*/</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name);</span><br></pre></td></tr></table></figure><p>多重继承 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Class10</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">showSub</span> = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(a - b);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Class11</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">showAdd</span> = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(a + b);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Class12</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">Class10</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="title class_">Class11</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>);   </span><br><span class="line">  <span class="comment">//Class10.call(this);</span></span><br><span class="line">  <span class="comment">//Class11.call(this);  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c2 = <span class="keyword">new</span> <span class="title class_">Class12</span>();</span><br><span class="line">c2.<span class="title function_">showSub</span>(<span class="number">3</span>,<span class="number">1</span>);    <span class="comment">//2</span></span><br><span class="line">c2.<span class="title function_">showAdd</span>(<span class="number">3</span>,<span class="number">1</span>);    <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2 id="apply的一些其他巧妙用法"><a href="#apply的一些其他巧妙用法" class="headerlink" title="apply的一些其他巧妙用法"></a><strong>apply的一些其他巧妙用法</strong></h2><p>(1) Math.max 可以实现得到数组中最大的一项： </p><p>因为Math.max不支持<code>Math.max([param1,param2])</code>也就是数组，但是它支持<code>Math.max(param1,param2...)</code>，所以可以根据apply的特点来解决 <code>var max=Math.max.apply(null,array)</code>，这样就轻易的可以得到一个数组中的最大项（apply会将一个数组转换为一个参数接一个参数的方式传递给方法）</p><p>这块在调用的时候第一个参数给了null，这是因为没有对象去调用这个方法，我只需要用这个方法帮我运算，得到返回的结果就行，所以直接传递了一个null过去。</p><p>用这种方法也可以实现得到数组中的最小项：Math.min.apply(null,array)</p><p>(2）Array.prototype.push可以实现两个数组的合并 </p><p>同样push方法没有提供push一个数组，但是它提供了push(param1,param2…paramN)，同样也可以用apply来转换一下这个数组 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>);</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">apply</span>(arr1,arr2);    <span class="comment">//得到合并后数组的长度，因为push就是返回一个数组的长度</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：apply 传入参数长度是有限制的，超出限制会报出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure><p>这是只能使用传统方法 for 循环来解决。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端调试之把玩console</title>
      <link href="/article/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E4%B9%8B%E6%8A%8A%E7%8E%A9console/"/>
      <url>/article/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E4%B9%8B%E6%8A%8A%E7%8E%A9console/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Console 对象用于 JavaScript 调试。</p><p>JavaScript 原生中默认是没有 Console 对象,这是宿主对象（也就是游览器）提供的内置对象。 用于访问调试控制台, 在不同的浏览器里效果可能不同。</p><p>Console 对象常见的两个用途：</p><ul><li>显示网页代码运行时的错误信息。</li><li>提供了一个命令行接口，用来与网页代码互动。</li></ul><span id="more"></span><h2 id="Console-对象方法"><a href="#Console-对象方法" class="headerlink" title="Console 对象方法"></a>Console 对象方法</h2><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p> ssert方法接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。 </p><p>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(<span class="literal">true</span> === <span class="literal">false</span>, <span class="string">&quot;判断条件不成立&quot;</span>)</span><br><span class="line"><span class="comment">// Assertion failed: 判断条件不成立</span></span><br></pre></td></tr></table></figure><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>清除当前控制台的所有输出，将光标回置到第一行。   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>用于计数，输出它被调用了多少次。   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">count</span>(<span class="string">&#x27;count&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="error"><a href="#error" class="headerlink" title="error()"></a>error()</h3><p> 输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error: %s (%i)&quot;</span>, <span class="string">&quot;Server is not responding&quot;</span>,<span class="number">500</span>)</span><br></pre></td></tr></table></figure><h3 id="group"><a href="#group" class="headerlink" title="group()"></a>group()</h3><p>用于将显示的信息分组，可以把信息进行折叠和展开。      </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;第一层&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;第二层&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br></pre></td></tr></table></figure><h3 id="groupCollapsed"><a href="#groupCollapsed" class="headerlink" title="groupCollapsed()"></a>groupCollapsed()</h3><p>与console.group方法很类似，唯一的区别是该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupCollapsed</span>(<span class="string">&#x27;第一层&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupCollapsed</span>(<span class="string">&#x27;第二层&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br></pre></td></tr></table></figure><h3 id="groupEnd"><a href="#groupEnd" class="headerlink" title="groupEnd()"></a>groupEnd()</h3><p>结束内联分组   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;Group One&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;Group Two&#x27;</span>);</span><br><span class="line"><span class="comment">// some code</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>(); <span class="comment">// Group Two 结束 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>(); <span class="comment">// Group One 结束</span></span><br></pre></td></tr></table></figure><h3 id="info"><a href="#info" class="headerlink" title="info()"></a>info()</h3><p>onsole.log 别名，输出信息      </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;runoob&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="log"><a href="#log" class="headerlink" title="log()"></a>log()</h3><p>输出信息             </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;runoob&quot;</span>)</span><br></pre></td></tr></table></figure><p>常见的占位符 <code>%o</code> (这是字母o，不是0)，它接受对象，<code>%s</code> 接受字符串，<code>%d</code> 表示小数或整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I like %s but I do not like %s.&#x27;</span>, <span class="string">&#x27;Skittles&#x27;</span>, <span class="string">&#x27;pus&#x27;</span>);</span><br></pre></td></tr></table></figure><p>另一个有趣的是 <code>%c</code>，这可能与你所想不太相同，它实际上是CSS值的占位符。使用%c占位符时，对应的后面的参数必须是CSS语句，用来对输出内容进行CSS渲染。常见的输出方式有两种：<code>文字样式、图片输出</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am a %cbutton&#x27;</span>, <span class="string">&#x27;color: white; background-color: orange; padding: 2px 5px; border-radius: 2px&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="table"><a href="#table" class="headerlink" title="table()"></a>table()</h3><p>将复合类型的数据转为表格显示。                      </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr= [ </span><br><span class="line">         &#123; <span class="attr">num</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">         &#123; <span class="attr">num</span>: <span class="string">&quot;2&quot;</span>&#125;, </span><br><span class="line">         &#123; <span class="attr">num</span>: <span class="string">&quot;3&quot;</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj= &#123;</span><br><span class="line">     <span class="attr">a</span>:&#123; <span class="attr">num</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">     <span class="attr">b</span>:&#123; <span class="attr">num</span>: <span class="string">&quot;2&quot;</span>&#125;,</span><br><span class="line">     <span class="attr">c</span>:&#123; <span class="attr">num</span>: <span class="string">&quot;3&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(obj);</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h3><p> 计时开始      </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;计时器1&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;计时器1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;计时器2&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;计时器2&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="timeEnd"><a href="#timeEnd" class="headerlink" title="timeEnd()"></a>timeEnd()</h3><p>计时结束          </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;计时器1&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;计时器1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;计时器2&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;计时器2&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="trace"><a href="#trace" class="headerlink" title="trace()"></a>trace()</h3><p>追踪函数的调用过程 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">d</span>(<span class="params">a</span>) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">trace</span>();</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">a</span>) &#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">c</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">a</span>) &#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">d</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">b</span>(<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="warn"><a href="#warn" class="headerlink" title="warn()"></a>warn()</h3><p>输出警告信息   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;警告&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后附上 console 的正则匹配，若有提议欢迎留言。</p><p><code>console.(clear|log|info|error|warn|groupEnd|group|dirxml|dir|assert|timeEnd|time|profileEnd|profile|count|table)([\(][^\)]+[\)]|[\(][\)]) </code></p><blockquote><p>如果参数中包含括弧可能会匹配不准。</p></blockquote><p><a href="http://www.runoob.com/w3cnote/javascript-console-object.html">http://www.runoob.com/w3cnote/javascript-console-object.html</a></p><p><a href="https://www.cnblogs.com/alantao/p/5859358.html">https://www.cnblogs.com/alantao/p/5859358.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载神器 you-get</title>
      <link href="/article/you-get/"/>
      <url>/article/you-get/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在windows 上：</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><ol><li><p>从<a href="https://github.com/soimort/you-get/releases/latest">https://github.com/soimort/you-get/releases/latest</a>下载，解压后在cmd中切换至目录下执行you-get即可</p></li><li><p>安装python,执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install you-get <span class="comment">#安装</span></span><br><span class="line">$ pip3 install --upgrade you-get <span class="comment">#更新</span></span><br><span class="line">$ pip3 install --upgrade git+https://github.com/soimort/you-get@develop <span class="comment">#更新</span></span><br></pre></td></tr></table></figure></li></ol><p>  <a href="https://you-get.org/">https://you-get.org/ </a></p><p>  <a href="https://github.com/soimort/you-get">github</a></p>  <div class="github-widget" data-repo="soimort/you-get"></div>  <script type="text/javascript" src="https://git.hust.cc/GitHub-Repo-Widget.js/GithubRepoWidget.js"></script><p>  下载ffmpeg从<a href="http://www.ffmpeg.org/">ffmpeg.org</a>并添加到PATH </p><ol start="3"><li>即可在任意目录下使用you-get </li></ol><h2 id="2-用法"><a href="#2-用法" class="headerlink" title="2 用法"></a>2 用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Usage: you-get [OPTION]... [URL]...</span><br><span class="line"></span><br><span class="line">Startup options:</span><br><span class="line">    -V | --version                      版本信息</span><br><span class="line">    -h | --<span class="built_in">help</span>                         帮助</span><br><span class="line">    </span><br><span class="line">Dry-run options: (no actual downloading)</span><br><span class="line">    -i | --info                         列出所有可获取的视频信息</span><br><span class="line">    -u | --url                          打印URLs的提取出信息，真实链接地址</span><br><span class="line">         --json                         打印URLs的JSON格式</span><br><span class="line">    </span><br><span class="line">Download options:</span><br><span class="line">    -n | --no-merge                     不合并分片</span><br><span class="line">         --no-caption                   不下载其他文件（字幕，歌词，弹幕。。。）</span><br><span class="line">    -f | --force                        覆盖存在的文件</span><br><span class="line">    -F | --format &lt;STREAM_ID&gt;           选择下载那种清晰度的视频</span><br><span class="line">    -O | --output-filename &lt;FILE&gt;       设置输出文件名</span><br><span class="line">    -o | --output-dir &lt;PATH&gt;            输出文件夹（相对位置可用，如：~/video/）</span><br><span class="line">    -p | --player &lt;PLAYER [OPTIONS]&gt;    将提取出的真实地址传给播放器</span><br><span class="line">    -c | --cookies &lt;COOKIES_FILE&gt;       导入cookies.txt或cookies.sqlite（firefox下使用export-cookies插件）</span><br><span class="line">    -x | --http-proxy &lt;HOST:PORT&gt;       使用HTTP代理下载</span><br><span class="line">    -y | --extractor-proxy &lt;HOST:PORT&gt;  仅对真实地址视频文件的下载使用HTTP代理</span><br><span class="line">         --no-proxy                     不使用代理</span><br><span class="line">    -s | --socks-proxy &lt;HOST:PORT&gt;      使用SOCKS5协议代理</span><br><span class="line">    -t | --<span class="built_in">timeout</span> &lt;SECONDS&gt;            设置代理的<span class="built_in">timeout</span></span><br><span class="line">    -d | --debug                        显示traceback和其他的debug信息</span><br><span class="line">    -I | --input-file                   仅下载链接的视频不下载列表</span><br></pre></td></tr></table></figure><h2 id="3-注意"><a href="#3-注意" class="headerlink" title="3 注意"></a>3 注意</h2><p>默认情况下，下载最高清晰度视频<br>输入任意内容如：you-get “i love china” 可以从Google内搜索并下载视频，youtube-dl也有类似功能<br>bug地址：<a href="https://github.com/soimort/you-get/issues">https://github.com/soimort/you-get/issues</a><br>-c和-p参数非常好用</p>]]></content>
      
      
      <categories>
          
          <category> you-get </category>
          
      </categories>
      
      
        <tags>
            
            <tag> you-get </tag>
            
            <tag> 下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[诗歌]千古岐山</title>
      <link href="/article/%E2%80%9C-%E8%AF%97%E6%AD%8C-%E5%8D%83%E5%8F%A4%E5%B2%90%E5%B1%B1/"/>
      <url>/article/%E2%80%9C-%E8%AF%97%E6%AD%8C-%E5%8D%83%E5%8F%A4%E5%B2%90%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="千古岐山"><a href="#千古岐山" class="headerlink" title="千古岐山"></a>千古岐山</h1><blockquote><p>​    依依故乡情，乡情浓于酒。俺是在外的岐山人，偶回故乡，觉得2009中国·岐山周文化艺术节上的瞿玄和、凯丽的《千古岐山》诗朗诵令人感动，果断转了，以飨在外滴和在家滴岐山乡党们。 </p></blockquote><div id="aplayer2" ></div><script>const ap2 = new APlayer({    container: document.getElementById('aplayer2'),    autoplay: false, //自动播放    listFolded: true, //播放列表默认折叠    listMaxHeight: 90, //播放列表最大高度    order: 'list', //音频循环顺序, 可选值: 'list', 'random'    loop: 'all', //音频循环播放, 可选值: 'all', 'one', 'none'    theme: '#e9e9e9', //切换音频时的主题色，优先级低于audio.theme    preload: 'none', //音频预加载，可选值: 'none', 'metadata', 'auto'    mutex: true, //互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器    lrcType: 3, //歌词格式，可选值：3（LRC文件歌词格式），1（JS字符串歌词格式）    volume: 0.7, //默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效    fixed: false, //吸底模式（fixed:true），迷你模式（mini:true），普通模式（注释此行或者设置fixed:false）    audio: [{        name: '千古岐山',        artist: '瞿玄&凯丽',        lrc: '/music/千古岐山.lrc',        cover: '/music/岐山.jpg',        url: '/music/千古岐山（流畅）.mp3'      }    ]  });  //实现切换音频时，根据音频的封面图片自适应主题色  const colorThief2 = new ColorThief();  const setTheme2 = (index) => {    if (!ap2.list.audios[index].theme) {      colorThief2.getColorAsync(ap2.list.audios[index].cover, function(color) {        ap2.theme(`rgb(${color[0]}, ${color[1]}, ${color[2]})`, index);      });    }  };  setTheme2(ap2.list.index);  ap2.on('listswitch', (data) => {    setTheme2(data.index);  });</script><span id="more"></span><p>这方凤凰展翅的地方叫岐山，</p><p>这团冶炼青铜的火焰叫岐山，</p><p>这片写满沧桑的甲骨叫岐山，</p><p>这眼润德载物的清泉叫岐山，</p><p>这条西去长安的古道叫岐山，</p><p>这片演义封神的平原叫岐山，</p><p>这棵洒下千年荫凉的槐柏叫岐山，</p><p>这片蕴育五千年文明的沃土叫岐山，</p><p>啊 岐山</p><p>华夏在这里生根</p><p>周礼在这里溯源，</p><p>周公在这里称圣</p><p>薪火在这里相传，</p><p>你是东方文明圣洁的起点啊</p><p>你是天下华夏儿女心中共有的千古岐山</p><p>放眼大秦川</p><p>周文王在这里一统天下</p><p>涉过渭水河</p><p>姜子牙在这里垂钓休闲</p><p>走过古卷阿</p><p>周公姬旦在这里制礼作乐</p><p>登上五丈原</p><p>诸葛亮在这里跃马扬鞭</p><p>古公亶父 来朝走马</p><p>我们的老祖先</p><p>在这里刀耕火种 露宿风餐</p><p>率西水浒 至于岐下</p><p>那甘棠遣爱的清凉</p><p>就是让梦想响起飞的家园</p><p>当声声礼乐</p><p>唤醒了周原大地第一行温暖的炊烟</p><p>就会有一长串关于仁政德治的传说</p><p>从远古讲述到今天</p><p>啊 当新世纪的太阳</p><p>照亮了古老而又年轻的周原</p><p>一个延续了几千的梦幻正在我们的手中实现</p><p>皮影 剪纸 刺绣 社火</p><p>是“全国先进县”的烫金封面</p><p>汽车 电子 医药 化纤 </p><p>是“全国科技先进县”的丰厚内涵</p><p>臊子面 小吃宴 文王锅盔</p><p>是“全国食品先进县”的真实写照</p><p>“转鼓之乡”“陕菜之乡”</p><p>一个个美誉香飘万里名不虚传</p><p>啊 岐山</p><p>你这中华文明的摇篮</p><p>摇大了一个伟岸的民族</p><p>你让炎黄子孙血脉相连</p><p>你是我们从昨天到永远共同守候的家园</p><p>这曲凤凰婉转的鸣唱叫岐山</p><p>这阵雄辉激昂的鼓点叫岐山</p><p>这里纯朴善良的民风叫岐山</p><p>这种锐意进取的精神叫岐山</p><p>啊 岐山</p><p>厚重的岐山</p><p>崭新的岐山</p><p>充满魅力的岐山</p><p>我们深深爱恋的千古岐山</p><p>最初发布在 <a href="http://blog.sina.com.cn/s/blog_694394d301011jho.html">http://blog.sina.com.cn/s/blog_694394d301011jho.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 npm 安装 gitbook</title>
      <link href="/article/%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-gitbook/"/>
      <url>/article/%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85-gitbook/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>近期项目中写接口API使用了gitbook，现特意记录下以便以后查阅。</p><span id="more"></span><h2 id="本地通过npm安装Gitbook命令行工具"><a href="#本地通过npm安装Gitbook命令行工具" class="headerlink" title="本地通过npm安装Gitbook命令行工具"></a>本地通过<code>npm</code>安装<code>Gitbook</code>命令行工具</h2><p>安装 <code>node.js</code>就不说了，去<a href="https://nodejs.org/en/download/">官网</a>找到对应平台安装包安装即可。</p><p>安装好<code>node.js</code>，在终端命令行中执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p>其中 <a href="https://www.npmjs.com/package/gitbook-cli">gitbook-cli</a> 是 gitbook 的一个命令行工具, 通过它可以在电脑上安装和管理 gitbook 的多个版本. </p><p>有时会因为权限不足报错，可提升权限安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p>安装完毕，是的，安装结束了。</p><p>检查一下是否安装成功,执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook -V</span><br></pre></td></tr></table></figure><p>查看当前安装的gitbook版本，此命令会默认同时安装 GitBook，正常输出则安装成功。</p><h2 id="Gitbook创建及使用"><a href="#Gitbook创建及使用" class="headerlink" title="Gitbook创建及使用"></a>Gitbook创建及使用</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>打开指定目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook init</span><br></pre></td></tr></table></figure><p>会自动生成两个必要的文件 README.md 和 SUMMARY.md。 </p><ul><li><strong>README.md</strong>: 书的介绍文字，如前言、简介，在章节中也可做为章节的简介。</li><li><strong>SUMMARY.md</strong>: 定制书籍的章节结构和顺序。</li></ul><blockquote><p>README.md 和 SUMMARY.md 是 GitBook 制作电子书的必要文件，可用 gitbook init 命令自动生成。 </p></blockquote><h2 id="编辑书籍目录"><a href="#编辑书籍目录" class="headerlink" title="编辑书籍目录"></a>编辑书籍目录</h2><p>GitBook 使用 <code>SUMMARY.md</code> 文件作为书籍的目录结构，可以用来制作书籍目录。</p><p>使用缩进表示目录层级结构。</p><p>编辑<code>SUMMARY.md</code>:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> [<span class="string">Introduction</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">Part I</span>](<span class="link">part1/README.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">Writing is nice</span>](<span class="link">part1/writing.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">GitBook is nice</span>](<span class="link">part1/gitbook.md</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">Part II</span>](<span class="link">part2/README.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">We love feedback</span>](<span class="link">part2/feedback_please.md</span>)</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">Better tools for authors</span>](<span class="link">part2/better_tools.md</span>)</span><br></pre></td></tr></table></figure><blockquote><p>记得编辑完保存后执行 <code>gitbook init</code>来自动生成md文件。</p></blockquote><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>执行命令 gitbook serve ，会在当前目录生成一个<code>_book</code>的目录，gitbook 会启动一个 4000 端口用于预览。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve</span><br></pre></td></tr></table></figure><p>你可以你的浏览器中打开这个网址： <a href="http://localhost:4000/">http://localhost:4000</a> 预览电子书效果。 </p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook build</span><br></pre></td></tr></table></figure><p>会在书籍的文件夹中生成一个 _book 文件夹, 里面的内容即为生成的 html 文件. 我们可以使用下面命令来生成网页而不开启服务器。 </p><p>到此一个简单的book就建好了。为了更好的体验可以配置需要的插件，请自行百度，配置不是必需的。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="Error-ENOENT-no-such-file-or-directory"><a href="#Error-ENOENT-no-such-file-or-directory" class="headerlink" title="Error: ENOENT: no such file or directory"></a>Error: ENOENT: no such file or directory</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: ENOENT: no such file or directory, <span class="built_in">stat</span> <span class="string">&#x27;E:\workspace\引擎\3DEngine华为编辑器API\_book\gitbook\gitbook-plugin-fontsettings\fontsettings.js&#x27;</span></span><br></pre></td></tr></table></figure><p>报错如上，解决办法可尝试修改文件：<code>C:\Users\&#123;用户名&#125;\.gitbook\versions\&#123;版本号&#125;\lib\output\website\copyPluginAssets.js</code>的112行（我的版本是<code>3.2.3</code>）:</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/1553164553736.png" alt="1553164553736"></p><p>注释掉 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">confirm</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>或改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">confirm</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gitbook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
            <tag> gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再见2018，你好2019</title>
      <link href="/article/%E5%86%8D%E8%A7%812018%EF%BC%8C%E4%BD%A0%E5%A5%BD2019/"/>
      <url>/article/%E5%86%8D%E8%A7%812018%EF%BC%8C%E4%BD%A0%E5%A5%BD2019/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>时光飞逝，2018，转眼已是过去，回首过去这一年，取得过成绩也有过不足，经过同事间的协作与共同努力，发现问题并解决问题。</p><p>2019，新的起点，新的希望。从事Android开发四余载，此时站在新的起跑点，更需要总结自己，继承并发扬过去工作中已形成的优点，汲取教训，摒弃不足以更清醒的头脑和奋发的姿态向未来目标迈进。</p><h3 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h3><p>在刚过去的2018年里，公司移动端的项目仍然分为<strong>BIM</strong>以及<strong>教育</strong>两方面。</p><p>教育项目是自从我14年入公司以来一直参与并一直维护至今的一个项目，电子书包学生端，运行在Android pad上的一款移动端项目，18年，电子书包项目并没有太大的版本变更，大多都是性能上的优化以及bug的修复，并且成功在华为pad上申请了超级权签权限。</p><p>BIM项目是公司近几年新开设并且大力宣传与开发投入的项目。移动端从最初规划的4D App到5D App,期间有过两次大的版本变更。在4D App基础上的两个4D App 非标项目，5D App 上的一个非标项目，另有上海某院BIM App项目由另外的同事负责开发。</p><p>5月份时，将公司开发的BIM引擎进行了二次封装以便用于移动开发调用，并成功用于上海BIM项目中，在此基础上又开发出纯Kotlin开发的BIM 引擎演示App并一直维护并完善以便客户能依此更方便更便捷的基于我们公司引擎开发自己的BIM App。</p><p>在开发4D、5D app时，起初api 接口文档使用word书写，随着接口数越来越多，达到近百个时，word显得非常吃力，同时需要与IOS进行公网api对接，最终废弃word，采用gitbook管理，分类管理、目录清晰，可以部署到外网多方协同。</p><h3 id="个人技能提升"><a href="#个人技能提升" class="headerlink" title="个人技能提升"></a>个人技能提升</h3><p>2018年，除了提升自己Android方面的技能，还学习了新的开发语言Kotlin，谷歌公布Kotlin将作为官方开发语言起就不断地接触过这门语言，初期都是处于写个小demo的阶段，终于在18年下半年下定决心开发一款纯kotlin开发的应用，就是上面提到的演示程序。只能说用过才知道它（Kotlin）的好。</p><p>除了kotlin语言，还有Flutter、git、跨平台的Electron、Vue（刚入门）以及学习更高效的使用VS code、AS等开发工具。</p><p>闲暇的时间也会去翻翻简书、公众号、知乎（现在的知乎也没有以前好了）阅读一些很有意思的技术类软文，从中也会有很多启发。有时自己在工作中遇到一些问题解决了，并且觉得这些解决方案很有意义记录下便起笔写篇软文发到自己博客上。</p><h3 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h3><p>2019年，仍有很多需要学习提升，已经涉足的kotlin、flutter等还需要更进一步深入学习。</p><p>对于过去的得与失，我会汲取有利的因素强化自己的工作能力，把不利的因素在自己以后的工作中排除，一年的工作让我在成为一名合格的职工道路上不断前进，我相信通过我的努力和同事的合作，以及领导们的指导，我会成为一名优秀的员工，充分发挥我的社会能力，也感谢领导给我这一个合适的工作位置，让我能为社会做出自己该有的贡献。</p><p>一年来，我做的可能不是最好，但我相信在今后的工作中，仍会继续不断的努力。我相信，只要我在岗位上一天，我就会做出自己最大的努力，将自己所有的精力和能力用在工作上，相信自己一定能够做好!</p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一张图弄懂开源协议-GPL、BSD、MIT、Mozilla、Apache和LGPL 之间的差别</title>
      <link href="/article/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%BC%84%E6%87%82%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE-GPL%E3%80%81BSD%E3%80%81MIT%E3%80%81Mozilla%E3%80%81Apache%E5%92%8CLGPL-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%88%AB/"/>
      <url>/article/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%BC%84%E6%87%82%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE-GPL%E3%80%81BSD%E3%80%81MIT%E3%80%81Mozilla%E3%80%81Apache%E5%92%8CLGPL-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一张 <a href="http://www.ruanyifeng.com/">阮大神</a>的图秒懂各大开源协议差异</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/bg2011050101.png"></p><p>另一张来自<a href="https://phodal.github.io/licenses/">https://phodal.github.io/licenses/</a></p><p><img src="https://phodal.github.io/licenses/license.svg"></p><h2 id="哪种开源许可证下的软件可以用于商业"><a href="#哪种开源许可证下的软件可以用于商业" class="headerlink" title="哪种开源许可证下的软件可以用于商业"></a>哪种开源许可证下的软件可以用于商业</h2><p><strong>Apache License 2.0</strong></p><p><strong>要点：</strong>Apache Licence是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。 </p><p><strong>BSD开源协议</strong>（Berkerley Software Distribution）</p><p>要点：商业软件可以使用，也可以修改使用BSD协议的代码。 </p><p><strong>GPL</strong> ( <a href="http://www.opensource.org/licenses/gpl-license">GNU General Public License</a> )</p><p><strong>要点：</strong>商业软件不能使用GPL协议的代码。 </p><p><strong>LGPL</strong> ( <a href="http://www.opensource.org/licenses/lgpl-license">GNU Library or “Lesser” General Public License</a> )</p><p><strong>要点：</strong>商业软件可以使用，但不能修改LGPL协议的代码。 </p><p><strong>MIT</strong> ( <a href="http://www.opensource.org/licenses/MIT">MIT license</a> )</p><p>要点：商业软件可以使用，也可以修改MIT协议的代码，甚至可以出售MIT协议的代码。 </p><p><strong>MPL</strong> ( <a href="http://www.opensource.org/licenses/MPL-1.1">Mozilla Public License 1.1</a> ) </p><p><strong>要点：</strong>商业软件可以使用，也可以修改MPL协议的代码，但修改后的代码版权归软件的发起者。 </p><p><strong>CDDL</strong> (<a href="http://www.opensource.org/licenses/CDDL-1.0">Common Development and Distribution License</a> ) </p><p><strong>要点：</strong>商业软件可以使用，也可以修改CDDL协议的代码。 </p><p><strong>EPL</strong> (<a href="http://www.opensource.org/licenses/EPL-1.0">Eclipse Public License 1.0</a> )</p><p><strong>要点：</strong>商业软件可以使用，也可以修改EPL协议的代码，但要承担代码产生的侵权责任。</p><ol><li><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">阮一峰的网络日志</a></li><li><a href="https://github.com/phodal/licenses">phodal/licenses</a></li><li><a href="https://www.cnblogs.com/etangyushan/p/4224075.html">哪种开源许可证下的软件可以用于商业</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开源协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity启动模式(lauchMode)</title>
      <link href="/article/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-lauchMode/"/>
      <url>/article/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-lauchMode/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>launchMode在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。这里简单介绍一下task的概念，task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task。</p><span id="more"></span><p>Activity一共有以下四种launchMode：</p><p>1.standard</p><p>2.singleTop</p><p>3.singleTask</p><p>4.singleInstance</p><p>我们可以在AndroidManifest.xml配置<activity>的android:launchMode属性为以上四种之一即可。</p><p>下面我们结合实例一一介绍这四种lanchMode：</p><p><strong>1.standard</strong>  <strong>标准模式</strong></p><p>standard模式是默认的启动模式，不用为<activity>配置android:launchMode属性即可，当然也可以指定值为standard。</p><p><strong>说明：</strong> Android创建Activity时的默认模式，假设没有为Activity设置启动模式的话，默觉得标准模式。每次启动一个Activity都会又一次创建一个新的实例入栈，无论这个实例是否存在。</p><p><strong>生命周期：</strong>如上所看到的，每次被创建的实例Activity 的生命周期符合典型情况，它的onCreate、onStart、onResume都会被调用。</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity，此时C处于栈顶，启动模式为<strong>Standard 模式</strong>。</p><p><strong>简单点理解：standard启动模式Activity栈从栈底到栈顶顺序为A1 -&gt; B -&gt; C -&gt; A2…。（其中A、B、C等都表示不同的Activity实例，A1、A2则表示属于具有同一Activity类的不同实例）</strong></p><p><strong>2.singleTop</strong>  <strong>栈顶复用模式</strong></p><p>我们在上面的基础上为<activity>指定属性android:launchMode=”singleTop”，系统就会按照singleTop启动模式处理跳转行为。</p><p><strong>说明：</strong>分两种处理情况：须要创建的Activity已经处于栈顶时，此时会直接复用栈顶的Activity。不会再创建新的Activity；若须要创建的Activity不处于栈顶，此时会又一次创建一个新的Activity入栈，同Standard模式一样。</p><p><strong>生命周期：</strong>若情况一中栈顶的Activity被直接复用时，它的onCreate、onStart不会被系统调用，由于它并没有发生改变。可是一个新的方法 <strong>onNewIntent</strong>会被回调（Activity被正常创建时不会回调此方法）。</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity，此时C处于栈顶，启动模式为<strong>SingleTop 模式</strong>。情况一：在C Activity中加入点击事件，须要跳转到还有一个同类型的C Activity。</p><p>结果是直接复用栈顶的C Activity。</p><p>情况二：在C Activity中加入点击事件，须要跳转到还有一个A Activity。结果是创建一个新的Activity入栈。成为栈顶。</p><p><strong>这就是singleTop启动模式，如果发现有对应的Activity实例正位于栈顶，则重复利用，不再生成新的实例。</strong></p><p><strong>简单点理解，singleTop即表示当前Activity栈中“栈顶唯一”，Activity跳转顺序或standard模式下栈结构如果为：A -&gt; B -&gt; C -&gt; D1 -&gt; D2，则singleTop启动模式为：A -&gt; B -&gt; C -&gt; D1(此时回调D1的onNewIntent()..)。</strong></p><p><strong>3.singleTask</strong>  <strong>栈内复用模式</strong></p><p><strong>说明：</strong>若须要创建的Activity已经处于栈中时，此时不会创建新的Activity，而是将存在栈中的Activity上面的其他Activity所有销毁，使它成为栈顶。</p><p><strong>生命周期：</strong>同SingleTop 模式中的情况一同样。仅仅会又一次回调Activity中的 <strong>onNewIntent</strong>方法</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity。此时C处于栈顶，启动模式为<strong>SingleTask 模式</strong>。</p><p>情况一：在C Activity中加入点击事件，须要跳转到还有一个同类型的C Activity。结果是直接用栈顶的C Activity。情况二：在C Activity中加入点击事件，须要跳转到还有一个A Activity。</p><p>结果是将A Activity上面的B、C所有销毁，使A Activity成为栈顶。 </p><p>在上面的基础上我们修改FirstActivity的属性android:launchMode=”singleTask”。</p><p><strong>这就是singleTask模式，如果发现所在Activity栈中有对应的Activity实例，则使此Activity实例之上的其他Activity实例统统出栈，使此Activity实例成为栈顶对象，显示到幕前。</strong></p><p><strong>简单点理解，singleTask表示当前Activity栈中“实例唯一”，Activity跳转顺序或standard模式下栈结构如果为：A -&gt; B1 -&gt; C -&gt; D -&gt; B2，则singleTask启动模式为：A -&gt; B1(此时回调onNewIntent()..)</strong></p><p><strong>4.singleInstance</strong>  <strong>单实例模式</strong></p><p><strong>说明：</strong> SingleInstance比較特殊，是全局单例模式，是一种加强的SingleTask模式。它除了具有它所有特性外，还加强了一点：具有此模式的Activity仅仅能单独位于一个任务栈中。</p><p>这个经常使用于系统中的应用，比如Launch、锁屏键的应用等等，整个系统中仅仅有一个！所以在我们的应用中一般不会用到。了解就可以。</p><p><strong>举例：</strong>比方 A Activity是该模式，启动A后。系统会为它创建一个单独的任务栈，由于栈内复用的特性。兴许的请求均不会创建新的Activity，除非这个独特的任务栈被系统销毁。</p><p>这种启动模式比较特殊，因为它会启用一个新的栈结构，将Acitvity放置于这个新的栈结构中，并保证不再有其他Activity实例进入。</p><p><strong>简单点理解，singleInstance所标识的Activity，当被启动时，系统会首先判断系统其他栈中是否已经存在此Activity实例，有则直接使用，并且其所在的Activity栈理论上只有它一个Activity元素。所以启动它的Activity与它并不在一个task中，所以才需要特别注意Back的问题。一般表示为：task1 A -&gt; task2 B。</strong></p><p><strong>singleInstance表示该Activity在系统范围内“实例唯一”。由此我们发现，singInstance和singleTask主要区别在与系统范围内的“实例唯一”还是当前Activity栈“实例唯一”。</strong></p><h1 id="二-启动模式的使用方式"><a href="#二-启动模式的使用方式" class="headerlink" title="二.启动模式的使用方式"></a><strong>二.启动模式的使用方式</strong></h1><h2 id="1-在-Manifest-xml中指定Activity启动模式"><a href="#1-在-Manifest-xml中指定Activity启动模式" class="headerlink" title="1. 在 Manifest.xml中指定Activity启动模式"></a><strong>1. 在 Manifest.xml中指定Activity启动模式</strong></h2><p>一种静态的指定方法，在Manifest.xml文件里声明Activity的同一时候指定它的启动模式，这样在代码中跳转时会依照指定的模式来创建Activity。样例例如以下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=&quot;..activity.MultiportActivity&quot; android:launchMode=&quot;singleTask&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="2-启动Activity时。在Intent中指定启动模式去创建Activity"><a href="#2-启动Activity时。在Intent中指定启动模式去创建Activity" class="headerlink" title="2. 启动Activity时。在Intent中指定启动模式去创建Activity"></a><strong>2. 启动Activity时。在Intent中指定启动模式去创建Activity</strong></h2><p>一种动态的启动模式，在new 一个Intent后，通过Intent的addFlags方法去动态指定一个启动模式。样例例如以下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent();</span><br><span class="line">intent.setClass(context, MainActivity.class);</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">context.startActivity(intent);</span><br></pre></td></tr></table></figure><hr><p><strong>注意：</strong>以上两种方式都能够为Activity指定启动模式，可是二者还是有差别的。</p><p><strong>（1）优先级</strong>：动态指定方式即另外一种比第一种优先级要<strong>高</strong>，若两者同一时候存在，以另外一种方式为准。</p><p><strong>（2）限定范围</strong>：第一种方式无法为Activity直接指定 <strong>FLAG_ACTIVITY_CLEAR_TOP</strong> 标识，另外一种方式无法为Activity指定 <strong>singleInstance</strong> 模式。</p><hr><hr><hr><hr><h1 id="三-Activity-的-Flags"><a href="#三-Activity-的-Flags" class="headerlink" title="三. Activity 的 Flags"></a><strong>三. Activity 的 Flags</strong></h1><p>标记位既能够设定Activity的启动模式，如同上面介绍的，在动态指定启动模式，比方 <strong>FLAG_ACTIVITY_NEW_TASK</strong> 和 <strong>FLAG_ACTIVITY_SINGLE_TOP</strong> 等。它还能够影响Activity 的运行状态 ，比方 <strong>FLAG_ACTIVITY_CLEAN_TOP</strong> 和 <strong>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong> 等。</p><p>以下介绍几个基本的标记位，切勿死记，理解几个就可以，须要时再查官方文档。</p><h3 id="1-FLAG-ACTIVITY-NEW-TASK"><a href="#1-FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="1. FLAG_ACTIVITY_NEW_TASK"></a><strong>1. FLAG_ACTIVITY_NEW_TASK</strong></h3><p>作用是为Activity指定 “<strong>SingleTask</strong>”启动模式。跟在AndroidMainfest.xml指定效果同样。</p><hr><h3 id="2-FLAG-ACTIVITY-SINGLE-TOP"><a href="#2-FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="2. FLAG_ACTIVITY_SINGLE_TOP"></a><strong>2. FLAG_ACTIVITY_SINGLE_TOP</strong></h3><p>作用是为Activity指定 “<strong>SingleTop</strong>”启动模式，跟在AndroidMainfest.xml指定效果同样。</p><hr><h3 id="3-FLAG-ACTIVITY-CLEAN-TOP"><a href="#3-FLAG-ACTIVITY-CLEAN-TOP" class="headerlink" title="3. FLAG_ACTIVITY_CLEAN_TOP"></a><strong>3. FLAG_ACTIVITY_CLEAN_TOP</strong></h3><p>具有此标记位的Activity，启动时会将与该Activity在同一任务栈的其他Activity出栈。一般与SingleTask启动模式一起出现。它会完毕SingleTask的作用。但事实上SingleTask启动模式默认具有此标记位的作用</p><hr><h3 id="4-FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS"><a href="#4-FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS" class="headerlink" title="4.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS"></a><strong>4.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong></h3><p>具有此标记位的Activity不会出如今历史Activity的列表中，使用场景：当某些情况下我们不希望用户通过历史列表回到Activity时，此标记位便体现了它的效果。它等同于在xml中指定Activity的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:excludeFromRecents=&quot;trure&quot;</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h1 id="四-启动模式的实际应用场景"><a href="#四-启动模式的实际应用场景" class="headerlink" title="四. 启动模式的实际应用场景"></a><strong>四. 启动模式的实际应用场景</strong></h1><p>这四种模式中的Standard模式是最普通的一种，没有什么特别注意。而SingleInstance模式是整个系统的单例模式，在我们的应用中一般不会应用到。所以，这里就具体解说 <strong>SingleTop</strong> 和 <strong>SingleTask</strong>模式的运用场景：</p><h2 id="1-SingleTask模式的运用场景"><a href="#1-SingleTask模式的运用场景" class="headerlink" title="1. SingleTask模式的运用场景"></a><strong>1. SingleTask模式的运用场景</strong></h2><p>最常见的应用场景就是保持我们应用开启后仅仅有一个Activity的实例。最典型的样例就是应用中展示的主页（Home页）。</p><p>假设用户在主页跳转到其他页面，运行多次操作后想返回到主页，假设不使用SingleTask模式，在点击返回的过程中会多次看到主页，这明显就是设计不合理了。</p><hr><hr><hr><h2 id="2-SingleTop模式的运用场景"><a href="#2-SingleTop模式的运用场景" class="headerlink" title="2. SingleTop模式的运用场景"></a><strong>2. SingleTop模式的运用场景</strong></h2><p>假设你在当前的Activity中又要启动同类型的Activity，此时建议将此类型Activity的启动模式指定为SingleTop，能够降低Activity的创建，节省内存！</p><hr><hr><hr><h2 id="3-注意：复用Activity时的生命周期回调"><a href="#3-注意：复用Activity时的生命周期回调" class="headerlink" title="3. 注意：复用Activity时的生命周期回调"></a><strong>3. 注意：复用Activity时的生命周期回调</strong></h2><p>这里还须要考虑一个<strong>Activity跳转时携带页面參数的问题</strong>。</p><p>由于当一个Activity设置了SingleTop或者SingleTask模式后，跳转此Activity出现<strong>复用原有Activity</strong>的情况时，<strong>此Activity的onCreate方法将不会再次运行。onCreate方法仅仅会在第一次创建Activity时被运行。</strong></p><p>而一般onCreate方法中会进行该页面的数据初始化、UI初始化，假设页面的展示数据无关页面跳转传递的參数，则不必操心此问题，若页面展示的数据就是通过getInten() 方法来获取，那么问题就会出现：getInten()获取的一直都是老数据，根本无法接收跳转时传送的新数据！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java对象转json时空值(null)处理</title>
      <link href="/article/Java%E5%AF%B9%E8%B1%A1%E8%BD%ACjson%E6%97%B6%E7%A9%BA%E5%80%BC-null-%E5%A4%84%E7%90%86/"/>
      <url>/article/Java%E5%AF%B9%E8%B1%A1%E8%BD%ACjson%E6%97%B6%E7%A9%BA%E5%80%BC-null-%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java对象在转json的时候，如果对象里面有属性值为null的话，那么在json序列化的时候要不要序列出来呢？</p></blockquote><span id="more"></span><h2 id="1-fastjson"><a href="#1-fastjson" class="headerlink" title="1 fastjson"></a>1 fastjson</h2><p>fastJson在转换java对象为json的时候，默认是不序列化null值对应的key的也就是说当对象里面的属性为空的时候，在转换成json时，不序列化那些为null值的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.java2Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sogrey.java2Json.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fastjson 版本是 1.2.54</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUserName(<span class="string">&quot;Sogrey&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> JSONObject.toJSONString(user);<span class="comment">// fastjson默认转换是不序列化null值对应的key的</span></span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 输出结果是：&#123;&quot;age&quot;:0,&quot;userName&quot;:&quot;Sogrey&quot;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是如果想把null对应的key序列化出来呢？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果需要序列化null对应的key</span></span><br><span class="line">str = JSONObject</span><br><span class="line">.toJSONString(</span><br><span class="line">user,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SerializerFeature</span>[] &#123; SerializerFeature.WriteMapNullValue &#125;);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 输出结果是： &#123;&quot;age&quot;:0,&quot;job&quot;:null,&quot;userName&quot;:&quot;Sogrey&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>想字符类型字段如果为null,转换输出为”“,而非null ，需要多加一个参数：WriteNullStringAsEmpty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想字符类型字段如果为null,转换输出为&quot;&quot;,而非null ，需要多加一个参数：WriteNullStringAsEmpty</span></span><br><span class="line">str = JSONObject.toJSONString(user, <span class="keyword">new</span> <span class="title class_">SerializerFeature</span>[] &#123;</span><br><span class="line">SerializerFeature.WriteMapNullValue,</span><br><span class="line">SerializerFeature.WriteNullStringAsEmpty &#125;);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">//输出结果是：&#123;&quot;age&quot;:0,&quot;job&quot;:&quot;&quot;,&quot;userName&quot;:&quot;Sogrey&quot;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-Gson"><a href="#2-Gson" class="headerlink" title="2  Gson"></a>2  Gson</h2><p> gson和fastjson一样，默认是不序列化null值对应的key的</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.java2Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sogrey.java2Json.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GsonDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUserName(<span class="string">&quot;Sogrey&quot;</span>);</span><br><span class="line"><span class="type">Gson</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>().create();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> g.toJson(user);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// &#123;&quot;userName&quot;:&quot;Sogrey&quot;,&quot;age&quot;:0&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 若是想序列化null值对应的key，只需要将以上创建代码改成以下代码就行：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>().serializeNulls().create();</span><br><span class="line">str = g.toJson(user);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// &#123;&quot;userName&quot;:&quot;Sogrey&quot;,&quot;age&quot;:0,&quot;job&quot;:null&#125;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/Sogrey/JavaBean2Json">github</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android版本和API Level对应关系</title>
      <link href="/article/Android%E7%89%88%E6%9C%AC%E5%92%8CAPI-Level%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/"/>
      <url>/article/Android%E7%89%88%E6%9C%AC%E5%92%8CAPI-Level%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>平台版本</td><td>API 级别</td><td>VERSION_CODE</td><td>备注</td></tr><tr><td><a href="https://developer.android.google.cn/about/versions/12">Android 12</a></td><td>31</td><td>12</td><td></td></tr><tr><td><a href="https://developer.android.google.cn/about/versions/11">Android 11</a></td><td>30</td><td>11</td><td></td></tr><tr><td><a href="https://developer.android.google.cn/about/versions/10">Android 10</a></td><td>29</td><td>10</td><td><a href="https://developer.android.google.cn/about/versions/10/highlights">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/pie/android-9.0.html">Android 9.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/28/changes.html">28</a></td><td><code>Pie</code></td><td><a href="https://developer.android.com/about/versions/pie/index.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/oreo/android-8.1.html">Android 8.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/27/changes.html">27</a></td><td><code>Oreo</code></td><td><a href="https://developer.android.com/about/versions/oreo/index.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/oreo/android-8.0.html">Android 8.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/26/changes.html">26</a></td><td><code>Oreo</code></td><td><a href="https://developer.android.com/about/versions/oreo/index.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/nougat/android-7.1.html">Android 7.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/25/changes.html">25</a></td><td><code>Nougat</code></td><td><a href="https://developer.android.com/about/versions/nougat/index.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/nougat/android-7.0.html">Android 7.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/24/changes.html">24</a></td><td><code>Nougat</code></td><td><a href="https://developer.android.com/about/versions/nougat/index.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/marshmallow/android-6.0.html">Android 6.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/23/changes.html">23</a></td><td><code>Marshmallow</code></td><td><a href="https://developer.android.com/about/versions/marshmallow/index.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-5.1.html">Android 5.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/22/changes.html">22</a></td><td><code>LOLLIPOP_MR1</code></td><td><a href="https://developer.android.com/about/versions/lollipop.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-5.0.html">Android 5.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/21/changes.html">21</a></td><td><code>LOLLIPOP</code></td><td></td></tr><tr><td>Android 4.4W</td><td><a href="https://developer.android.com/sdk/api_diff/20/changes.html">20</a></td><td><code>KITKAT_WATCH</code></td><td>仅限 KitKat for Wearables</td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.4.html">Android 4.4</a></td><td><a href="https://developer.android.com/sdk/api_diff/19/changes.html">19</a></td><td><code>KITKAT</code></td><td><a href="https://developer.android.com/about/versions/kitkat.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.3.html">Android 4.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/18/changes.html">18</a></td><td><code>JELLY_BEAN_MR2</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.2.html">Android 4.2、4.2.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/17/changes.html">17</a></td><td><code>JELLY_BEAN_MR1</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html#android-42">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.1.html">Android 4.1、4.1.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/16/changes.html">16</a></td><td><code>JELLY_BEAN</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html#android-41">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.0.3.html">Android 4.0.3、4.0.4</a></td><td><a href="https://developer.android.com/sdk/api_diff/15/changes.html">15</a></td><td><code>ICE_CREAM_SANDWICH_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-4.0-highlights.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.0.html">Android 4.0、4.0.1、4.0.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/14/changes.html">14</a></td><td><code>ICE_CREAM_SANDWICH</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.2.html">Android 3.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/13/changes.html">13</a></td><td><code>HONEYCOMB_MR2</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.1.html">Android 3.1.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/12/changes.html">12</a></td><td><code>HONEYCOMB_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-3.1-highlights.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.0.html">Android 3.0.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/11/changes.html">11</a></td><td><code>HONEYCOMB</code></td><td><a href="https://developer.android.com/about/versions/android-3.0-highlights.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.3.3.html">Android 2.3.4 Android 2.3.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/10/changes.html">10</a></td><td><code>GINGERBREAD_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-2.3-highlights.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.3.html">Android 2.3.2 Android 2.3.1 Android 2.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/9/changes.html">9</a></td><td><code>GINGERBREAD</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.2.html">Android 2.2.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/8/changes.html">8</a></td><td><code>FROYO</code></td><td><a href="https://developer.android.com/about/versions/android-2.2-highlights.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.1.html">Android 2.1.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/7/changes.html">7</a></td><td><code>ECLAIR_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-2.0-highlights.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.0.1.html">Android 2.0.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/6/changes.html">6</a></td><td><code>ECLAIR_0_1</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.0.html">Android 2.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/5/changes.html">5</a></td><td><code>ECLAIR</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.6.html">Android 1.6</a></td><td><a href="https://developer.android.com/sdk/api_diff/4/changes.html">4</a></td><td><code>DONUT</code></td><td><a href="https://developer.android.com/about/versions/android-1.6-highlights.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.5.html">Android 1.5</a></td><td><a href="https://developer.android.com/sdk/api_diff/3/changes.html">3</a></td><td><code>CUPCAKE</code></td><td><a href="https://developer.android.com/about/versions/android-1.5-highlights.html">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.1.html">Android 1.1</a></td><td>2</td><td><code>BASE_1_1</code></td><td></td></tr><tr><td>Android 1.0</td><td>1</td><td><code>BASE</code></td><td></td></tr></tbody></table><p>摘自<a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels">Android Developers#<uses-sdk></a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 路由跳转</title>
      <link href="/article/Flutter%20%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/"/>
      <url>/article/Flutter%20%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><h4 id="1-注册"><a href="#1-注册" class="headerlink" title="1. 注册"></a>1. 注册</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter 示例&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> MyHomePage(title: <span class="string">&#x27;Flutter 示例主页&#x27;</span>),</span><br><span class="line">      routes: &#123; <span class="comment">//静态注册路由，不能传递参数</span></span><br><span class="line">        <span class="string">&quot;SecondPage&quot;</span>: (BuildContext context) =&gt; <span class="keyword">new</span> Second()</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="comment">//      routes: &lt;String, WidgetBuilder&gt;&#123;</span></span><br><span class="line"><span class="comment">//        // 这里可以定义静态路由，不能传递参数</span></span><br><span class="line"><span class="comment">//        &#x27;/router/second&#x27;: (_) =&gt; new Second(),</span></span><br><span class="line"><span class="comment">//      &#125;,</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///<span class="language-markdown">这种路由的缺点是不能传递参数。</span></span></span><br><span class="line">Navigator.pushNamed(context, <span class="string">&quot;SecondPage&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><h4 id="有参跳转"><a href="#有参跳转" class="headerlink" title="有参跳转"></a>有参跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到新的 页面我们需要调用 navigator.push方法  -</span></span><br><span class="line">Navigator.push(context,</span><br><span class="line"><span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">    builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Second(title: <span class="string">&quot;第二个页面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="无参跳转"><a href="#无参跳转" class="headerlink" title="无参跳转"></a>无参跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到新的 页面我们需要调用 navigator.push方法  -</span></span><br><span class="line">Navigator.push(</span><br><span class="line">    context,</span><br><span class="line">    <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">        builder: (context) =&gt; <span class="keyword">new</span> Second()</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Sogrey/flutter-demos/blob/master/flutter_route/apks/app-release.apk?raw=true">apk</a>，<a href="https://github.com/Sogrey/flutter-demos/tree/master/flutter_route">github</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 动态调用外部jar/dex</title>
      <link href="/article/Android%20%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8jar&amp;dex/"/>
      <url>/article/Android%20%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8jar&amp;dex/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>现有需求，需要做一个生成外部jar，去验证已发布App有效性，这个外部jar可更新，而App不用重新发布之需要重新发布这个jar包即可。此次记录这种需求开发，jar包中以MD5加密为例。</p><span id="more"></span><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>跟往常一样，创建android studio 项目，其中包含两个app Module和两个library Module，目前都是空项目。如下图：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813151634.jpg?raw=true"></p><p>其中：</p><ul><li><code>app</code>:发布App，需要验证的App项目。</li><li><code>app2</code>:用于直接依赖测试打包jar项目。</li><li><code>lib_interface</code>:这个项目里只有一个接口<code>interface</code>，提供了一个或多个可供调用的方法,所有用到验证jar包的项目包括发布jar项目本身都要依赖于它，比如此项目中另外三个项目都要依赖于此library Module。</li><li><code>lib_md5</code>:用于发包jar包的项目。</li></ul><h2 id="创建接口类"><a href="#创建接口类" class="headerlink" title="创建接口类"></a>创建接口类</h2><p>首先处理<code>lib_interface</code>,在<code>lib_interface</code>中新建一个<code>interface</code>接口类<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_interface/src/main/java/org/sogrey/jarinterface/Md5JarInterface.java">Md5JarInterface.java</a></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152011.jpg?raw=true"></p><p>里面只有一个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Md5值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">getMd5</span><span class="params">(String content)</span>;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152128.jpg?raw=true"></p><h2 id="实现接口类方法"><a href="#实现接口类方法" class="headerlink" title="实现接口类方法"></a>实现接口类方法</h2><p>要实现上面接口类方法，转到<code>lib_md5</code> module,首先需要先依赖<code>lib_interface</code>:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152251.jpg?raw=true"></p><p>在<code>lib_md5</code>的<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/build.gradle">build.gradle</a>多了句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation project(<span class="string">&#x27;:lib_interface&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152320.jpg?raw=true"></p><p>依赖好之后，在<code>lib_md5</code>新建一个<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/src/main/java/org/sogrey/md5/impl/Md5Utils.java">Md5Utils.java</a>实现<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_interface/src/main/java/org/sogrey/jarinterface/Md5JarInterface.java">Md5JarInterface</a>接口:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152416.jpg?raw=true"></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152504.jpg?raw=true"></p><p>下面引进<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/src/main/java/org/sogrey/md5/MD5.java">MD5.java</a>(md5算法网上多得是)，并实现<code>getMd5()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMd5</span><span class="params">(String content)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MD5.MD5(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时一个简单的库项目功能基本完成，测试通过后就能发包jar包了。</p><h2 id="依赖测试"><a href="#依赖测试" class="headerlink" title="依赖测试"></a>依赖测试</h2><p>完成了库项目功能开发，先直接依赖测试下结果。让<code>app2</code> module依赖于<code>lib_interface</code>和<code>lib_md5</code>：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152617.jpg?raw=true"></p><p>简单修改<a href="https://github.com/Sogrey/LoadJar/blob/master/app2/src/main/res/layout/activity_main.xml">activity_main.xml</a>:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152751.jpg?raw=true"></p><p>在<a href="https://github.com/Sogrey/LoadJar/blob/master/app2/src/main/java/org/sogrey/app2/MainActivity.java">MainActivity.java</a>添加下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TextView</span> <span class="variable">txtResult</span> <span class="operator">=</span> findViewById(R.id.txt_result);</span><br><span class="line">txtResult.setText(<span class="keyword">new</span> <span class="title class_">Md5Utils</span>().getMd5(<span class="string">&quot;123456&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153202.jpg?raw=true"></p><p>编译运行测试：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153401.jpg?raw=true"></p><p>测试正常。</p><h2 id="混淆打包jar"><a href="#混淆打包jar" class="headerlink" title="混淆打包jar"></a>混淆打包jar</h2><p>经过测试<code>lib_md5</code>项目功能正常，下面准备混淆打包。</p><p>混淆模板参考<a href="https://sogrey.github.io/notes/%E6%B7%B7%E6%B7%86%E6%A8%A1%E6%9D%BF">这里</a>。</p><p>但须注意，对外调用的接口方法是不能被混淆，否则后找不到,修改<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/proguard-rules.pro">proguard-rules.pro</a>添加如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-keep public class org.sogrey.md5.impl.Md5Utils</span><br><span class="line">-keepclasseswithmembers public class org.sogrey.md5.impl.Md5Utils&#123;</span><br><span class="line">   public String getMd5();</span><br><span class="line">&#125;</span><br><span class="line">-keep class org.sogrey.md5.impl.Md5Utils&#123;</span><br><span class="line">   public &lt;methods&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153930.jpg?raw=true"></p><p>编辑<code>lib_md5</code>的<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/build.gradle">build.gradle</a>,修改buildTypes.release.minifyEnabled 为 true.</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155019.jpg?raw=true"></p><p>添加task：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def SDK_BASENAME = <span class="string">&quot;MD5&quot;</span> //名称</span><br><span class="line">def SDK_VERSION = <span class="string">&quot;_V1.0&quot;</span> //版本</span><br><span class="line">def sdkDestinationPath = <span class="string">&quot;build&quot;</span> //生成保存位置</span><br><span class="line">def zipFile = file(<span class="string">&#x27;build/intermediates/bundles/release/classes.jar&#x27;</span>) //打包源文件</span><br><span class="line"></span><br><span class="line">task deleteBuild(<span class="built_in">type</span>: Delete) &#123;</span><br><span class="line">    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + <span class="string">&quot;.jar&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">task makeJar(<span class="built_in">type</span>: Jar) &#123;</span><br><span class="line">    from zipTree(zipFile)</span><br><span class="line">    from fileTree(<span class="built_in">dir</span>: <span class="string">&#x27;src/main&#x27;</span>,includes: [<span class="string">&#x27;assets/**&#x27;</span>])//将assets目录打入jar包</span><br><span class="line">    baseName = SDK_BASENAME + SDK_VERSION</span><br><span class="line">    destinationDir = file(sdkDestinationPath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeJar.dependsOn(deleteBuild, build)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813154519.jpg?raw=true"></p><p><code>makeJar</code> task作用是打包生成jar，但是生成的jar是没有混淆的，再添加task:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">task proguardJar(dependsOn: [<span class="string">&#x27;makeJar&#x27;</span>], <span class="built_in">type</span>: proguard.gradle.ProGuardTask) &#123;</span><br><span class="line">    //Android 默认的 proguard 文件</span><br><span class="line">    configuration android.getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>)</span><br><span class="line">    //manifest 注册的组件对应的 proguard 文件</span><br><span class="line">    configuration <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">    String inJar = makeJar.archivePath.getAbsolutePath()</span><br><span class="line">    //输入 jar</span><br><span class="line">    injars inJar</span><br><span class="line">    //输出 jar</span><br><span class="line">    outjars inJar.substring(0, inJar.lastIndexOf(File.separator)) + <span class="string">&quot;/proguard-<span class="variable">$&#123;makeJar.archiveName&#125;</span>&quot;</span></span><br><span class="line">    //设置不删除未引用的资源(类，方法等)</span><br><span class="line">    dontshrink</span><br><span class="line">    Plugin plugin = getPlugins().hasPlugin(<span class="string">&quot;AppPlugin&quot;</span>) ?</span><br><span class="line">            getPlugins().findPlugin(<span class="string">&quot;AppPlugin&quot;</span>) :</span><br><span class="line">            getPlugins().findPlugin(<span class="string">&quot;LibraryPlugin&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (plugin != null) &#123;</span><br><span class="line">        List&lt;String&gt; runtimeJarList</span><br><span class="line">        <span class="keyword">if</span> (plugin.getMetaClass().getMetaMethod(<span class="string">&quot;getRuntimeJarList&quot;</span>)) &#123;</span><br><span class="line">            runtimeJarList = plugin.getRuntimeJarList()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (android.getMetaClass().getMetaMethod(<span class="string">&quot;getBootClasspath&quot;</span>)) &#123;</span><br><span class="line">            runtimeJarList = android.getBootClasspath()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            runtimeJarList = plugin.getBootClasspath()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String runtimeJar : runtimeJarList) &#123;</span><br><span class="line">            //给 proguard 添加 runtime</span><br><span class="line">            libraryjars(runtimeJar)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155807.jpg?raw=true"></p><p><code>proguardJar</code> task 用于混淆打包。可以看到<code>proguardJar</code>里调用了<code>makeJar</code><br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155854.jpg?raw=true"></p><p>执行task,点击android studio 右上角<code>Gradle</code>展开找到<code>:lib_md5</code>,在<code>task</code>&gt;<code>other</code>里找到我们刚定义的task：<code>makeJar</code>和<code>proguardJar</code>，直接双击执行，我们需要混淆的直接双击<code>proguardJar</code> task,等待编译完成，会在<code>build</code>里生成了两个jar包：<code>MD5_V1.0.jar</code>和<code>proguard-MD5_V1.0.jar</code>，从文件名就能看出<code>proguard-MD5_V1.0.jar</code>是混淆过的。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155922.jpg?raw=true"></p><p>直接zip解压可直接看到包结构可class文件:<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155642.jpg?raw=true"></p><h2 id="jar包dx处理"><a href="#jar包dx处理" class="headerlink" title="jar包dx处理"></a>jar包dx处理</h2><p>jar包生成好之后，下面就要进行dx处理，把生成的jar拷贝到Android SDK目录下<code>build-tools\28.0.1</code>，后面的版本根据你自己的版本：<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160050.jpg?raw=true"></p><p>执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dx --dex --output=proguard-MD5-dex_V1.0.jar proguard-MD5_V1.0.jar</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160501.jpg?raw=true"></p><p>将会生成目标jar包：<code>proguard-MD5-dex_V1.0.jar</code><br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160542.jpg?raw=true"></p><p>同样我们zip解压后看到的是一个dex文件。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160636.jpg?raw=true"></p><h2 id="引入外部jar测试"><a href="#引入外部jar测试" class="headerlink" title="引入外部jar测试"></a>引入外部jar测试</h2><p>jar包dx处理完毕后就可以使用<code>app</code> module加载外部jar测试了，当然首先<code>app</code>须依赖于<code>lib_interface</code>。</p><p>为方便安装测试，我们把dx处理好的jar放在assets文件夹下，app安装后拷贝到sd卡再加载。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160836.jpg?raw=true"></p><p><a href="https://github.com/Sogrey/LoadJar/blob/master/app/src/main/java/org/sogrey/loadjar/MainActivity.java">MainActivity.java</a>中代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">cacheFile</span> <span class="operator">=</span> FileUtils.getCacheDir(getApplicationContext());</span><br><span class="line"><span class="type">File</span> <span class="variable">libFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(cacheFile, <span class="string">&quot;lib&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!libFile.exists()) libFile.mkdirs();</span><br><span class="line"><span class="type">String</span> <span class="variable">internalPath</span> <span class="operator">=</span> cacheFile.getAbsolutePath() + File.separator + <span class="string">&quot;lib&quot;</span> + File.separator + jarName;</span><br><span class="line"><span class="type">File</span> <span class="variable">desFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(internalPath);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!desFile.exists()) &#123;</span><br><span class="line">        desFile.createNewFile();</span><br><span class="line">        FileUtils.copyFiles(<span class="built_in">this</span>, jarName, desFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上是将jar拷贝到sd卡，是为测试方便，实际应用中应该是下载保存到sd卡.</span></span><br><span class="line"><span class="comment">//下面开始加载dex class</span></span><br><span class="line"><span class="type">DexClassLoader</span> <span class="variable">dexClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(internalPath, libFile.getAbsolutePath(), <span class="literal">null</span>, getClassLoader());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//加载的类名为jar文件里面完整类名，写错会找不到此类hh</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">libClazz</span> <span class="operator">=</span> dexClassLoader.loadClass(className);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Md5JarInterface</span> <span class="variable">md5JarInterface</span> <span class="operator">=</span> (Md5JarInterface) libClazz.newInstance();</span><br><span class="line">    <span class="keyword">if</span> (md5JarInterface != <span class="literal">null</span>) &#123;</span><br><span class="line">        txtResult.post(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                txtResult.setText(md5JarInterface.getMd5(<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码通过<code>DexClassLoader</code>类加载器找到对应的类，该类实现了<code>Md5JarInterface</code>接口方法，调用该方法得到结果。</p><p>最后因为有SD卡文件读写，别忘了添加权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>android 6.0动态权限申请请自行百度。</p><p>测试之：<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813162747.jpg?raw=true"></p><p>项目地址：<a href="https://github.com/Sogrey/LoadJar">github</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> jar </tag>
            
            <tag> dex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI Md5加密生成so文件</title>
      <link href="/article/JNI%20Md5%E5%8A%A0%E5%AF%86%E7%94%9F%E6%88%90so%E6%96%87%E4%BB%B6/"/>
      <url>/article/JNI%20Md5%E5%8A%A0%E5%AF%86%E7%94%9F%E6%88%90so%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JNI Md5加密生成so文件</p><p>IDE工具:Android Studio<br>编译环境:JDK1.8+Android SDK+NDK</p><span id="more"></span><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1 新建项目"></a>1 新建项目</h2><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE-Android-jni-md5.jpg"></p><p>选中“Include C++ support”,一直“Next”.<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/%E9%80%89%E6%8B%A9c++Support.jpg"></p><p>等待项目构建完成后<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg"></p><p>看到 <code>java</code>包同级有个<code>cpp</code>的包就是存放c++代码的。</p><p>而里<code>native-lib.cpp</code>的代码很简单，就是打印出一句“Hello from C++”:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT jstring</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_sogrey_android_1jni_1md5_MainActivity_stringFromJNI</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        JNIEnv *env,</span></span></span><br><span class="line"><span class="params"><span class="function">        jobject <span class="comment">/* this */</span>)</span> </span>&#123;</span><br><span class="line">    std::string hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(hello.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下：<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803161827.jpg"></p><p>这就表示我们的C++环境正常，可以开始写我们自己的代码了。</p><h2 id="2-新建Jni工具类"><a href="#2-新建Jni工具类" class="headerlink" title="2 新建Jni工具类"></a>2 新建Jni工具类</h2><p>新建一个<code>JNIUtils.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sogrey.android_jni_md5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Sogrey on 2018/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNIUtils</span> &#123;</span><br><span class="line">    <span class="comment">// Used to load the &#x27;native-lib&#x27; library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A native method that is implemented by the &#x27;native-lib&#x27; native library,</span></span><br><span class="line"><span class="comment">     * which is packaged with this application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>MainActivity.java</code>中的相关代码删掉</p><blockquote><p>tv.setText(stringFromJNI());</p></blockquote><p>也改成</p><blockquote><p>tv.setText(new JNIUtils().stringFromJNI());</p></blockquote><h2 id="3-生成-h文件-编写cpp文件"><a href="#3-生成-h文件-编写cpp文件" class="headerlink" title="3 生成.h文件,编写cpp文件"></a>3 生成.h文件,编写cpp文件</h2><p>Android studio的Terminal中依次执行命令：</p><blockquote><p>cd app/src/main/java<br>javah -jni sogrey.android_jni_md5.JNIUtils</p></blockquote><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM%E2%80%9420180803164015.jpg"></p><p>将生成的<code>sogrey_android_jni_md5_JNIUtils.h</code>头文件剪贴到<code>cpp</code>包下，并复制一份重命名为<code>sogrey_android_jni_md5_JNIUtils.cpp</code>.<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803164408.jpg"></p><p>编辑复制的<code>.cpp</code>文件，删掉多余代码只留下需要我们实现的那个方法,加上返回方法体，并导入之前的<code>.h</code>文件<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803164549.jpg"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sogrey_android_jni_md5_JNIUtils.h&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    stringFromJNI</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_sogrey_android_1jni_1md5_JNIUtils_stringFromJNI</span></span></span><br><span class="line"><span class="function">        <span class="params">(JNIEnv *env, jobject obj)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法需要返回<code>jstring</code>,可以参照之前<code>native-lib.cpp</code>里的代码实现，引入提示需要导入<code>string</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM%E6%88%AA%E5%9B%BE20180803165042.jpg"></p><p>则最终代码就是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sogrey_android_jni_md5_JNIUtils.h&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    stringFromJNI</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_sogrey_android_1jni_1md5_JNIUtils_stringFromJNI</span></span></span><br><span class="line"><span class="function">        <span class="params">(JNIEnv *env, jobject obj)</span></span>&#123;</span><br><span class="line">    std::string hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(hello.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-修改CMakeLists-txt文件"><a href="#4-修改CMakeLists-txt文件" class="headerlink" title="4 修改CMakeLists.txt文件"></a>4 修改<code>CMakeLists.txt</code>文件</h2><p>我们刚刚添加了一个新的c++文件，现将它加到CMakeLists中，刚才的<code>native-lib.cpp</code>已经没有用了，注掉它<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803165959.jpg"></p><p>重新编译运行看会不会得到和之前一样的结果。（结果是一样的）<br>在<code>build</code>&gt;<code>intermediates</code>&gt;<code>cmake</code>&gt;<code>debug</code>&gt;<code>obj</code>下就能找到生成的.so文件了<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803170704.jpg"></p><h2 id="5-添加getMd5-String-的native方法"><a href="#5-添加getMd5-String-的native方法" class="headerlink" title="5 添加getMd5(String)的native方法"></a>5 添加<code>getMd5(String)</code>的native方法</h2><p>在<code>JNIUtils.java</code>中添加下面native方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定字符串md5值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 要md5加密的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> md5加密串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">getMd5</span><span class="params">(String content)</span>;</span><br></pre></td></tr></table></figure><p>重复第三步操作。或者熟练了直接在<code>sogrey_android_jni_md5_JNIUtils.h</code>文件中添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span></span></span><br><span class="line"><span class="function">        <span class="params">(JNIEnv *, jobject, jstring)</span></span>;</span><br></pre></td></tr></table></figure><p>同样，需要在<code>sogrey_android_jni_md5_JNIUtils.cpp</code>中去实现它：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span></span></span><br><span class="line"><span class="function">        <span class="params">(JNIEnv *env, jobject obj, jstring str)</span></span>&#123;</span><br><span class="line">    <span class="comment">//TODO 实现方法逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-实现MD5加密"><a href="#6-实现MD5加密" class="headerlink" title="6 实现MD5加密"></a>6 实现MD5加密</h2><p>md5的加密方法网上很多，这里给出一个c++实现的[<a href="https://github.com/Sogrey/AndroidJniMD5/blob/master/app/src/main/cpp/MD5.cpp">MD5.cpp</a>,<a href="https://github.com/Sogrey/AndroidJniMD5/blob/master/app/src/main/cpp/MD5.h">MD5.h</a>].直接将两个文件引入到cpp包下，<br>在<code>sogrey_android_jni_md5_JNIUtils.cpp</code>引入</p><blockquote><p>#include “MD5.h”</p></blockquote><p>则<code>getMD5</code>方法实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span></span></span><br><span class="line"><span class="function">        <span class="params">(JNIEnv *env, jobject obj, jstring str)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *originStr;</span><br><span class="line">    <span class="comment">//将jstring转化成char *类型</span></span><br><span class="line">    originStr = env-&gt;<span class="built_in">GetStringUTFChars</span>(str,JNI_FALSE);</span><br><span class="line">    MD5 md5 = <span class="built_in">MD5</span>(originStr);</span><br><span class="line">    std::string md5Result = md5.<span class="built_in">hexdigest</span>();</span><br><span class="line"><span class="comment">//    //将char *类型转化成jstring返回给Java层</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(md5Result.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：JNI_FALSE 是个宏定义表示 jboolean false</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> JNI_FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JNI_TRUE 1</span></span><br></pre></td></tr></table></figure><p>运行一把，得到md5字符串<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803225817.jpg"></p><h2 id="7-生成-so文件"><a href="#7-生成-so文件" class="headerlink" title="7 生成.so文件"></a>7 生成.so文件</h2><p>在cmake.txt中添加</p><pre><code>#设置生成的so动态库最后输出的路径set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/../jniLibs/$&#123;ANDROID_ABI&#125;)</code></pre><p>用来指定生成的so文件存储路径，点击<code>build</code>&gt;<code>Make project</code>,看到在<code>jniLibs</code>文件夹下生成支持4中不同内核的so文件。<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804002050.jpg"></p><p>想要配置指定内核平台，修改<code>Module</code>下的<code>build.gradle</code>中的<code>android</code>&gt;<code>defaultConfig</code> 添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags &quot;&quot;</span><br><span class="line">                abiFilters &quot;arm64-v8a&quot;,&quot;armeabi-v7a&quot;,&quot;x86&quot;,&quot;x86_64&quot;</span><br><span class="line">//Error:ABIs [armeabi] are not supported for platform. Supported ABIs are [armeabi-v7a, arm64-v8a, x86, x86_64].</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="8-修改库名称"><a href="#8-修改库名称" class="headerlink" title="8 修改库名称"></a>8 修改库名称</h2><p>默认生成的so库名称是<code>native-lib</code>,怎么修改为自定义的名称呢。</p><p>首先，修改<code>CMakeLists.txt</code>内容：修改<code>add_library</code>和<code>target_link_libraries</code>第一个参数为我们想自定定义的名称，比如<code>md5Lib</code><br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804003217.jpg"></p><p>同样需要修改<code>JNIUtils.java</code>中<code>System.loadLibrary(String)</code>的参数为上面我们自定义的名称<code>md5Lib</code><br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804003613.jpg"></p><p>重新点击<code>build</code>&gt;<code>Make project</code>,看到在<code>jniLibs</code>文件夹下生成新的so文件。<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804004506.jpg"></p><p>项目源码地址<a href="https://github.com/Sogrey/AndroidJniMD5">github</a></p>]]></content>
      
      
      <categories>
          
          <category> JNI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JNI </tag>
            
            <tag> Md5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pe装机，开机设置启动项快捷键</title>
      <link href="/article/PE%E8%A3%85%E6%9C%BA%EF%BC%8C%E5%BC%80%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%90%AF%E5%8A%A8%E9%A1%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/article/PE%E8%A3%85%E6%9C%BA%EF%BC%8C%E5%BC%80%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%90%AF%E5%8A%A8%E9%A1%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>PE装机启动键来了。</p><table><thead><tr><th align="center">组装机主板</th><th align="center"></th><th align="center">品牌笔记本</th><th align="center"></th><th align="center">品牌台式机</th><th align="center"></th></tr></thead><tbody><tr><td align="center">主板品牌</td><td align="center">启动按键</td><td align="center">笔记本品牌</td><td align="center">启动按键</td><td align="center">台式机品牌</td><td align="center">启动按键</td></tr><tr><td align="center">华硕</td><td align="center">F8</td><td align="center">联想</td><td align="center">F12</td><td align="center">联想</td><td align="center">F12</td></tr><tr><td align="center">技嘉</td><td align="center">F12</td><td align="center">宏基</td><td align="center">F12</td><td align="center">惠普</td><td align="center">F12</td></tr><tr><td align="center">微星</td><td align="center">F11</td><td align="center">华硕</td><td align="center">ESC</td><td align="center">宏基</td><td align="center">F12</td></tr><tr><td align="center">映泰</td><td align="center">F9</td><td align="center">惠普</td><td align="center">F9</td><td align="center">戴尔</td><td align="center">ESC</td></tr><tr><td align="center">梅捷</td><td align="center">ESC/F12</td><td align="center">联想ThinkPad</td><td align="center">F12</td><td align="center">神舟</td><td align="center">F12</td></tr><tr><td align="center">七彩虹</td><td align="center">ESC/F11</td><td align="center">戴尔</td><td align="center">F12</td><td align="center">华硕</td><td align="center">F8</td></tr><tr><td align="center">华擎</td><td align="center">F11</td><td align="center">神舟</td><td align="center">F12</td><td align="center">方正</td><td align="center">F12</td></tr><tr><td align="center">斯巴达克</td><td align="center">ESC</td><td align="center">东芝</td><td align="center">F12</td><td align="center">清华同方</td><td align="center">F12</td></tr><tr><td align="center">昂达</td><td align="center">F11</td><td align="center">三星</td><td align="center">F12</td><td align="center">海尔</td><td align="center">F12</td></tr><tr><td align="center">双敏</td><td align="center">ESC</td><td align="center">IBM</td><td align="center">F12</td><td align="center">明基</td><td align="center">F8</td></tr><tr><td align="center">翔升</td><td align="center">F10</td><td align="center">富士通</td><td align="center">F12</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">精英</td><td align="center">ESC/F11</td><td align="center">海尔</td><td align="center">F12</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">冠盟</td><td align="center">F11/F12</td><td align="center">方正</td><td align="center">F12</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">富士康</td><td align="center">ESC/F12</td><td align="center">清华同方</td><td align="center">F12</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">顶星</td><td align="center">F11/F12</td><td align="center">微星</td><td align="center">F11</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">铭瑄</td><td align="center">ESC</td><td align="center">明基</td><td align="center">F9</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">盈通</td><td align="center">F8</td><td align="center">技嘉</td><td align="center">F12</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">捷波</td><td align="center">ESC</td><td align="center">Gateway</td><td align="center">F12</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Intel</td><td align="center">F12</td><td align="center">eMachines</td><td align="center">F12</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">—</td><td align="center">—</td><td align="center">—</td><td align="center">—</td><td align="center">—</td><td align="center">—</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 装机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
            <tag> PE </tag>
            
            <tag> 重装系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS code 插件</title>
      <link href="/article/VS-code-%E6%8F%92%E4%BB%B6/"/>
      <url>/article/VS-code-%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>VS CODE 插件收集</p><blockquote><p>已整理到：<a href="https://sogrey.github.io/Plug-in/">https://sogrey.github.io/Plug-in/</a>  </p><p><a href="https://github.com/Sogrey/Plug-in/issues/1">征集插件，欢迎上报你觉得有用的插件</a></p></blockquote><span id="more"></span><ul><li><ol><li>live-server 编辑浏览html网页</li></ol></li></ul><p><a href="https://github.com/tapio/live-server">github</a></p><p>第一步： 安装Visual Studio Code + Node.JS</p><p>第二步：通过如下命令行安装live-server</p><p>在命令符中输入 <code>npm install -g live-server</code>进行安装</p><p>如果<code>npm install -g live-server</code>安装报错就用<code>npm install live-server -gf</code>安装</p><p>第三步：打开Visual Studio Code编写HTML代码，保存。</p><p>第四步：右击HTML文件所在的文件夹，选择“在命令提示符中打开”</p><p>第五步：输入<code>live-server</code>命令</p><p>第六步：选择HTML页面浏览即可</p><ul><li><ol start="2"><li>Markdown Preview Enhanced  作者：Yiyi Wang</li></ol></li></ul><p><a href="https://github.com/shd101wyy/vscode-markdown-preview-enhanced">github</a></p><p>VS code 扩展直接搜索 <code>Markdown Preview Enhanced</code> 安装即可。</p><ul><li><ol start="3"><li><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode">Polacode</a>  可以把代码生成图片（有些地方发代码结构会乱也没有代码高亮，这时候就可以生成图片再发）。</li></ol></li></ul><ol><li>快捷键 <code>Ctrl + Shift + P</code> 呼出命令窗 输入 <code>Polacode</code> </li><li>将要生成图片的代码复制到 Polacode 窗口</li><li>点击最下面按钮保存图片</li></ol><ul><li><ol start="4"><li>另一个 <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a> ：可以一键在本地启动服务器。</li></ol></li><li><ol start="5"><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a> ：检查 js 语法规范，你可以使用不同的规范，如 airbnb 、standard 、google。</li></ol></li><li><ol start="6"><li><a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint">TSLint</a> ：检查 typescript 语法规范。</li></ol></li><li><ol start="7"><li><a href="https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint">Stylelint</a> ：检查 CSS/SCSS/Less 语法规范。</li></ol></li><li><ol start="8"><li><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">Markdownlint</a> ：检查 markdown 语法规范。</li></ol></li><li><ol start="9"><li><a href="https://emmet.io/">Emmet</a> ：大家应该很熟悉这个插件了（很好用），VS Code 已经内置了，很到位。</li></ol></li><li><ol start="10"><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a> ：自动闭合 html 等标签 （&lt;/…&gt;）。</li></ol></li><li><ol start="11"><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a> ：修改 html 标签时，自动修改闭合标签。</li></ol></li><li><ol start="12"><li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a> ：自动提示补全路径。</li></ol></li><li><ol start="13"><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a> ：可以在编辑器里直接运行代码，查看结果。</li></ol></li><li><ol start="14"><li><a href="https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color">Color Picker</a> ：可以直接在编辑器里打开色板，选择各种模式的颜色。</li></ol></li><li><ol start="15"><li><a href="https://marketplace.visualstudio.com/items?itemName=joelday.docthis">Document This</a> ：可以给函数、类等自动的加上详细的注释。<br>快捷键 <code>Ctrl+Alt+D</code> and <code>again Ctrl+Alt+D</code></li></ol></li><li><ol start="16"><li><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory">Git History</a> ：方便的查看git版本管理的详细信息。</li></ol></li><li><ol start="17"><li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">Settings Sync</a> ：重点介绍下这个插件，如果你有两台电脑（比如，家里和公司）都使用 VS Code ，可是在公司或家里对 VS Code 安装了插件或者修改了配置，回到家或公司又要重新弄一次，这个插件就能解决问题，同步多台电脑设置。只需要把配置上传到GitHub，在另一个地方下载配置即可</li></ol></li></ul><p><strong>1.Settings Sync</strong></p><p>最好用的插件，没有之一，一台电脑配置好之后，其它的几台电脑都不用配置。新机器登录一下就搞定了。再也不用折腾环境了，</p><p>使用GitHub Gist同步多台计算机上的设置，代码段，主题，文件图标，启动，键绑定，工作区和扩展。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-fb7068d23d498ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/657/format/webp" alt="img"></p><p><strong>2.Debugger for Chrome</strong></p><p>从VS Code调试在Google Chrome中运行的JavaScript代码。</p><p>用于在Google Chrome浏览器或支持<a href="https://chromedevtools.github.io/debugger-protocol-viewer/">Chrome DevTools协议的</a>其他目标中调试JavaScript代码的VS Code扩展。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-a0708139132b0af8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/690/format/webp" alt="img"></p><p><strong>3.beautify</strong></p><p>格式化代码工具</p><p>美化<code>javascript</code>，<code>JSON</code>，<code>CSS</code>，<code>Sass</code>，和<code>HTML</code>在Visual Studio代码。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-4720f7961226fb6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/639/format/webp" alt="img"></p><p><strong>4.Atuo Rename Tag</strong></p><p>修改 html 标签，自动帮你完成头部和尾部闭合标签的同步修改</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-cd4c695fa202b259.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/222/format/webp" alt="img"></p><p><strong>5.中文（简体）语言包</strong></p><p><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">Chinese (Simplified) Language Pack for Visual Studio Code</a></p><p>将界面转换为中文，对英语不好的人，非常友好。例如我。。。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-a5e8b1406a14df59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/948/format/webp" alt="img"></p><p><strong>6.Code Spell Checker</strong></p><p>代码拼写检查器</p><p>一个与camelCase代码配合良好的基本拼写检查程序。</p><p>此拼写检查程序的目标是帮助捕获常见的拼写错误，同时保持误报数量较低。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-45a28ae47762d653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/689/format/webp" alt="img"></p><p><strong>7.vscode-icons</strong></p><p>显示Visual Studio代码的图标，目前该插件已被vscode内部支持：”文件” -&gt; “首选项” -&gt; “文件图标主题”</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-203128b9031364a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/894/format/webp" alt="img"></p><p><strong>8.guides</strong></p><p>显示代码对齐辅助线，很好用</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-1618745c4fda4807.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600/format/webp" alt="img"></p><p>9.<a href="https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets">Rainbow Brackets</a></p><p>为圆括号，方括号和大括号提供彩虹色。这对于Lisp或Clojure程序员，当然还有JavaScript和其他程序员特别有用。</p><p>效果如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-2cdbe1b95b081ece.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/530/format/webp" alt="img"></p><p><strong>10.Bracket Pair Colorizer</strong></p><p>用于着色匹配括号</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-a977f0262f623d06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/625/format/webp" alt="img"></p><p><strong>11.Indent-Rainbow</strong></p><p>用四种不同颜色交替着色文本前面的缩进</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-62d24545140dbe18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/422/format/webp" alt="img"></p><p><strong>12.filesize</strong></p><p>在状态栏中显示当前文件大小，点击后还可以看到详细创建、修改时间</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-1357457acb1f876f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p><strong>13.Import Cost</strong></p><p>对引入的计算大小</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-3862c63254d26a9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/784/format/webp" alt="img"></p><p><strong>14.Path Intellisense</strong></p><p>可自动填充文件名。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-ba8192a422d38f39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480/format/webp" alt="img"></p><p>**15.<a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime">WakaTime</a> **</p><p>从您的编程活动自动生成的度量标准，见解和时间跟踪。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-a82197ba581c44d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p><strong>16.GitLens</strong></p><p>git日志查看插件</p><p>GitLens 增强了 Visual Studio Code 中内置的 Git 功能。例如 commits 搜索，历史记录和和查看代码作者身份，还能通过强大的比较命令获得有价值的见解等等</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-bf9b731fc13d26ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p><strong>17..REST Client</strong></p><p>REST客户端允许您直接发送HTTP请求并在Visual Studio Code中查看响应。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-fdb6811c5c899e19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/665/format/webp" alt="img"></p><p>**18.<a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">Npm Intellisense</a> **</p><p>用于在 import 语句中自动填充 npm 模块</p><p>require 时的包提示（最新版的vscode已经集成此功能）</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-b07c435a84dd3d97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/921/format/webp" alt="img"></p><p><strong>19.Azure Storage</strong></p><p>VS Code的Azure存储扩展允许您部署静态网站并浏览Azure Blob容器，文件共享，表和队列。按照<a href="https://code.visualstudio.com/tutorials/static-website/getting-started">本教程</a>从VS Code部署Web应用程序到Azure存储。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-1f1b4ac882f302aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/683/format/webp" alt="img"></p><p><strong>20.Project Manager</strong></p><p>它可以帮助您轻松访问项目，无论它们位于何处。<em>不要再错过那些重要的项目了</em>。您可以定义自己的<strong>收藏</strong>项目，或选择自动检测<strong>VSCode</strong>项目，<strong>Git</strong>，<strong>Mercurial</strong>和<strong>SVN</strong>存储库或<strong>任何</strong>文件夹。</p><p>从版本8开始，您就有了专门的项目<strong>活动栏</strong>！</p><p>以下是<strong>Project Manager</strong>提供的一些功能：</p><ul><li>将任何项目保存为<strong>收藏夹</strong> </li><li>自动检测<strong>VSCode</strong>，<strong>GIT中</strong>，<strong>水银</strong>或<strong>SVN</strong>存放区</li><li>在相同或新窗口中打开项目</li><li>识别<em>已删除/重命名的</em>项目</li><li>一个<strong>状态栏</strong>标识当前项目</li><li>专门的<strong>活动栏</strong> </li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14464859-7d3c5f109f1ccf5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp" alt="img"></p><p><strong>21.Language Support for Java(TM) by Red Hatredhat.java</strong></p><p>这个插件，这个下载次数，安装就对了。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-b6341da4f97e7344.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/859/format/webp" alt="img"></p><p>**22.<a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree">Todo Tree</a> **</p><p>此扩展可以快速搜索（使用<a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>）您的工作区以获取TODO和FIXME等注释标记，并在资源管理器窗格的树视图中显示它们。单击树中的TODO将打开文件并将光标放在包含TODO的行上。</p><p>找到的TODO也可以在打开的文件中突出显示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-60725a36424f0e85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><h3 id="b-VS-code-主题集合"><a href="#b-VS-code-主题集合" class="headerlink" title="b.VS code 主题集合"></a>b.VS code 主题集合</h3><h4 id="1-Night-Owl"><a href="#1-Night-Owl" class="headerlink" title="1.Night Owl"></a>1.<a href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl">Night Owl</a></h4><p>一个非常适合夜猫子的 VS Code 主题。像是为喜欢深夜编码的人精心设计的。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-19c33539e14f5928.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/901/format/webp" alt="img"></p><h4 id="2-Atom-One-Dark-Theme"><a href="#2-Atom-One-Dark-Theme" class="headerlink" title="2.Atom One Dark Theme"></a>2.<a href="https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark">Atom One Dark Theme</a></h4><p>一个基于Atom的黑暗主题</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-3e38dbdf95fbb2ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><h4 id="3-Dracula-Official"><a href="#3-Dracula-Official" class="headerlink" title="3.Dracula Official"></a>3.<a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula">Dracula Official</a></h4><p>官方吸血鬼主题，博主用的就是这款，很漂亮</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-2beb37cb8fb13d11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp" alt="img"></p><p>image</p><h4 id="4-One-Dark-Pro"><a href="#4-One-Dark-Pro" class="headerlink" title="4.One Dark Pro"></a>4.<a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">One Dark Pro</a></h4><p>Atom标志性的One Dark主题，也是VS Code下载次数最多的主题之一！</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-f5144ce214a675b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/804/format/webp" alt="img"></p><h4 id="5-Bimbo"><a href="#5-Bimbo" class="headerlink" title="5.Bimbo"></a>5.<a href="https://marketplace.visualstudio.com/items?itemName=pawelgrzybek.bimbo-theme">Bimbo</a></h4><p>简约而现代的神奇海洋主题</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-1467662db4e0a1af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/863/format/webp" alt="img"></p><h3 id="c-代码提示提示类"><a href="#c-代码提示提示类" class="headerlink" title="c.代码提示提示类"></a>c.代码提示提示类</h3><h4 id="1-HTML-Snippets"><a href="#1-HTML-Snippets" class="headerlink" title="1.HTML Snippets"></a>1.<a href="https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets">HTML Snippets</a></h4><p>完整的HTML代码提示，包括HTML5</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-5f3d80192ea28514.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><h4 id="2-HTML-CSS-Support"><a href="#2-HTML-CSS-Support" class="headerlink" title="2.HTML CSS Support"></a>2.<a href="https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css">HTML CSS Support</a></h4><p>在 html 标签上写class 智能提示css样式</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-c88c506ed0224f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/522/format/webp" alt="img"></p><h4 id="3-jQuery-Code-Snippets"><a href="#3-jQuery-Code-Snippets" class="headerlink" title="3.jQuery Code Snippets"></a>3.<a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.jquerysnippets">jQuery Code Snippets</a></h4><p>jQuery代码提示</p><p>超过130个用于JavaScript代码的jQuery代码片段。</p><p>只需键入字母’jq’即可获得所有可用jQuery代码片段的列表。</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-cbb4ea684fbc0066.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/561/format/webp" alt="img"></p><h4 id="4-HTMLHint"><a href="#4-HTMLHint" class="headerlink" title="4.HTMLHint"></a>4.<a href="https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint">HTMLHint</a></h4><p>html代码检测，支持html5</p><p><img src="https://upload-images.jianshu.io/upload_images/14464859-9cb58f52216b348e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/445/format/webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> VS code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历Map的四种方法</title>
      <link href="/article/%E9%81%8D%E5%8E%86Map%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/article/%E9%81%8D%E5%8E%86Map%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>第一种：普遍使用，二次取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;通过Map.keySet遍历key和value：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;key= &quot;</span>+ key + <span class="string">&quot; and value= &quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;通过Map.entrySet使用iterator遍历key和value：&quot;</span>);</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"> Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> it.next();</span><br><span class="line"> System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三种：推荐，尤其是容量大时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;通过Map.entrySet遍历key和value&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry : map.entrySet()) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第四种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15种CSS居中方式</title>
      <link href="/article/15%E7%A7%8DCSS%E5%B1%85%E4%B8%AD%E6%96%B9%E5%BC%8F/"/>
      <url>/article/15%E7%A7%8DCSS%E5%B1%85%E4%B8%AD%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h1><p>CSS居中是前端工程师经常要面对的问题，也是基本技能之一。今天有时间把CSS居中的方案汇编整理了一下，目前包括水平居中，垂直居中及水平垂直居中方案共15种。如有漏掉的，还会陆续的补充进来，算做是一个备忘录吧。</p><span id="more"></span><h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1 水平居中"></a>1 水平居中</h1><h2 id="1-1-内联元素水平居中"><a href="#1-1-内联元素水平居中" class="headerlink" title="1.1 内联元素水平居中"></a>1.1 内联元素水平居中</h2><p>利用 text-align: center 可以实现在块级元素内部的内联元素水平居中。此方法对内联元素(inline), 内联块(inline-block), 内联表(inline-table), inline-flex元素水平居中都有效。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/57">演示代码</a></p><h2 id="1-2-块级元素水平居中"><a href="#1-2-块级元素水平居中" class="headerlink" title="1.2 块级元素水平居中"></a>1.2 块级元素水平居中</h2><p>通过把固定宽度块级元素的margin-left和margin-right设成auto，就可以使块级元素水平居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-block</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/58">演示代码</a></p><h2 id="1-3-多块级元素水平居中"><a href="#1-3-多块级元素水平居中" class="headerlink" title="1.3 多块级元素水平居中"></a>1.3 多块级元素水平居中</h2><h3 id="1-3-1-利用inline-block"><a href="#1-3-1-利用inline-block" class="headerlink" title="1.3.1 利用inline-block"></a>1.3.1 利用inline-block</h3><p>如果一行中有两个或两个以上的块级元素，通过设置块级元素的显示类型为inline-block和父容器的text-align属性从而使多块级元素水平居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/59">演示代码</a></p><h3 id="1-3-2-利用display-flex"><a href="#1-3-2-利用display-flex" class="headerlink" title="1.3.2 利用display: flex"></a>1.3.2 利用display: flex</h3><p>利用弹性布局(flex)，实现水平居中，其中justify-content 用于设置弹性盒子元素在主轴（横轴）方向上的对齐方式，本例中设置子元素水平居中显示。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/60">演示代码</a></p><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2 垂直居中"></a>2 垂直居中</h1><h2 id="2-1-单行内联-inline-元素垂直居中"><a href="#2-1-单行内联-inline-元素垂直居中" class="headerlink" title="2.1 单行内联(inline-)元素垂直居中"></a>2.1 单行内联(inline-)元素垂直居中</h2><p>通过设置内联元素的高度(height)和行高(line-height)相等，从而使元素垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#v-box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/61">演示代码</a></p><h2 id="2-2-多行元素垂直居中"><a href="#2-2-多行元素垂直居中" class="headerlink" title="2.2 多行元素垂直居中"></a>2.2 多行元素垂直居中</h2><h3 id="2-2-1-利用表布局（table）"><a href="#2-2-1-利用表布局（table）" class="headerlink" title="2.2.1 利用表布局（table）"></a>2.2.1 利用表布局（table）</h3><p>利用表布局的vertical-align: middle可以实现子元素的垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-table</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-cell</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/62">演示代码</a></p><h3 id="2-2-2-利用flex布局（flex）"><a href="#2-2-2-利用flex布局（flex）" class="headerlink" title="2.2.2 利用flex布局（flex）"></a>2.2.2 利用flex布局（flex）</h3><p>利用flex布局实现垂直居中，其中flex-direction: column定义主轴方向为纵向。因为flex布局是CSS3中定义，在较老的浏览器存在兼容性问题。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-flex</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/63">演示代码</a></p><h3 id="2-2-3-利用“精灵元素”"><a href="#2-2-3-利用“精灵元素”" class="headerlink" title="2.2.3 利用“精灵元素”"></a>2.2.3 利用“精灵元素”</h3><p>利用“精灵元素”(ghost element)技术实现垂直居中，即在父容器内放一个100%高度的伪元素，让文本和伪元素垂直对齐，从而达到垂直居中的目的。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ghost-center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ghost-center</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1%</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ghost-center</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/64">演示代码</a></p><h2 id="2-3-块级元素垂直居中"><a href="#2-3-块级元素垂直居中" class="headerlink" title="2.3 块级元素垂直居中"></a>2.3 块级元素垂直居中</h2><h3 id="2-3-1-固定高度的块级元素"><a href="#2-3-1-固定高度的块级元素" class="headerlink" title="2.3.1 固定高度的块级元素"></a>2.3.1 固定高度的块级元素</h3><p>我们知道居中元素的高度和宽度，垂直居中问题就很简单。通过绝对定位元素距离顶部50%，并设置margin-top向上偏移元素高度的一半，就可以实现垂直居中了。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/65">演示代码</a></p><h3 id="2-3-2-未知高度的块级元素"><a href="#2-3-2-未知高度的块级元素" class="headerlink" title="2.3.2 未知高度的块级元素"></a>2.3.2 未知高度的块级元素</h3><p>当垂直居中的元素的高度和宽度未知时，我们可以借助CSS3中的transform属性向Y轴反向偏移50%的方法实现垂直居中。但是部分浏览器存在兼容性的问题。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[演示代码]</span>(http://www.<span class="number">42</span>du.cn/run/<span class="number">66</span>)</span><br><span class="line"></span><br><span class="line"># <span class="number">3</span> 水平垂直居中</span><br><span class="line">## <span class="number">3.1</span> 固定宽高元素水平垂直居中</span><br><span class="line">通过margin平移元素整体宽度的一半，使元素水平垂直居中。</span><br><span class="line"></span><br><span class="line">核心代码：</span><br><span class="line"></span><br><span class="line">``` css</span><br><span class="line">.parent &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">70px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">170px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/67">演示代码</a></p><h2 id="3-2-未知宽高元素水平垂直居中"><a href="#3-2-未知宽高元素水平垂直居中" class="headerlink" title="3.2 未知宽高元素水平垂直居中"></a>3.2 未知宽高元素水平垂直居中</h2><p>利用2D变换，在水平和垂直两个方向都向反向平移宽高的一半，从而使元素水平垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/68">演示代码</a></p><h2 id="3-3-利用flex布局"><a href="#3-3-利用flex布局" class="headerlink" title="3.3 利用flex布局"></a>3.3 利用flex布局</h2><p>利用flex布局，其中justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；而align-items属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/69">演示代码</a></p><h2 id="3-4-利用grid布局"><a href="#3-4-利用grid布局" class="headerlink" title="3.4 利用grid布局"></a>3.4 利用grid布局</h2><p>利用grid实现水平垂直居中，兼容性较差，不推荐。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123; </span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/70">演示代码</a></p><h2 id="3-5-屏幕上水平垂直居中"><a href="#3-5-屏幕上水平垂直居中" class="headerlink" title="3.5 屏幕上水平垂直居中"></a>3.5 屏幕上水平垂直居中</h2><p>屏幕上水平垂直居中十分常用，常规的登录及注册页面都需要用到。要保证较好的兼容性，还需要用到表布局。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/10">演示代码</a></p><p>来源：<a href="https://segmentfault.com/a/1190000013966650?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly">https://segmentfault.com/a/1190000013966650?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用百度URL API实现地址与经纬度互相转换</title>
      <link href="/article/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6URL-API%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%9D%80-%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
      <url>/article/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6URL-API%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%9D%80-%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>应用中有时我们需要经纬度与地址之间互相转化，为此引入sdk又太大材小用，百度提供了这样的API可直接调用。</p><span id="more"></span><h3 id="1、-地址查经纬度"><a href="#1、-地址查经纬度" class="headerlink" title="1、 地址查经纬度"></a>1、 地址查经纬度</h3><p>api:<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding</a></p><blockquote><p><a href="http://api.map.baidu.com/geocoder/v2/?address=%5B%E5%9C%B0%E5%9D%80%5D&amp;output=json&amp;mcode=%5Bmcode%5D&amp;ak=%5B%E4%BD%A0%E7%9A%84AK%5D">http://api.map.baidu.com/geocoder/v2/?address=[地址]&amp;output=json&amp;mcode=[mcode]&amp;ak=[你的AK]</a></p></blockquote><p>例如：</p><p><a href="http://api.map.baidu.com/geocoder/v2/?address=%E8%A5%BF%E5%AE%89%E5%B8%82&amp;output=json&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G">http://api.map.baidu.com/geocoder/v2/?address=西安市&amp;output=json&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G</a></p><ul><li>mcode 是安全码</li><li>ak 是你在百度申请的应用的key</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/%E7%99%BE%E5%BA%A6%E5%BA%94%E7%94%A8ak.png" alt="百度应用ak.png"></p><p>返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;result&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;lng&quot;</span>: <span class="number">108.95309827919623</span>,</span><br><span class="line"><span class="string">&quot;lat&quot;</span>: <span class="number">34.277799897830629</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;precise&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;confidence&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="string">&quot;level&quot;</span>: <span class="string">&quot;城市&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、经纬度查地址"><a href="#2、经纬度查地址" class="headerlink" title="2、经纬度查地址"></a>2、经纬度查地址</h3><p>api:<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p><blockquote><p><a href="http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=%5BLatitude,Longitude%5D&amp;output=json&amp;pois=1&amp;mcode=%5Bmcode%5D&amp;ak=%5B%E4%BD%A0%E7%9A%84Ak%5D">http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=[Latitude,Longitude]&amp;output=json&amp;pois=1&amp;mcode=[mcode]&amp;ak=[你的Ak]</a></p></blockquote><p>例如：</p><p><a href="http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=34.203034,108.891956&amp;output=json&amp;pois=1&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G">http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=34.203034,108.891956&amp;output=json&amp;pois=1&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G</a></p><p>返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">renderReverse&amp;&amp;<span class="title function_">renderReverse</span>(&#123;</span><br><span class="line"><span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;result&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;lng&quot;</span>: <span class="number">108.89195599999994</span>,</span><br><span class="line"><span class="string">&quot;lat&quot;</span>: <span class="number">34.20303403835331</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;formatted_address&quot;</span>: <span class="string">&quot;陕西省西安市雁塔区丈八一路&quot;</span>,</span><br><span class="line"><span class="string">&quot;business&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;addressComponent&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;country&quot;</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line"><span class="string">&quot;country_code&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;country_code_iso&quot;</span>: <span class="string">&quot;CHN&quot;</span>,</span><br><span class="line"><span class="string">&quot;country_code_iso2&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line"><span class="string">&quot;province&quot;</span>: <span class="string">&quot;陕西省&quot;</span>,</span><br><span class="line"><span class="string">&quot;city&quot;</span>: <span class="string">&quot;西安市&quot;</span>,</span><br><span class="line"><span class="string">&quot;city_level&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&quot;district&quot;</span>: <span class="string">&quot;雁塔区&quot;</span>,</span><br><span class="line"><span class="string">&quot;town&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;adcode&quot;</span>: <span class="string">&quot;610113&quot;</span>,</span><br><span class="line"><span class="string">&quot;street&quot;</span>: <span class="string">&quot;丈八一路&quot;</span>,</span><br><span class="line"><span class="string">&quot;street_number&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;direction&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;distance&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;pois&quot;</span>: [&#123;</span><br><span class="line"><span class="string">&quot;addr&quot;</span>: <span class="string">&quot;丈八一路1号(跳水馆对面)&quot;</span>,</span><br><span class="line"><span class="string">&quot;cp&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line"><span class="string">&quot;direction&quot;</span>: <span class="string">&quot;附近&quot;</span>,</span><br><span class="line"><span class="string">&quot;distance&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;汇鑫IBC&quot;</span>,</span><br><span class="line"><span class="string">&quot;poiType&quot;</span>: <span class="string">&quot;房地产&quot;</span>,</span><br><span class="line"><span class="string">&quot;point&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;x&quot;</span>: <span class="number">108.89195610279563</span>,</span><br><span class="line"><span class="string">&quot;y&quot;</span>: <span class="number">34.20301956544281</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;tag&quot;</span>: <span class="string">&quot;房地产;写字楼&quot;</span>,</span><br><span class="line"><span class="string">&quot;tel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;uid&quot;</span>: <span class="string">&quot;b703e96b79f2fc878f1a89ce&quot;</span>,</span><br><span class="line"><span class="string">&quot;zip&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;parent_poi&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;tag&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;addr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;point&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;x&quot;</span>: <span class="number">0.0</span>,</span><br><span class="line"><span class="string">&quot;y&quot;</span>: <span class="number">0.0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;direction&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;distance&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;uid&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">...,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;addr&quot;</span>: <span class="string">&quot;汇鑫国际IBC国际商务中心A座&quot;</span>,</span><br><span class="line"><span class="string">&quot;cp&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line"><span class="string">&quot;direction&quot;</span>: <span class="string">&quot;南&quot;</span>,</span><br><span class="line"><span class="string">&quot;distance&quot;</span>: <span class="string">&quot;59&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;汇鑫国际IBC国际商务中心A座&quot;</span>,</span><br><span class="line"><span class="string">&quot;poiType&quot;</span>: <span class="string">&quot;房地产&quot;</span>,</span><br><span class="line"><span class="string">&quot;point&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;x&quot;</span>: <span class="number">108.89182135696913</span>,</span><br><span class="line"><span class="string">&quot;y&quot;</span>: <span class="number">34.20346740878921</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;tag&quot;</span>: <span class="string">&quot;房地产;写字楼&quot;</span>,</span><br><span class="line"><span class="string">&quot;tel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;uid&quot;</span>: <span class="string">&quot;5b37443de29841febbbd63f4&quot;</span>,</span><br><span class="line"><span class="string">&quot;zip&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;parent_poi&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;tag&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;addr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;point&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;x&quot;</span>: <span class="number">0.0</span>,</span><br><span class="line"><span class="string">&quot;y&quot;</span>: <span class="number">0.0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;direction&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;distance&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;uid&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="string">&quot;roads&quot;</span>: [],</span><br><span class="line"><span class="string">&quot;poiRegions&quot;</span>: [],</span><br><span class="line"><span class="string">&quot;sematic_description&quot;</span>: <span class="string">&quot;汇鑫IBC附近1米&quot;</span>,</span><br><span class="line"><span class="string">&quot;cityCode&quot;</span>: <span class="number">233</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="java-代码："><a href="#java-代码：" class="headerlink" title="java 代码："></a>java 代码：</h3><p><a href="https://github.com/Sogrey/JavaDemo/blob/master/src/org/sogrey/url/GeoUtils.java">https://github.com/Sogrey/JavaDemo/blob/master/src/org/sogrey/url/GeoUtils.java</a></p><h3 id="写在最后，关于使用限制"><a href="#写在最后，关于使用限制" class="headerlink" title="写在最后，关于使用限制"></a>写在最后，关于使用限制</h3><p>API是免费的，但有使用上限。上面接口的使用指南可查看。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/%E7%99%BE%E5%BA%A6api%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6.png" alt="百度api使用限制.png"></p>]]></content>
      
      
      <categories>
          
          <category> api </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度 api </tag>
            
            <tag> 地址与经纬度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android获取view宽高的三种方式</title>
      <link href="/article/Android%E8%8E%B7%E5%8F%96view%E5%AE%BD%E9%AB%98%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/article/Android%E8%8E%B7%E5%8F%96view%E5%AE%BD%E9%AB%98%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>getMeasuredHeight()与getHeight的区别</p></blockquote><p>实际上在当屏幕可以包裹内容的时候，他们的值相等，<br>只有当view超出屏幕后，才能看出他们的区别：<br>getMeasuredHeight()是实际View的大小，与屏幕无关，<br>而getHeight的大小此时则是屏幕的大小。<br>当超出屏幕后，getMeasuredHeight()等于getHeight()加上屏幕之外没有显示的大小</p><span id="more"></span><p>具体方法</p><p>我们知道在oncreate中View.getWidth和View.getHeight无法获得一个view的高度和宽度，这是因为View组件 布局要在onResume回调后完成。</p><p>下面说三种方式</p><ul><li>getViewTreeObserver</li></ul><p>使用 getViewTreeObserver().addOnGlobalLayoutListener()来获得宽度或者高度。</p><p>OnGlobalLayoutListener 是ViewTreeObserver的内部类，当一个视图树的布局发生改变时，可以被ViewTreeObserver监听到，这是一个注册监听视图树的观察者(observer)，在视图树的全局事件改变时得到通知。ViewTreeObserver不能直接实例化，而是通过getViewTreeObserver()获得。</p><p>除了OnGlobalLayoutListener ，ViewTreeObserver还有如下内部类：<br>interfaceViewTreeObserver.OnGlobalFocusChangeListener<br>当在一个视图树中的焦点状态发生改变时，所要调用的回调函数的接口类<br>interfaceViewTreeObserver.OnGlobalLayoutListener<br>当在一个视图树中全局布局发生改变或者视图树中的某个视图的可视状态发生改变时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnPreDrawListener</li></ul><p>当一个视图树将要绘制时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnScrollChangedListener</li></ul><p>当一个视图树中的一些组件发生滚动时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnTouchModeChangeListener</li></ul><p>当一个视图树的触摸模式发生改变时，所要调用的回调函数的接口类</p><h3 id="利用OnGlobalLayoutListener来获得一个视图的真实高度。"><a href="#利用OnGlobalLayoutListener来获得一个视图的真实高度。" class="headerlink" title="利用OnGlobalLayoutListener来获得一个视图的真实高度。"></a>利用OnGlobalLayoutListener来获得一个视图的真实高度。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> mHeaderViewHeight; </span><br><span class="line"><span class="keyword">private</span> View mHeaderView; </span><br><span class="line">  </span><br><span class="line">..... </span><br><span class="line">  </span><br><span class="line">mHeaderView.getViewTreeObserver().addOnGlobalLayoutListener( </span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">OnGlobalLayoutListener</span>() &#123; </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onGlobalLayout</span><span class="params">()</span> &#123; </span><br><span class="line">                                                          </span><br><span class="line">   mHeaderViewHeight = mHeaderView.getHeight(); </span><br><span class="line">   mHeaderView.getViewTreeObserver() </span><br><span class="line">     .removeGlobalOnLayoutListener(<span class="built_in">this</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>注意：但是需要注意的是OnGlobalLayoutListener可能会被多次触发，因此在得到了高度之后，要将OnGlobalLayoutListener注销掉。</p></blockquote></blockquote><h3 id="View-post事件中获取"><a href="#View-post事件中获取" class="headerlink" title="View post事件中获取"></a>View post事件中获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHeight</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123; </span><br><span class="line"> TextView tv; </span><br><span class="line">  </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123; </span><br><span class="line">  <span class="built_in">super</span>.onCreate(savedInstanceState); </span><br><span class="line">  setContentView(R.layout.activity_activity_b); </span><br><span class="line">   tv = (TextView) findViewById(R.id.textView); </span><br><span class="line">  tv.post(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="type">int</span> height= tv.getHeight(); </span><br><span class="line">   &#125; </span><br><span class="line">  &#125;); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="直接测量计算"><a href="#直接测量计算" class="headerlink" title="直接测量计算"></a>直接测量计算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> intw=View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>,View.MeasureSpec.UNSPECIFIED); </span><br><span class="line"><span class="type">int</span> inth=View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>,View.MeasureSpec.UNSPECIFIED); </span><br><span class="line">textView.measure(intw, inth); </span><br><span class="line"><span class="type">int</span> <span class="variable">intwidth</span> <span class="operator">=</span> textView.getMeasuredWidth(); </span><br><span class="line"><span class="type">int</span> <span class="variable">intheight</span> <span class="operator">=</span> textView.getMeasuredHeight();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中TextView属性ellipsize=marquee不生效的解决办法</title>
      <link href="/article/Android-TextView%E5%B1%9E%E6%80%A7android-ellipsize-marquee%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/article/Android-TextView%E5%B1%9E%E6%80%A7android-ellipsize-marquee%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android TextView实现文字跑马灯效果有两种办法：</p><p>1、 TextView的Text值赋值后不更改，很多帖子上说如下写法就可以生效：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/music_name_tv&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:ellipsize</span>=<span class="string">&quot;marquee&quot;</span>   【<span class="attr">必须</span>】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:focusable</span>=<span class="string">&quot;true&quot;</span>      【<span class="attr">必须</span>】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:focusableInTouchMode</span>=<span class="string">&quot;true&quot;</span> 【<span class="attr">必须</span>】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:lines</span>=<span class="string">&quot;1&quot;</span>              【<span class="attr">必须</span>】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心xxxx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAccent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2、 TextView的文字动态赋值，这个时候直接写在布局Xml里面已经不生效了，需要先给TextView赋值，然后再在代码里面重新把属性设置一遍(亲试可行)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTextMarquee</span><span class="params">(TextView textView)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (textView != <span class="literal">null</span>) &#123;</span><br><span class="line">          textView.setEllipsize(TextUtils.TruncateAt.MARQUEE);</span><br><span class="line">          textView.setSingleLine(<span class="literal">true</span>);</span><br><span class="line">          textView.setSelected(<span class="literal">true</span>);</span><br><span class="line">          textView.setFocusable(<span class="literal">true</span>);</span><br><span class="line">          textView.setFocusableInTouchMode(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>建议第二种。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> marquee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Android程序使用KSoap2调用Webservice运行不成功的问题</title>
      <link href="/article/%E5%85%B3%E4%BA%8EAndroid%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8KSoap2%E8%B0%83%E7%94%A8Webservice%E8%BF%90%E8%A1%8C%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/article/%E5%85%B3%E4%BA%8EAndroid%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8KSoap2%E8%B0%83%E7%94%A8Webservice%E8%BF%90%E8%A1%8C%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>公司的一个旧项目，用到了KSoap2访问Webservice，再编译运行时报<code>android.os.NetworkOnMainThreadException</code>异常。</p><span id="more"></span><p>原代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.ksoap2.SoapEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.PropertyInfo;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapObject;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapSerializationEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.transport.HttpTransportSE;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service_conn</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAMESPACE</span> <span class="operator">=</span> <span class="string">&quot;WebService&quot;</span>;</span><br><span class="line">    SoapObject soap_request;</span><br><span class="line">    HttpTransportSE ht;</span><br><span class="line">    SoapSerializationEnvelope envelope;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SoapObject</span> <span class="variable">soap_result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向服务器发送请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method_name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XmlPullParserException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SoapObject <span class="title function_">SEND_MESSAGE</span><span class="params">(<span class="keyword">final</span> String method_name, List&lt;NameValue&gt; param)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        soap_request = <span class="keyword">new</span> <span class="title class_">SoapObject</span>(NAMESPACE, method_name);</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; param.size(); i++) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;参数：&quot;</span> + param.get(i).getName() + <span class="string">&quot;=&quot;</span> + param.get(i).getValue());</span><br><span class="line">                soap_request.addProperty(param.get(i).getName(), param.get(i).getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        envelope = <span class="keyword">new</span> <span class="title class_">SoapSerializationEnvelope</span>(SoapEnvelope.VER11);</span><br><span class="line"><span class="comment">//envelope.bodyOut = soap_request;//此句导致参数发送不到服务器</span></span><br><span class="line">        envelope.dotNet = <span class="literal">true</span>;<span class="comment">//webservice不指定rpc方式则用true否则要用false(也会导致参数发送不到服务器)</span></span><br><span class="line">        envelope.setOutputSoapObject(soap_request);</span><br><span class="line">        ht = <span class="keyword">new</span> <span class="title class_">HttpTransportSE</span>(SocketService.URL);</span><br><span class="line">        ht.debug = <span class="literal">true</span>;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;URL:&quot;</span> + SocketService.URL + <span class="string">&quot;   NAMESPACE:&quot;</span> + NAMESPACE + <span class="string">&quot;    method_name:&quot;</span> + method_name);</span><br><span class="line"></span><br><span class="line">        ht.call(NAMESPACE+<span class="string">&quot;/&quot;</span>+method_name, envelope);<span class="comment">// &lt;-- 问题出在这里</span></span><br><span class="line">        soap_result = (SoapObject) envelope.bodyIn;</span><br><span class="line">        <span class="keyword">return</span> soap_result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从Honeycomb SDK（3.0）开始，google不再允许网络请求（HTTP、Socket）等相关操作直接在Main Thread类中。既然不允许放在主线程那就另开线程执行，但这样结果要跑回主线程就要通过 interface 回调跑回主线程，进而所有调用该方法的方法都要加一 interface 参数，这样改动太大了。</p><p>在Java中一般通过继承Thread类或者实现Runnable接口这两种方式来创建多线程，但是这两种方式都有个缺陷，就是不能在执行完成后获取执行的结果，因此Java 1.5之后提供了Callable和Future接口，通过它们就可以在任务执行完毕之后得到任务的执行结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">FutureTask&lt;SoapObject&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;SoapObject&gt;(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;SoapObject&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> SoapObject <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 调用WebService</span></span><br><span class="line">                    ht.call(NAMESPACE + <span class="string">&quot;/&quot;</span> + method_name, envelope);</span><br><span class="line">                    <span class="keyword">if</span> (envelope.getResponse() != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 获取返回的数据</span></span><br><span class="line">                        <span class="type">SoapObject</span> <span class="variable">object</span> <span class="operator">=</span> (SoapObject) envelope.bodyIn;</span><br><span class="line">                        <span class="comment">// 获取返回的结果</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> object.getProperty(<span class="number">0</span>)</span><br><span class="line">                                .toString();</span><br><span class="line">                        LogUtil.E(<span class="string">&quot;Service_conn&quot;</span>, result);</span><br><span class="line">                        <span class="keyword">return</span> object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    soap_result = futureTask.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样不需要在回调中获取结果。</p><p>最终代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.ksoap2.SoapEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.PropertyInfo;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapObject;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapSerializationEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.transport.HttpTransportSE;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service_conn</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAMESPACE</span> <span class="operator">=</span> <span class="string">&quot;WebService&quot;</span>;</span><br><span class="line">    SoapObject soap_request;</span><br><span class="line">    HttpTransportSE ht;</span><br><span class="line">    SoapSerializationEnvelope envelope;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SoapObject</span> <span class="variable">soap_result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向服务器发送请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method_name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XmlPullParserException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SoapObject <span class="title function_">SEND_MESSAGE</span><span class="params">(<span class="keyword">final</span> String method_name, List&lt;NameValue&gt; param)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        soap_request = <span class="keyword">new</span> <span class="title class_">SoapObject</span>(NAMESPACE, method_name);</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; param.size(); i++) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;参数：&quot;</span> + param.get(i).getName() + <span class="string">&quot;=&quot;</span> + param.get(i).getValue());</span><br><span class="line">                soap_request.addProperty(param.get(i).getName(), param.get(i).getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        envelope = <span class="keyword">new</span> <span class="title class_">SoapSerializationEnvelope</span>(SoapEnvelope.VER11);</span><br><span class="line"><span class="comment">//envelope.bodyOut = soap_request;//此句导致参数发送不到服务器</span></span><br><span class="line">        envelope.dotNet = <span class="literal">true</span>;<span class="comment">//webservice不指定rpc方式则用true否则要用false(也会导致参数发送不到服务器)</span></span><br><span class="line">        envelope.setOutputSoapObject(soap_request);</span><br><span class="line">        ht = <span class="keyword">new</span> <span class="title class_">HttpTransportSE</span>(SocketService.URL);</span><br><span class="line">        ht.debug = <span class="literal">true</span>;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;URL:&quot;</span> + SocketService.URL + <span class="string">&quot;   NAMESPACE:&quot;</span> + NAMESPACE + <span class="string">&quot;    method_name:&quot;</span> + method_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ht.call(NAMESPACE+&quot;/&quot;+method_name, envelope);// &lt;-- 问题出在这里</span></span><br><span class="line"><span class="comment">//        soap_result = (SoapObject) envelope.bodyIn;</span></span><br><span class="line">        FutureTask&lt;SoapObject&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;SoapObject&gt;(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;SoapObject&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> SoapObject <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 调用WebService</span></span><br><span class="line">                            ht.call(NAMESPACE + <span class="string">&quot;/&quot;</span> + method_name, envelope);</span><br><span class="line">                            <span class="keyword">if</span> (envelope.getResponse() != <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// 获取返回的数据</span></span><br><span class="line">                                <span class="type">SoapObject</span> <span class="variable">object</span> <span class="operator">=</span> (SoapObject) envelope.bodyIn;</span><br><span class="line">                                <span class="comment">// 获取返回的结果</span></span><br><span class="line">                                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> object.getProperty(<span class="number">0</span>)</span><br><span class="line">                                        .toString();</span><br><span class="line">                                LogUtil.E(<span class="string">&quot;Service_conn&quot;</span>, result);</span><br><span class="line">                                <span class="keyword">return</span> object;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            soap_result = futureTask.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> soap_result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> KSoap2 </tag>
            
            <tag> Webservice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 添加 Gitment 评论</title>
      <link href="/article/Hexo-%E6%B7%BB%E5%8A%A0-Gitment-%E8%AF%84%E8%AE%BA/"/>
      <url>/article/Hexo-%E6%B7%BB%E5%8A%A0-Gitment-%E8%AF%84%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于之前使用的多说停用了，不得不另找其他评论插件就看到了 <a href="https://github.com/imsun/gitment">Gitment</a>/<a href="https://github.com/gitalk/gitalk">Gitalk</a>。</p><p>话不多说，直接开整。</p><p>先以Gitment为例，Gitalk的设置很类似。</p><span id="more"></span><h2 id="1-注册Gitment-OAuth-Application"><a href="#1-注册Gitment-OAuth-Application" class="headerlink" title="1 注册Gitment OAuth Application"></a>1 注册Gitment OAuth Application</h2><p><a href="https://imsun.net/posts/gitment-introduction/">官方介绍</a></p><p><a href="https://github.com/settings/applications/new">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，比如我的就是 <code>https://sogrey.github.io/</code>）。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/%E6%B3%A8%E5%86%8CGitment%20OAuth%20Application.png" alt="注册Gitment OAuth Application"></p><p>你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/Gitment%20ClientId.png" alt="Gitment ClientId"></p><p>后面如果想查找之前注册的Gitment ClientId，在GitHub点击<code>Settings</code>&gt;<code>Developer settings</code> 即<a href="https://github.com/settings/developers">developers</a></p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/%E6%9F%A5%E6%89%BEGitment%20ClientId.png" alt="查找Gitment ClientId"></p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/%E6%9F%A5%E6%89%BEGitment%20ClientId2.png" alt="查找Gitment ClientId"></p><h2 id="2-安装Gitment插件"><a href="#2-安装Gitment插件" class="headerlink" title="2 安装Gitment插件"></a>2 安装Gitment插件</h2><p>如果你希望引用确定版本的 Gitment，则应该使用 npm 进行安装。</p><pre><code>$ npm install --save gitment</code></pre><p>关于构造函数中的更多可用参数请查看 <a href="https://github.com/imsun/gitment#options">Gitment Options</a></p><h2 id="3-引入-Gitment-到-hexo-文章页面"><a href="#3-引入-Gitment-到-hexo-文章页面" class="headerlink" title="3 引入 Gitment 到 hexo 文章页面"></a>3 引入 Gitment 到 hexo 文章页面</h2><p>我的主题是 <code>yelog</code> 是基于 <code>yelee</code> 的，其他主题也可参考。</p><p>将下面代码添加到文章页面,我贴在 <code>themes\yelog\layout\_partial\article.ejs</code> 的末尾：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--gitment 评论--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--汉化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://billts.site/extra_css/gitment.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://billts.site/js/gitment.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--原型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitmentContainer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: -19px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.gitment-container</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.comments</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">60px</span> <span class="number">0</span> <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> gitment = <span class="keyword">new</span> <span class="title class_">Gitment</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">id</span>: <span class="string">&#x27;&lt;%= page.title %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">title</span>: <span class="string">&#x27;&lt;%= page.title %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">owner</span>: <span class="string">&#x27;Sogrey&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">repo</span>: <span class="string">&#x27;Sogrey.github.io&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">oauth</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">client_id</span>: <span class="string">&#x27;5826******a208c&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">client_secret</span>: <span class="string">&#x27;95db82**************************d7f6be1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        gitment.<span class="title function_">render</span>(<span class="string">&#x27;gitmentContainer&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--gitment 评论 end--&gt;</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>id: ‘&lt;%= page.title %&gt;’,//页面标题作为issue的label,长度不超过50，否则会出现 Error：validation failed 错误提示</li><li>owner 你的GitHub用户名即可</li><li>repo 保存评论的GitHub仓库名</li><li>client_id 你注册的Gitment Client ID [可在<a href="https://github.com/settings/developers">developers</a>找到你注册的Gitment查看]</li><li>client_secret 你注册的Gitment Client secret [可在<a href="https://github.com/settings/developers">developers</a>找到你注册的Gitment查看]</li><li>汉化来自<a href="https://github.com/imsun/gitment/issues/104">评论框汉化问题</a></li></ul><h2 id="4-主题配置"><a href="#4-主题配置" class="headerlink" title="4 主题配置"></a>4 主题配置</h2><p>在主题的 <code>_config.yml</code>文件添加（各参数解释如上）：</p><pre><code># Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment:  enable: true  githubID: Sogrey  repo: Sogrey.github.io  ClientID: 5826******a208c  ClientSecret: 95db82**************************d7f6be1  lazy: false</code></pre><p>其中：</p><ul><li>lazy: false true表示评论懒加载，即不直接显示评论，false则直接显示评论，懒加载可参考<a href="http://blog.csdn.net/yanzi1225627/article/details/77890414">hexo next主题集成gitment评论系统</a>配置 <code>gitmentbutton</code> 的显示文字。</li></ul><h2 id="5-部署网站"><a href="#5-部署网站" class="headerlink" title="5 部署网站"></a>5 部署网站</h2><p>依次执行：</p><pre><code>hexo ghexo d</code></pre><p>查看站点。</p><h2 id="6-初始化评论"><a href="#6-初始化评论" class="headerlink" title="6 初始化评论"></a>6 初始化评论</h2><p>页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第一步所填 repo 的 owner），点击初始化按钮。</p><p>只有你自己先初始化后在会在对应的GitHub 仓库的issue中创建一条对应的issue，之后其他用户即可在该页面发表评论。</p><h2 id="Gitment坑点小结-部分出自iHTCboy"><a href="#Gitment坑点小结-部分出自iHTCboy" class="headerlink" title="Gitment坑点小结 部分出自iHTCboy"></a>Gitment坑点小结 部分出自<a href="https://www.jianshu.com/p/57afa4844aaa">iHTCboy</a></h2><p><strong>1 <code>owner: &#39;Your GitHub ID&#39;</code></strong></p><pre><code>owner: &#39;你的 GitHub ID&#39;,可以是你的GitHub用户名，也可以是github id，建议直接用GitHub用户名就可以。</code></pre><p><strong>2 <code>repo: &#39;The repo to store comments</code></strong></p><pre><code>repo: &#39;存储评论的 github repo&#39;这个是你要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的。</code></pre><p><strong>3 <code>Error: Not Found问题</code></strong></p><pre><code>owner或者repo配置错误了，注意名字和仓库名字的大小写。</code></pre><p><strong>4 <code>Error: Comments Not Initialized</code></strong></p><pre><code>在注册OAuth Application这个步骤中，给Authorization callback URL指定的地址错了还没有在该页面的Gitment评论区登陆GitHub账号</code></pre><p>如果还是不行，可以参考另一个情况 <a href="https://link.jianshu.com/?t=https://github.com/imsun/gitment/issues/95">Error: Comments Not Initialized · Issue #95 · imsun/gitment</a></p><p><strong>5 <code>Error：validation failed</code></strong></p><pre><code>issue的标签label有长度限制！labels的最大长度限制是50个字符。id: &#39;页面 ID&#39;, // 可选。默认为 location.href这个id的作用，就是针对一个文章有唯一的标识来判断这篇本章。在issues里面，可以发现是根据网页标题来新建issues的，然后每个issues有两个labels（标签），一个是gitment，另一个就是id。所以明白了原理后，就是因为id太长，导致初始化失败，现在就是要让id保证在50个字符内。对应配置的id为：id: &#39;&lt;%= page.title %&gt;&#39;如果用网页标题也不能保证在50个字符！最后，我用文章的时间，这样长度是保证在50个字符内，完美解决！（避免了文章每次更新标题或路径时，会重新创建一个issue评论的问题。）id: &#39;&lt;%= page.date %&gt;&#39;</code></pre><p><strong>5-1 <code>Error：validation failed</code> 另一种</strong></p><p>刚新建了一篇文章，初始化评论时控制台报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load resource: the server responded with a status of 422 (Unprocessable Entity)</span><br></pre></td></tr></table></figure><p>因为我使用文章名作为label，查错过程就不细说了，并不是上面第五点的原因，这个原因太坑了，就是因为我新建文章标题中包含英文半角的<code>,</code>开始确定是因为label的问题，在排除50字符限制之后，实在无法，就直接新建label，提示无效，惊呆了我都，尝试更换标点符号为中文<code>，</code>这次成功新建label。然后修改文章名，重新提交成功初始化。特此记录。</p><p><strong>6 gitment的汉化</strong></p><p>只需到模板里将原来定义CSS和JS的那两行改成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://billts.site/extra_css/gitment.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://billts.site/js/gitment.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即可。来源：<a href="https://github.com/imsun/gitment/issues/104">https://github.com/imsun/gitment/issues/104</a></p><p><strong>7 Gitment出现在文章列表上</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/Gitment%E5%87%BA%E7%8E%B0%E5%9C%A8%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8%E4%B8%8A.png" alt="Gitment出现在文章列表上"></p><p>解决办法是为上面添加在文章页面上的那一大段代码 添加 下面代码将其包裹在内：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index) &#123; %&gt;</span><br><span class="line">   <span class="comment">&lt;!--原来的代码--&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>即变成下面的样子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--gitment 评论--&gt;</span></span><br><span class="line">&lt;% if (!index) &#123; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--汉化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://billts.site/extra_css/gitment.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://billts.site/js/gitment.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--原型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitmentContainer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: -19px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.gitment-container</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.comments</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">60px</span> <span class="number">0</span> <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> gitment = <span class="keyword">new</span> <span class="title class_">Gitment</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">id</span>: <span class="string">&#x27;&lt;%= page.title %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">title</span>: <span class="string">&#x27;&lt;%= page.title %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">owner</span>: <span class="string">&#x27;Sogrey&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">repo</span>: <span class="string">&#x27;Sogrey.github.io&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">oauth</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">client_id</span>: <span class="string">&#x27;5826******a208c&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">client_secret</span>: <span class="string">&#x27;95db82**************************d7f6be1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        gitment.<span class="title function_">render</span>(<span class="string">&#x27;gitmentContainer&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!--gitment 评论 end--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>8 Error: Bad credentials</strong></p><p>此类错误一般原因是填写授权<code>Client ID</code>或<code>Client Secret</code>时有误，请确认是否正确，我这里出现，之前是好的，因换了系统重新配置提交后就这样了。F12 查看到gitment.js 有两个 401.定位应该是授权问题。</p><p><a href="https://github.com/imsun/gitment/issues/145">Error: Bad credentials#145</a></p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/Error%20Bad%20credentials.jpg"></p><p>解决：</p><p>我在<a href="https://github.com/settings/profile">Settings</a>/<a href="https://github.com/settings/developers">Developer settings</a>的<code>OAuth Apps</code>中找到我们授权的应用，重新生产秘钥，重新配置就好了。<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/OAuth%20Apps.jpg"><br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/OAuth%20Apps2.jpg"><br>重新配置 theme 下的 _config.yml 文件<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/gitment_config.jpg"></p><p><strong>9 绑定了新域名后评论系统登录异常</strong></p><p>最近刚刚申请了一个<code>.top</code>域名，用来解析本站<a href="https://sogrey.github.io/"><code>sogrey.github.io</code></a> -&gt; <a href="https://sogrey.top/"><code>https://sogrey.top/</code></a>。由此也引来一些问题，不是什么大问题，就是我们的域名变了，而我们在GitHub的<a href="https://github.com/settings/developers"><code>Developers srttings</code></a> <code>OAuth Apps</code>里注册的还是<code>sogrey.github.io</code>。这就导致评论系统无法登陆，因为<code>Authorization callback URL</code>已经不匹配了。</p><p>解决方案：</p><p>将<code>Homepage URL</code>以及<code>Authorization callback URL</code>改为我们新域名地址（<a href="https://sogrey.top/"><code>https://sogrey.top/</code></a>）即可。</p><p>记得点击<code>Update application</code>按钮保存更新。</p><h2 id="7-由于gitment域名过期，无奈切换到gitalk"><a href="#7-由于gitment域名过期，无奈切换到gitalk" class="headerlink" title="7. 由于gitment域名过期，无奈切换到gitalk"></a>7. 由于gitment域名过期，无奈切换到gitalk</h2><p>上面我们设置gitment时，创建了一个<a href="https://github.com/Sogrey/Sogrey.github.io/blob/dev/themes/yelog/layout/_partial/gitment.ejs">gitment.ejs</a>,由于gitment服务器域名过期无法授权，现切换到<a href="https://github.com/Sogrey/Sogrey.github.io/blob/dev/themes/yelog/layout/_partial/gitalk.ejs">gitalk.ejs</a>。</p><p>幸好这两款插件配置很相近，设置gitalk也很顺利，本站源码查看<a href="https://github.com/Sogrey/Sogrey.github.io/blob/dev/themes/yelog/layout/_partial/gitalk.ejs">gitalk.ejs</a>。</p><p><strong>但有一点需要注意</strong>，先前gitment创建的issues的label是包含<code>gitment</code>的，而gitalk创建的却是<code>gitalk</code>,为了能重新使用之前旧的issues，可将issues的label中的<code>gitment</code>换成<code>gitalk</code>。所幸的是github的issues支持批量操作：</p><p><img src="https://cdn-1258560072.cos.ap-shanghai.myqcloud.com/imgs%2Fgitment2gitalk.png" alt="gitment2gitalk"></p>]]></content>
      
      
      <categories>
          
          <category> Gitment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitment </tag>
            
            <tag> Gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Webview 内容自适应高度</title>
      <link href="/article/Android-Webview-%E5%86%85%E5%AE%B9%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6/"/>
      <url>/article/Android-Webview-%E5%86%85%E5%AE%B9%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageFinished</span><span class="params">(WebView view, String url)</span> &#123;</span><br><span class="line">    webview.loadUrl(<span class="string">&quot;javascript:App.resize(document.getElementById(&#x27;chatsDataList&#x27;).scrollHeight)&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.onPageFinished(view, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">webview.addJavascriptInterface(<span class="built_in">this</span>, <span class="string">&quot;App&quot;</span>);</span><br><span class="line">webview.loadUrl(<span class="string">&quot;http://localhost:&quot;</span> + Constant.port + <span class="string">&quot;/pages/indexCharts.html&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JavascriptInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="keyword">final</span> <span class="type">float</span> height)</span> &#123;</span><br><span class="line">    getActivity().runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            TT.showToast(mContext, height + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//此处的 layoutParmas 需要根据父控件类型进行区分，这里为了简单就不这么做了</span></span><br><span class="line">            webview.setLayoutParams(<span class="keyword">new</span> <span class="title class_">LinearLayout</span>.LayoutParams(getResources().getDisplayMetrics().widthPixels, (<span class="type">int</span>) (height * getResources().getDisplayMetrics().density)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>chatsDataList</code>要修改成自己的元素</li><li>要运行在UI线程</li><li>要设置LayoutParams <blockquote><p>webView.getLayoutParams().height =height;是没有用的</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Webview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现定时任务的三种方法(收集)</title>
      <link href="/article/java%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/article/java%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>普通thread </li></ul><p>这是最常见的，创建一个thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskRunnable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// run in a second  </span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">timeInterval</span> <span class="operator">=</span> <span class="number">1000</span>;  </span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;  </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;  </span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">                    <span class="comment">// ------- code for task to run  </span></span><br><span class="line">                    System.out.println(<span class="string">&quot;Hello !!&quot;</span>);  </span><br><span class="line">                    <span class="comment">// ------- ends here  </span></span><br><span class="line">                    <span class="keyword">try</span> &#123;  </span><br><span class="line">                        Thread.sleep(timeInterval);  </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                        e.printStackTrace();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);  </span><br><span class="line">        thread.start();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>TimerTask </li></ul><p> 于第一种方式相比，优势 1&gt;当启动和去取消任务时可以控制 2&gt;第一次执行任务时可以指定你想要的delay时间  在实现时，Timer类可以调度任务，imerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。</p><p> 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskTimerTask</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TimerTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;  </span><br><span class="line">                <span class="comment">// task to run goes here  </span></span><br><span class="line">                System.out.println(<span class="string">&quot;Hello !!!&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();  </span><br><span class="line">        <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="type">long</span> <span class="variable">intevalPeriod</span> <span class="operator">=</span> <span class="number">1</span> * <span class="number">1000</span>;  </span><br><span class="line">        <span class="comment">// schedules the task to be run in an interval  </span></span><br><span class="line">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ScheduledExecutorService</li></ul><p>ScheduledExecutorService是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p><p>相比于上两个方法，它有以下好处：</p><ul><li>1&gt;相比于Timer的单线程，它是通过线程池的方式来执行任务的  </li><li>2&gt;可以很灵活的去设定第一次执行任务delay时间 </li><li>3&gt;提供了良好的约定，以便设定执行的时间间隔 </li></ul><p>下面是实现代码，我们通过ScheduledExecutorService#scheduleAtFixedRate展示这个例子，通过代码里参数的控制，首次执行加了delay时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskScheduledExecutorService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;  </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;  </span><br><span class="line">                <span class="comment">// task to run goes here  </span></span><br><span class="line">                System.out.println(<span class="string">&quot;Hello !!&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors  </span><br><span class="line">                .newSingleThreadScheduledExecutor();  </span><br><span class="line">        <span class="comment">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></span><br><span class="line">        service.scheduleAtFixedRate(runnable, <span class="number">10</span>, <span class="number">1</span>, TimeUnit.SECONDS);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自：<a href="http://blog.csdn.net/haorengoodman/article/details/23281343/">java实现定时任务的三种方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java读取文件夹大小的6种方法（收集）</title>
      <link href="/article/Java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F%E7%9A%846%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/"/>
      <url>/article/Java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F%E7%9A%846%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>说明：File.length()仅仅用于获得某个文件的大小，单位为bytes</p><p>以下提供六种方法遍历文件夹下子文件求其大小总和。</p></blockquote><span id="more"></span><h3 id="单线程递归方式"><a href="#单线程递归方式" class="headerlink" title="单线程递归方式"></a>单线程递归方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TotalFileSize</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\1_11&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归方式 计算文件的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> File file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile())</span><br><span class="line">            <span class="keyword">return</span> file.length();</span><br><span class="line">        <span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (children != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> File child : children)</span><br><span class="line">                total += getTotalSizeOfFilesInDir(child);</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TotalFileSize</span>()</span><br><span class="line">                .getTotalSizeOfFilesInDir(<span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;Total Size: &quot;</span> + total);</span><br><span class="line">        System.out.println(<span class="string">&quot;Time taken: &quot;</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.02347729</code></pre><h3 id="使用Executors-newFixedThreadPool和callable-多线程实现"><a href="#使用Executors-newFixedThreadPool和callable-多线程实现" class="headerlink" title="使用Executors.newFixedThreadPool和callable 多线程实现"></a>使用Executors.newFixedThreadPool和callable 多线程实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentTotalFileSize</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\1_11&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubDirectoriesAndSize</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="type">long</span> size;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> List&lt;File&gt; subDirectories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SubDirectoriesAndSize</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> totalSize,</span></span><br><span class="line"><span class="params"><span class="keyword">final</span> List&lt;File&gt; theSubDirs)</span> &#123;</span><br><span class="line">size = totalSize;</span><br><span class="line">subDirectories = Collections.unmodifiableList(theSubDirs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SubDirectoriesAndSize <span class="title function_">getTotalAndSubDirs</span><span class="params">(<span class="keyword">final</span> File file)</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> List&lt;File&gt; subDirectories = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;File&gt;();</span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile())</span><br><span class="line">total += child.length();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">subDirectories.add(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SubDirectoriesAndSize</span>(total, subDirectories);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> File file)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> List&lt;File&gt; directories = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;File&gt;();</span><br><span class="line">directories.add(file);</span><br><span class="line"><span class="keyword">while</span> (!directories.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">final</span> List&lt;Future&lt;SubDirectoriesAndSize&gt;&gt; partialResults = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Future&lt;SubDirectoriesAndSize&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File directory : directories) &#123;</span><br><span class="line">partialResults.add(service</span><br><span class="line">.submit(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;SubDirectoriesAndSize&gt;() &#123;</span><br><span class="line"><span class="keyword">public</span> SubDirectoriesAndSize <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getTotalAndSubDirs(directory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br><span class="line">directories.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> Future&lt;SubDirectoriesAndSize&gt; partialResultFuture : partialResults) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">SubDirectoriesAndSize</span> <span class="variable">subDirectoriesAndSize</span> <span class="operator">=</span> partialResultFuture</span><br><span class="line">.get(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line">directories.addAll(subDirectoriesAndSize.subDirectories);</span><br><span class="line">total += subDirectoriesAndSize.size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException,</span><br><span class="line">ExecutionException, TimeoutException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentTotalFileSize</span>()</span><br><span class="line">.getTotalSizeOfFilesInDir(<span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;Total Size: &quot;</span> + total);</span><br><span class="line">System.out.println(<span class="string">&quot;Time taken: &quot;</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.102727254</code></pre><h3 id="使用Executors-newFixedThreadPool和callable-多线程的另外一种实现"><a href="#使用Executors-newFixedThreadPool和callable-多线程的另外一种实现" class="headerlink" title="使用Executors.newFixedThreadPool和callable 多线程的另外一种实现"></a>使用Executors.newFixedThreadPool和callable 多线程的另外一种实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NaivelyConcurrentTotalFileSize</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\1_11&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> ExecutorService service,</span></span><br><span class="line"><span class="params"><span class="keyword">final</span> File file)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException,</span><br><span class="line">TimeoutException &#123;</span><br><span class="line"><span class="keyword">if</span> (file.isFile())</span><br><span class="line"><span class="keyword">return</span> file.length();</span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> List&lt;Future&lt;Long&gt;&gt; partialTotalFutures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Future&lt;Long&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line">partialTotalFutures.add(service.submit(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Long&gt;() &#123;</span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException,</span><br><span class="line">ExecutionException, TimeoutException &#123;</span><br><span class="line"><span class="keyword">return</span> getTotalSizeOfFilesInDir(service, child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> Future&lt;Long&gt; partialTotalFuture : partialTotalFutures)</span><br><span class="line">total += partialTotalFuture.get(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getTotalSizeOfFile</span><span class="params">(<span class="keyword">final</span> String fileName)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getTotalSizeOfFilesInDir(service, <span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException,</span><br><span class="line">ExecutionException, TimeoutException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NaivelyConcurrentTotalFileSize</span>()</span><br><span class="line">.getTotalSizeOfFile(fileName);</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;Total Size: &quot;</span> + total);</span><br><span class="line">System.out.println(<span class="string">&quot;Time taken: &quot;</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.058243242</code></pre><h3 id="使用CountDownLatch和AtomicLong实现多线程下的并发控制"><a href="#使用CountDownLatch和AtomicLong实现多线程下的并发控制" class="headerlink" title="使用CountDownLatch和AtomicLong实现多线程下的并发控制"></a>使用CountDownLatch和AtomicLong实现多线程下的并发控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentTotalFileSizeWLatch</span> &#123;</span><br><span class="line"><span class="keyword">private</span> ExecutorService service;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">pendingFileVisits</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">totalSize</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\1_11&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> File file)</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile())</span><br><span class="line">fileSize = file.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile())</span><br><span class="line">fileSize += child.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pendingFileVisits.incrementAndGet();</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">updateTotalSizeOfFilesInDir(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">totalSize.addAndGet(fileSize);</span><br><span class="line"><span class="keyword">if</span> (pendingFileVisits.decrementAndGet() == <span class="number">0</span>)</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getTotalSizeOfFile</span><span class="params">(<span class="keyword">final</span> String fileName)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line">pendingFileVisits.incrementAndGet();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">updateTotalSizeOfFilesInDir(<span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line">latch.await(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">return</span> totalSize.longValue();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentTotalFileSizeWLatch</span>()</span><br><span class="line">.getTotalSizeOfFile(fileName);</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;Total Size: &quot;</span> + total);</span><br><span class="line">System.out.println(<span class="string">&quot;Time taken: &quot;</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.026633095</code></pre><h3 id="使用BlockingQueue和AtomicLong的实现"><a href="#使用BlockingQueue和AtomicLong的实现" class="headerlink" title="使用BlockingQueue和AtomicLong的实现"></a>使用BlockingQueue和AtomicLong的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentTotalFileSizeWQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\1_11&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ExecutorService service;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> BlockingQueue&lt;Long&gt; fileSizes = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Long&gt;(</span><br><span class="line"><span class="number">500</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">pendingFileVisits</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startExploreDir</span><span class="params">(<span class="keyword">final</span> File file)</span> &#123;</span><br><span class="line">pendingFileVisits.incrementAndGet();</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">exploreDir(file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exploreDir</span><span class="params">(<span class="keyword">final</span> File file)</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile())</span><br><span class="line">fileSize = file.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile())</span><br><span class="line">fileSize += child.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">startExploreDir(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileSizes.put(fileSize);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">&#125;</span><br><span class="line">pendingFileVisits.decrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getTotalSizeOfFile</span><span class="params">(<span class="keyword">final</span> String fileName)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">startExploreDir(<span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line"><span class="type">long</span> <span class="variable">totalSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pendingFileVisits.get() &gt; <span class="number">0</span> || fileSizes.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> fileSizes.poll(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">totalSize += size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalSize;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentTotalFileSizeWQueue</span>()</span><br><span class="line">.getTotalSizeOfFile(fileName);</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;Total Size: &quot;</span> + total);</span><br><span class="line">System.out.println(<span class="string">&quot;Time taken: &quot;</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.044469408</code></pre><h3 id="使用jdk7的ForkJoin来实现"><a href="#使用jdk7的ForkJoin来实现" class="headerlink" title="使用jdk7的ForkJoin来实现"></a>使用jdk7的ForkJoin来实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinTask;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileSize</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\1_11&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FileSizeFinder</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Long&gt; &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">final</span> File file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FileSizeFinder</span><span class="params">(<span class="keyword">final</span> File theFile)</span> &#123;</span><br><span class="line">file = theFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">size = file.length();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="literal">null</span>) &#123;</span><br><span class="line">List&lt;ForkJoinTask&lt;Long&gt;&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ForkJoinTask&lt;Long&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile()) &#123;</span><br><span class="line">size += child.length();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tasks.add(<span class="keyword">new</span> <span class="title class_">FileSizeFinder</span>(child));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ForkJoinTask&lt;Long&gt; task : invokeAll(tasks)) &#123;</span><br><span class="line">size += task.join();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> forkJoinPool.invoke(<span class="keyword">new</span> <span class="title class_">FileSizeFinder</span>(<span class="keyword">new</span> <span class="title class_">File</span>(fileName)));</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;Total Size: &quot;</span> + total);</span><br><span class="line">System.out.println(<span class="string">&quot;Time taken: &quot;</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.015022339</code></pre><p>来自<a href="http://blog.csdn.net/u011277123/article/details/52980247">http://blog.csdn.net/u011277123/article/details/52980247</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json转树状结构（收集）</title>
      <link href="/article/json%E8%BD%AC%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/"/>
      <url>/article/json%E8%BD%AC%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>后话： 现有新的实现方案，基于java8 Stream ，不妨看下？</p><p><a href="https://sogrey.top/article/%E4%BD%BF%E7%94%A8java8%E4%B8%ADStream%E8%BD%BB%E6%9D%BE%E9%81%8D%E5%8E%86%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/">使用java8中Stream轻松遍历树形结构</a></p></blockquote><p>一切都源于项目需求。近期web项目中需要这样的功能：将json数据转为树级结构，json的数据结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pId&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;水电站项目&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;项目一标段&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;项目二标段&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>于是开始百度，找到如下解决方案：</p><ul><li>方案一</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="comment">// 删除 所有 children,以防止多次调用</span></span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> item.<span class="property">children</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将数据存储为 以 id 为 KEY 的 map 索引数据列</span></span><br><span class="line">  <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    map[item.<span class="property">id</span>] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> val = [];</span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// 以当前遍历项，的pid,去map对象中找到索引的id</span></span><br><span class="line">    <span class="keyword">var</span> parent = map[item.<span class="property">pId</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中</span></span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent.<span class="property">children</span> || (parent.<span class="property">children</span> = [])).<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级</span></span><br><span class="line">      val.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个方案却也适合，只是他只能适用于 <code>id-pId</code> 这种，要适配 其他 像 <code>dataId-parentId</code> 这种就需要将上面代码中的 <code>id</code>改为<code>dataId</code>，<code>pId</code>改为<code>parentId</code>。</p><p>之后又发现了另一种方案。</p><ul><li>方案二</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * json格式转树状结构 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   &#123;<span class="type">json</span>&#125;      json数据 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   &#123;<span class="type">String</span>&#125;    id的字符串 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   &#123;<span class="type">String</span>&#125;    父id的字符串 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   &#123;<span class="type">String</span>&#125;    children的字符串 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="type">Array</span>&#125;     数组 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transData</span>(<span class="params">a, idStr, pidStr, chindrenStr</span>)&#123;  </span><br><span class="line">    <span class="keyword">var</span> r = [], hash = &#123;&#125;, id = idStr, pid = pidStr, children = chindrenStr, i = <span class="number">0</span>, j = <span class="number">0</span>, len = a.<span class="property">length</span>;  </span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++)&#123;  </span><br><span class="line">        hash[a[i][id]] = a[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(; j &lt; len; j++)&#123;  </span><br><span class="line">        <span class="keyword">var</span> aVal = a[j], hashVP = hash[aVal[pid]];  </span><br><span class="line">        <span class="keyword">if</span>(hashVP)&#123;  </span><br><span class="line">            !hashVP[children] &amp;&amp; (hashVP[children] = []);  </span><br><span class="line">            hashVP[children].<span class="title function_">push</span>(aVal);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            r.<span class="title function_">push</span>(aVal);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> r;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来自：<a href="http://rockyuse.iteye.com/blog/1541308">json转树状结构（js）</a></p><p>这样使用：<code>var jsonDataTree = transData(jsonData, &#39;id&#39;, &#39;pid&#39;, &#39;chindren&#39;);  </code>,其中 参数一是json数据对象，后三个参数分别指明了 <code>id</code>、 <code>pId</code> 以及其子集 <code>chindren</code>，很好解决了方案一的不足.</p><p>借于方案二的启发，何不将方案一改造改造，于是就有了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * json格式转树状结构 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   &#123;<span class="type">json</span>&#125;      json数据 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   &#123;<span class="type">String</span>&#125;    id的字符串 默认值&quot;id&quot;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   &#123;<span class="type">String</span>&#125;    父id的字符串 默认值&quot;pId&quot;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   &#123;<span class="type">String</span>&#125;    children的字符串 默认值&quot;children&quot;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="type">Array</span>&#125;     数组 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree</span>(<span class="params">data,idStr=<span class="string">&quot;id&quot;</span>,pIdStr=<span class="string">&quot;pId&quot;</span>,chindrenStr=<span class="string">&quot;children&quot;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 删除 所有 children,以防止多次调用</span></span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> item[chindrenStr];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将数据存储为 以 id 为 KEY 的 map 索引数据列</span></span><br><span class="line">  <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    map[item[idStr]] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> val = [];</span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// 以当前遍历项，的pid,去map对象中找到索引的id</span></span><br><span class="line">    <span class="keyword">var</span> parent = map[item[pIdStr]];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中</span></span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent[chindrenStr] || (parent[chindrenStr] = [])).<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级</span></span><br><span class="line">      val.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中后三个参数设置默认值分别是 <code>id-pId-children</code>，像开题的那段json刚好满足就省略后三个参数可以这样调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">eval</span>(<span class="string">&#x27;[&#123;&quot;id&quot;:&quot;1&quot;,&quot;pId&quot;:&quot;0&quot;,&quot;value&quot;:&quot;水电站项目&quot;&#125;,&#123;&quot;id&quot;:&quot;2&quot;,&quot;pId&quot;:&quot;1&quot;,&quot;value&quot;:&quot;项目一标段&quot;&#125;,&#123;&quot;id&quot;:&quot;3&quot;,&quot;pId&quot;:&quot;1&quot;,&quot;value&quot;:&quot;项目二标段&quot;&#125;]&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> jsonDataTree = <span class="title function_">toTree</span>(jsonData); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonDataTree); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>, </span><br><span class="line">        <span class="string">&quot;pId&quot;</span>: <span class="string">&quot;0&quot;</span>, </span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;水电站项目&quot;</span>, </span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>, </span><br><span class="line">                <span class="string">&quot;pId&quot;</span>: <span class="string">&quot;1&quot;</span>, </span><br><span class="line">                <span class="string">&quot;value&quot;</span>: <span class="string">&quot;项目一标段&quot;</span></span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3&quot;</span>, </span><br><span class="line">                <span class="string">&quot;pId&quot;</span>: <span class="string">&quot;1&quot;</span>, </span><br><span class="line">                <span class="string">&quot;value&quot;</span>: <span class="string">&quot;项目二标段&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cnblogs.com/azhqiang/p/4169534.html">java、js中实现无限层级的树形结构（类似递归）</a></li><li><a href="http://rockyuse.iteye.com/blog/1541308">json转树状结构（js）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一行  JavaScript 代码（收集）</title>
      <link href="/article/%E4%B8%80%E8%A1%8C%20%20JavaScript%20%E4%BB%A3%E7%A0%81%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/"/>
      <url>/article/%E4%B8%80%E8%A1%8C%20%20JavaScript%20%E4%BB%A3%E7%A0%81%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>资料来源于网络</p><blockquote><p>var rate =1;”★★★★★☆☆☆☆☆”.slice(5 - rate, 10 - rate);</p></blockquote><p>  “★☆☆☆☆”</p><span id="more"></span><blockquote><p>(!(<del>+[])+{})[–[</del>+””][+[]]<em>[<del>+[]] + ~~!+[]]+({}+[])[[</del>!+[]]</em>~+[]]</p></blockquote><p> (!(<del>+[])+{})[–[</del>+””][+[]]<em>[<del>+[]] + ~~!+[]]+({}+[])[[</del>!+[]]</em>~+[]]</p><blockquote><p>([][[]]+[])[+!![]]+([]+{})[!+[]+!![]]</p></blockquote><p> nb</p><blockquote><p>在stackoverflow查询有关<code>js</code>、<code>something</code>的信息<br>     try {<br>            something<br>    } catch (e) {<br>            window.location.href =<br>                “<a href="http://stackoverflow.com/search?q=%5Bjs%5D+&quot;">http://stackoverflow.com/search?q=[js]+&quot;</a> + e.message;<br>    }</p></blockquote><blockquote><p>将页面上所有元素用线框框起来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[].<span class="property">forEach</span>.<span class="title function_">call</span>($$(<span class="string">&quot;*&quot;</span>),<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">a.<span class="property">style</span>.<span class="property">outline</span>=<span class="string">&quot;1px solid #&quot;</span>+(~~(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(<span class="number">1</span>&lt;&lt;<span class="number">24</span>))).<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>翻译成正常语言就是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>), </span><br><span class="line"><span class="function"><span class="params">dom</span> =&gt;</span> dom.<span class="property">style</span>.<span class="property">outline</span> = <span class="string">`1px solid #<span class="subst">$&#123;<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * </span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">24</span>)).toString(<span class="number">16</span>)&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><blockquote><p>论如何优雅的取随机字符串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">substring</span>(<span class="number">2</span>) </span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substring</span>(<span class="number">2</span>) </span><br></pre></td></tr></table></figure><blockquote><p>(10)<a href="">“toString”</a> === “10”  </p></blockquote><p>true</p><blockquote><p>论如何优雅的取整</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = ~~<span class="number">2.33</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b= <span class="number">2.33</span> | <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c= <span class="number">2.33</span> &gt;&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p> 如何优雅的实现金钱格式化：1234567890 –&gt; 1,234,567,890</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">用正则魔法实现：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="string">&#x27;1234567890&#x27;</span></span><br><span class="line"><span class="keyword">var</span> format = test1.<span class="title function_">replace</span>(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(format) <span class="comment">// 1,234,567,890</span></span><br><span class="line">非正则的优雅实现：</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">formatCash</span>(<span class="params">str</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, next, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ((index % <span class="number">3</span>) ? next : (next + <span class="string">&#x27;,&#x27;</span>)) + prev</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">formatCash</span>(<span class="string">&#x27;1234567890&#x27;</span>)) <span class="comment">// 1,234,567,890</span></span><br></pre></td></tr></table></figure><blockquote><p>论如何最佳的让两个整数交换数值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">常规办法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">a += b;</span><br><span class="line">b = a - b;</span><br><span class="line">a -= b;</span><br><span class="line">缺点也很明显，整型数据溢出，对于<span class="number">32</span>位字符最大表示数字是<span class="number">2147483647</span>，如果是<span class="number">2147483645</span>和<span class="number">2147483646</span>交换就失败了。</span><br><span class="line">黑科技办法：</span><br><span class="line"></span><br><span class="line">a ^= b;</span><br><span class="line">b ^= a;</span><br><span class="line">a ^= b;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2147483647</span>,b = <span class="number">2147483646</span></span><br><span class="line">a ^= b;</span><br><span class="line">b ^= a;</span><br><span class="line">a ^= b;</span><br></pre></td></tr></table></figure><blockquote><p>实现标准JSON的深拷贝</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a))</span><br></pre></td></tr></table></figure><p>​    </p><blockquote><p>不用Number、parseInt和parseFloat和方法把”1”字符串转换成数字</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">哈哈，不准用强制类型转换，那么就想到了强大了隐式转换</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a =<span class="string">&#x27;1&#x27;</span> </span><br><span class="line">+a</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p> hello world!  &gt;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[+[]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[]))+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(![]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+[])+(+!![]+[]))</span><br></pre></td></tr></table></figure><blockquote><p> ++[[]][+[]]+[+[]] == 10 </p></blockquote><p> true</p><blockquote><p> 最短的代码实现数组去重</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="string">&quot;1&quot;</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>])]</span><br></pre></td></tr></table></figure><blockquote><p>用最短的代码实现一个长度为m(6)且值都n(8)的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>(<span class="number">6</span>).<span class="title function_">fill</span>(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><blockquote><p>短路表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">条件判断</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b &amp;&amp; <span class="number">1</span></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b || <span class="number">1</span></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line">a = b</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 取出一个数组中的最大值和最小值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , -<span class="number">215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, -<span class="number">85411</span>]; </span><br><span class="line"><span class="keyword">var</span> maxInNumbers = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, numbers); </span><br><span class="line"><span class="keyword">var</span> minInNumbers = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, numbers);</span><br></pre></td></tr></table></figure><blockquote><p> 将argruments对象转换成数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> argArray = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">或者<span class="title class_">ES6</span>：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> argArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br></pre></td></tr></table></figure><blockquote><p>javascript高逼格之Function构造函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">很多<span class="title class_">JavaScript</span>教程都告诉我们，不要直接用内置对象的构造函数来创建基本变量，例如<span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>); 的写法就应该用<span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];的写法来取代。</span><br><span class="line"></span><br><span class="line">但是，<span class="title class_">Function</span>构造函数（注意是大写的<span class="title class_">Function</span>）有点特别。<span class="title class_">Function</span>构造函数接受的参数中，第一个是要传入的参数名，第二个是函数内的代码（用字符串来表示）。</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;alert(a)&#x27;</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;jawil&#x27;</span>); <span class="comment">// 将会弹出窗口显示jawil</span></span><br></pre></td></tr></table></figure><blockquote><p>从一个数组中找到一个数，O(n)的算法，找不到就返回 null。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">正常的版本:</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">find</span> (x, y) &#123;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; x.<span class="property">length</span>; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( x[i] == y ) <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">find</span>(arr, <span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">find</span>(arr, <span class="number">8</span>))</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">结果到了函数式成了下面这个样子（好像上面的那些代码在下面若影若现，不过又有点不太一样，为了消掉<span class="keyword">if</span>语言，让其看上去更像一个表达式，动用了 ? 号表达式）：</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数式的版本</span></span><br><span class="line"><span class="keyword">const</span> find = ( <span class="function"><span class="params">f</span> =&gt;</span> <span class="title function_">f</span>(f) ) ( <span class="function"><span class="params">f</span> =&gt;</span></span><br><span class="line">  (<span class="function"><span class="params">next</span> =&gt;</span> <span class="function">(<span class="params">x, y, i = <span class="number">0</span></span>) =&gt;</span></span><br><span class="line">( i &gt;= x.<span class="property">length</span>) ?  <span class="literal">null</span> :</span><br><span class="line">  ( x[i] == y ) ? i :</span><br><span class="line"><span class="title function_">next</span>(x, y, i+<span class="number">1</span>))(<span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">  (<span class="title function_">f</span>(f))(...args)))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">find</span>(arr, <span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">find</span>(arr, <span class="number">8</span>))</span><br></pre></td></tr></table></figure><p>​    </p><blockquote><p>object 2 json</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123; <span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>:<span class="number">1</span>,<span class="attr">d</span>:<span class="number">2</span>&#125; &#125;;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(foo);</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>a<span class="string">&quot;:2,&quot;</span>b<span class="string">&quot;:&#123;&quot;</span>c<span class="string">&quot;:1,&quot;</span>d<span class="string">&quot;:2&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo建站过程中遇到的问题（填坑篇）</title>
      <link href="/article/Hexo%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%A1%AB%E5%9D%91%EF%BC%89/"/>
      <url>/article/Hexo%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%A1%AB%E5%9D%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在此收集Hexo建站过程中遇到的问题（填坑）</p></blockquote><p>1 执行 <code>hexo d</code> 报 <code>ERROR Deployer not found: git</code></p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/hexo_d_not_fount_git.png"></p><p>解决方法： 执行 <code>npm install hexo-deployer-git --save</code></p><p>2 local search 失效（换电脑后）</p><p>更换电脑后，源文件打包拷过来，却发现本地搜索失效：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%A4%B1%E6%95%88.png"></p><p>解决方法： 重新安装 search 插件 <a href="https://github.com/PaicHyperionDev/hexo-generator-search">github</a></p><p>执行 <code>npm install hexo-generator-search --save</code></p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/hexo-generator-search.png"></p><p>重新编译发布正常：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E6%AD%A3%E5%B8%B8.png"></p><p><em>会持续更新…</em></p>]]></content>
      
      
      <categories>
          
          <category> Hexo建站填坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo建站填坑 </tag>
            
            <tag> 手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android library 发布到 JCenter</title>
      <link href="/article/Android-library-%E5%8F%91%E5%B8%83%E5%88%B0-JCenter/"/>
      <url>/article/Android-library-%E5%8F%91%E5%B8%83%E5%88%B0-JCenter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从来都是从中央仓库下载jar,这次需要向中央仓库提交jar。网上也有很多文章都是以gradle-bintray-plugin这个插件做上传，本篇是参照<a href="http://blog.csdn.net/lmj623565791/article/details/51148825">鸿洋大神</a>的博文亲身采用bintray-release这个插件操作的。特此记录，贡献大家，为方便以后再次发布。</p></blockquote><blockquote><p>上传到  JitPack 可参考<a href="http://www.jianshu.com/p/1fecc80cbd59?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">这篇</a></p></blockquote><span id="more"></span><h2 id="注册bintray账号"><a href="#注册bintray账号" class="headerlink" title="注册bintray账号"></a>注册bintray账号</h2><p>JCenter是bintray旗下中央仓库，先在<a href="https://bintray.com/" title="bintray官网">bintray的官网</a>注册一个账号，为方便起见也可以使用github账号登录。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_011207.jpg" alt="bintray的官网注册登录"></p><p>用于开源分发可点击For Open Source Distribution <a href="https://bintray.com/signup/oss">Sign Up Here</a>注册/登录。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_012113.jpg" alt="bintray的官网注册登录"></p><p>注册/登录成功后进入个人中心：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_012509.jpg" alt="bintray个人中心"></p><p>到此注册bintray账号的准备工作就做完了，下面我们准备一个将要发布的库项目Android Studio项目。</p><p>另：顺便做点准备工作，在bintray个人中心获取API KEY（地址是：<a href="https://bintray.com/profile/edit" title="https://bintray.com/profile/edit">https://bintray.com/profile/edit</a>），也可以在个人中心点击<code>Edit</code>或鼠标移到右上角你的用户名出弹出菜单点击<code>Edit Profile</code>,跳到下面页面：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_015247_1.jpg" alt="Edit Profile"></p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_015849.jpg" alt="查看API Key"></p><p>点击① API KEY –&gt; ② 复制API KEY，以备后用。</p><h2 id="准备要发布的库"><a href="#准备要发布的库" class="headerlink" title="准备要发布的库"></a>准备要发布的库</h2><p>我准备的android项目是九宫手势图案的自定义View。先来看下项目整体结构：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_013513.jpg" alt="项目整体结构"></p><p>其中，lock9viewlib 这个库Module就是我们将要发布的开源库。下面就准备发布前的一系列设置吧。</p><h2 id="准备发布"><a href="#准备发布" class="headerlink" title="准备发布"></a>准备发布</h2><h3 id="1-引入bintray-release"><a href="#1-引入bintray-release" class="headerlink" title="1.引入bintray-release"></a>1.引入bintray-release</h3><p>在项目的build.gradle添加bintray-release的classpath，注意是项目根目录下的的build.gradle。</p><pre><code>buildscript &#123;    repositories &#123;        jcenter()    &#125;    dependencies &#123;        classpath &#39;com.android.tools.build:gradle:1.2.3&#39;        classpath &#39;com.novoda:bintray-release:0.3.4&#39; //添加    &#125;&#125;</code></pre><h3 id="2-设置moudle的build-gralde"><a href="#2-设置moudle的build-gralde" class="headerlink" title="2.设置moudle的build.gralde"></a>2.设置moudle的build.gralde</h3><p>在库Module的build.gradle里设置如下：</p><pre><code>apply plugin: &#39;com.android.library&#39;apply plugin: &#39;com.novoda.bintray-release&#39;//添加//添加publish &#123;    userOrg = &#39;sogrey&#39;//bintray.com用户名    groupId = &#39;org.sogrey&#39;//jcenter上的路径    artifactId = &#39;lock9view&#39;//项目名称    publishVersion = &#39;0.0.1&#39;//版本号    desc = &#39;This is a view for Android to lock screen.&#39;//描述    website = &#39;https://github.com/Sogrey/Lock9View&#39;//网站&#125;</code></pre><p>设置完毕最终引入的方式为：</p><blockquote><p>compile ‘{groupId}:{artifactId}:{publishVersion}’</p></blockquote><p>对于本例即就是如下：</p><p>compile ‘org.sogrey:lock9view:0.0.1’</p><p>完成上面的配置后，就准备上传了。</p><h3 id="3-在添加新的Maven库（已有请路过）"><a href="#3-在添加新的Maven库（已有请路过）" class="headerlink" title="3.在添加新的Maven库（已有请路过）"></a>3.在添加新的Maven库（已有请路过）</h3><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-09_111642.jpg" alt="添加新的Maven库"></p><p>点击 <code>Add New Repository</code> 添加，</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_022138.jpg" alt="Add New Repository"></p><p>添加成功，进入如下页面：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_022524.jpg" alt="添加仓库成功"></p><p>点击 <code>Add New Package</code>,添加一个新的包</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_022802.jpg" alt="添加一个新的包"></p><h3 id="4-上传"><a href="#4-上传" class="headerlink" title="4.上传"></a>4.上传</h3><p>上传很简单，执行下面命令：</p><p>Mac os:</p><pre><code>./gradlew clean build bintrayUpload -PbintrayUser=username -PbintrayKey=xxxxxxxxxxxxxxxxxxxxxx -PdryRun=false</code></pre><p>win OS:则没有前面的 <code>./</code> ：</p><pre><code>gradlew clean build bintrayUpload -PbintrayUser=username -PbintrayKey=xxxxxxxxxxxxxxxxxxxxxx -PdryRun=false</code></pre><p>其中<code>username</code>用你的bintray用户名替换，<code>xxxxxxxxxxxxxxxxxxxxxx</code>用之前拿到的 API KEY 来替换。<br>该命令可在Android studio自带的 <code>Terminal</code> 执行：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-09_113608_1.jpg" alt="Terminal执行命令"></p><p>第一次执行时会下载一堆 .pom 和 .jar,耐心等待。直到出现 <code>BUILD SUCCESSFUL</code> 就ok了。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-09_211916.jpg" alt="BUILD SUCCESSFUL"></p><h3 id="5-添加到JCenter"><a href="#5-添加到JCenter" class="headerlink" title="5.添加到JCenter"></a>5.添加到JCenter</h3><p>进入maven库中的我们新建的lock9view，点击 <code>Add to JCenter</code>,下面等待审核，通过后便可在我们的项目中引用了，Gradle 的引用方式：</p><p>compile ‘org.sogrey:lock9view:0.0.1’</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_023802.jpg" alt="Add to JCenter"></p><p>审核通过后，上图中的  <code>Add to JCenter</code> 的按钮就消失了。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_093202.jpg"></p><p>点击 <code>Jcenter</code> 可查看到以项目名称artifactId <code>lock9view</code> 过滤查到的项目，目前有两个，左边是咱们自己上传的。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_093356.jpg" alt="查看JCenter项目"></p><h3 id="6-在Android项目中compile"><a href="#6-在Android项目中compile" class="headerlink" title="6.在Android项目中compile"></a>6.在Android项目中compile</h3><p>在实例项目的build.gradle文件编辑：</p><pre><code>//  compile project(&#39;:lock9viewlib&#39;) //注释Module引用    compile &#39;org.sogrey:lock9view:0.0.1&#39; //添加compile引用JCenter中央仓库的库文件</code></pre><p>重新运行示例项目，成功。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_094240.jpg" alt="运行示例项目"></p><h2 id="更新已发布的库"><a href="#更新已发布的库" class="headerlink" title="更新已发布的库"></a>更新已发布的库</h2><h3 id="1-更新版本"><a href="#1-更新版本" class="headerlink" title="1. 更新版本"></a>1. 更新版本</h3><p>更新代码后记得更新版本号，修改 module 的 build.gradle 文件里 android -&gt; defaultConfig 下版本信息 :</p><pre><code>    versionCode 2    versionName &quot;0.0.2&quot;</code></pre><p>另外，publish下的版本号莫忘了修改：</p><pre><code>publish &#123;    userOrg = &#39;sogrey&#39;    groupId = &#39;org.sogrey&#39;    artifactId = &#39;lock9view&#39;    publishVersion = &#39;0.0.2&#39;//修改版本号    desc = &#39;Oh hi, this is a view for Android to lock screen.&#39;    website = &#39;https://github.com/Sogrey/Lock9View&#39;&#125;</code></pre><h3 id="2-提交更新"><a href="#2-提交更新" class="headerlink" title="2. 提交更新"></a>2. 提交更新</h3><p>提交更新跟之前提交JCenter一样，执行命令：</p><p>Mac os:</p><pre><code>./gradlew clean build bintrayUpload -PbintrayUser=username -PbintrayKey=xxxxxxxxxxxxxxxxxxxxxx -PdryRun=false</code></pre><p>win OS:则没有前面的 <code>./</code> ：</p><pre><code>gradlew clean build bintrayUpload -PbintrayUser=username -PbintrayKey=xxxxxxxxxxxxxxxxxxxxxx -PdryRun=false</code></pre><h2 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h2><h3 id="坑1-错误：编码GBK的不可映射字符"><a href="#坑1-错误：编码GBK的不可映射字符" class="headerlink" title="坑1. 错误：编码GBK的不可映射字符"></a>坑1. 错误：编码GBK的不可映射字符</h3><p>如下图:</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-09_125938.jpg" alt="错误：编码GBK的不可映射字符"></p><p>很明显是因为我们项目中有中文注释编码是 GBK，在生成 javadoc 时出错，需要改为 “utf-8” ,android  studio中 File -&gt; settings -&gt; Editor -&gt; File Encodings</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_2017-03-10_095102.jpg" alt="android  studio中 File -&gt; settings -&gt; Editor -&gt; File Encodings"></p><p>同时可设置项目的build.gradle:</p><pre><code>//添加allprojects &#123;    tasks.withType(Javadoc) &#123;        options&#123; encoding &quot;UTF-8&quot; charSet &#39;UTF-8&#39; links &quot;http://docs.oracle.com/javase/7/docs/api&quot; &#125;    &#125;&#125;</code></pre><p>设置module的build.gradle:</p><pre><code>tasks.withType(JavaCompile) &#123;    options.encoding = &quot;utf-8&quot;&#125;task sourcesJar(type: Jar) &#123;    from android.sourceSets.main.java.srcDirs    classifier = &#39;sources&#39;&#125;task javadoc(type: Javadoc) &#123;    source = android.sourceSets.main.java.srcDirs    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))    options.encoding = &quot;UTF-8&quot;&#125;task javadocJar(type: Jar, dependsOn: javadoc) &#123;    classifier = &#39;javadoc&#39;    from javadoc.destinationDir&#125;artifacts &#123;    archives javadocJar    archives sourcesJar&#125;</code></pre><h3 id="坑2-后续遇到新的问题在此记录…"><a href="#坑2-后续遇到新的问题在此记录…" class="headerlink" title="坑2. 后续遇到新的问题在此记录…"></a>坑2. 后续遇到新的问题在此记录…</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://blog.csdn.net/lmj623565791/article/details/51148825">Android 快速发布开源项目到jcenter</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> JCenter </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式匹配汇集</title>
      <link href="/article/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E6%B1%87%E9%9B%86/"/>
      <url>/article/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E6%B1%87%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在此收集遇到的用过的有用的正则表达式匹配规则</p></blockquote><p>正则表达式验证：</p><ol><li><a href="http://regexr.com/" title="http://regexr.com/">http://regexr.com/</a></li><li><a href="http://tool.lu/regex/" title="http://tool.lu/regex/">http://tool.lu/regex/</a></li></ol><span id="more"></span><ol><li>只能输入数字：”<code>^[0-9]*$</code>“。</li><li>只能输入n位的数字：”<code>^/d&#123;n&#125;$</code>“。</li><li>只能输入至少n位的数字：”<code>^/d&#123;n,&#125;$</code>“。</li><li>只能输入m~n位的数字：。”<code>^/d&#123;m,n&#125;$</code>“</li><li>只能输入零和非零开头的数字：”<code>^(0|[1-9][0-9]*)$</code>“。</li><li>只能输入有两位小数的正实数：”<code>^[0-9]+(.[0-9]&#123;2&#125;)?$</code>“。</li><li>只能输入有1~3位小数的正实数：”<code>^[0-9]+(.[0-9]&#123;1,3&#125;)?$</code>“。</li><li>只能输入非零的正整数：”<code>^/+?[1-9][0-9]*$</code>“。</li><li>只能输入非零的负整数：”<code>^/-[1-9][]0-9&quot;*$</code>“。</li><li>正数（包括小数）:<code>/&lt;sup&gt;[+]&#123;0,1&#125;(\d+)$|&lt;/sup&gt;[+]&#123;0,1&#125;(\d+\.\d+)$/</code></li><li>正整数(不包括小数)：<code>/^[+]&#123;0,1&#125;(\d+)$/</code></li><li>只能输入长度为3的字符：”<code>^.&#123;3&#125;$</code>“。</li><li>只能输入由26个英文字母组成的字符串：”<code>^[A-Za-z]+$</code>“。</li><li>只能输入由26个大写英文字母组成的字符串：”<code>^[A-Z]+$</code>“。</li><li>只能输入由26个小写英文字母组成的字符串：”<code>^[a-z]+$</code>“。</li><li>只能输入由数字和26个英文字母组成的字符串：”<code>^[A-Za-z0-9]+$</code>“。</li><li>只能输入由数字、26个英文字母或者下划线组成的字符串：”<code>^/w+$</code>“。</li><li>验证用户密码：”<code>^[a-zA-Z]/w&#123;5,17&#125;$</code>“正确格式为：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。</li><li>验证是否含有<sup>%&amp;’,;=?$/“等字符：”<code>[&lt;/sup&gt;%&amp;&#39;,;=?$/x22]+</code>“。</li><li>只能输入汉字：”<code>^[/u4e00-/u9fa5]&#123;0,&#125;$</code>“</li><li>验证Email地址：”<code>^/w+([-+.]/w+)*@/w+([-.]/w+)*/./w+([-.]/w+)*$</code>“。</li><li>验证InternetURL：”<code>^http://([/w-]+/.)+[/w-]+(/[/w-./?%&amp;=]*)?$</code>“。</li><li>验证电话号码：”<code>^(/(/d&#123;3,4&#125;-)|/d&#123;3.4&#125;-)?/d&#123;7,8&#125;$</code>“正确格式为：”XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX”。</li><li>验证身份证号（15位或18位数字）：”<code>^/d&#123;15&#125;|/d&#123;18&#125;$</code>“。</li><li>验证一年的12个月：”<code>^(0?[1-9]|1[0-2])$</code>“正确格式为：”01”～”09”和”1”～”12”。</li><li>验证一个月的31天：”<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code>“正确格式为；”01”～”09”和”1”～”31”。</li></ol><p>另：</p><ol><li>8位及以上，必须包含字母数字：”<code>&lt;sup&gt;(?![&lt;/sup&gt;a-zA-Z]+$)(?!\\D+$).&#123;8,&#125;$</code>“</li><li>8位及以上，必须包含字符（所有字符均可）数字：”<code>^(?=.*[a-zA-Z])(?=.*[0-9]).&#123;8,&#125;$</code>“</li><li>匹配括弧以及括弧内字符：”<code>([\(][^\)]+[\)]|[\(][\)])</code>“</li><li>匹配空括弧() : “<code>[\(][\)])</code>“</li><li>匹配js中所有日志语句 <code>console</code>,不包括末尾封号<code>;</code> :”<code>console.(clear|log|info|error|warn|groupEnd|group|dirxml|dir|assert|timeEnd|time|profileEnd|profile|count|table)([\(][^\)]+[\)]|[\(][\)])</code>“，如果参数中包含括弧可能会匹配不准。</li></ol><p>正则表达式匹配文件路径中文件名，以 .png 为例：<br><code>([^&lt;&gt;/\\\|:&quot;&quot;\*\?]+)\.png</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.editor_control#editor&#123;background-image:url(&#x27;../Images/editor_edit.png&#x27;)&#125;</span><br><span class="line"></span><br><span class="line">&gt;  共找到 1 处匹配：</span><br><span class="line">&gt; editor_edit.png</span><br></pre></td></tr></table></figure><p>正则表达式全局替换：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceStr</span>(<span class="params">jsString,str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> strs = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">//定义一数组 </span></span><br><span class="line">    strs = str.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>); <span class="comment">//字符分割 </span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; strs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        jsString = jsString.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(strs[i],<span class="string">&#x27;g&#x27;</span>), <span class="string">&#x27;GLE_&#x27;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsString = <span class="string">&quot;Good morning,Good day.&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">replaceStr</span>(jsString,<span class="string">&quot;Good,day&quot;</span>));</span><br><span class="line"><span class="comment">//GLE_0 morning,GLE_0 GLE_1.</span></span><br></pre></td></tr></table></figure><p><em>会持续更新…</em></p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手记 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术文章之Html（CSS，JS）</title>
      <link href="/article/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E4%B9%8BHtml%EF%BC%88CSS-JS%EF%BC%89/"/>
      <url>/article/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E4%B9%8BHtml%EF%BC%88CSS-JS%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><ol><li><a href="http://www.ctolib.com/topics-107352.html">总结一些JavaScript开发的著名开源项目</a></li><li><a href="https://github.com/hustcc/JS-Sorting-Algorithm">十大经典排序算法</a></li><li><a href="http://mp.weixin.qq.com/s/CuIvDjUsZ_2Xvr-WYRsqzw">必须知道的十大程序员开发用到的基本算法</a></li><li><a href="https://segmentfault.com/a/1190000008649988?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly">黑科技：CSS定制多行省略</a></li><li><a href="https://www.h5jun.com/post/sixty-lines-of-code-animation.html">用65行代码实现JavaScript动画序列播放</a></li></ol><p><em>会持续更新…</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 技术文章 </tag>
            
            <tag> Html </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术文章之Android</title>
      <link href="/article/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E4%B9%8BAndroid/"/>
      <url>/article/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E4%B9%8BAndroid/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在此收集看过的有用的有趣的Android技术知识，以备重阅。</p><span id="more"></span><ol><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822025&idx=1&sn=c01dbe2a685b6919a7029b822347fa61&chksm=80b78117b7c00801b74405beb6431ac7039b6d0dac724466bbb317f2b1294cbdd75edfdfd906&mpshare=1&scene=23&srcid=0210LJTe593ujVJxnpSAYrBY#rd">Android Camera使用总结与那些坑</a></li><li><a href="http://m.blog.csdn.net/article/details?id=54694260">微信Android热更新Tinker使用详解（by 星空武哥)</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434612&idx=1&sn=ae6678d8a14d3a9359e9251aeb051db4&chksm=f128870fc65f0e192424e33716021c4cc1efa2e83ccaf3e7a89f485c84e945af87a00961c34f&mpshare=1&scene=23&srcid=0208k9ZqJq9mC2xUiubNDNNM#rd">【精品】仿网易云音乐播放界面</a></li><li><a href="https://github.com/aa112901/remusic">仿网易云音乐 安卓版</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247483928&idx=1&sn=7859e0057d4f484c5598341d6d1bae9b&chksm=e95b9b8ede2c129893512aa7c9abcb964ccc7252f250d5983d1b9d26a604de040636ed2ac3e1&mpshare=1&scene=23&srcid=0208MdlVaNt4CsqTBTfAqoQO#rd">实践！业余时间做的一款阅读类App （MVP + RxJava + Retrofit）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822023&idx=1&sn=252e5053e9ad949638b98fc53b99b091&chksm=80b78119b7c0080f7b1f12f54ccfaf344a9f89b32fde7e16a5bf166b11d5faadde21880b893d&mpshare=1&scene=23&srcid=0208WcZEfaGjR6M7yiRoYtCi#rd">Android 提高代码质量 之 多种检测方案</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650821994&idx=1&sn=265ea44d9db97a18c334d948fc0846aa&chksm=80b781f4b7c008e2bfcdde084f74e8e6ff8cb70b21b641fafccb7b5fb330cb5752adb1a802b3&mpshare=1&scene=23&srcid=0207nptfmHEZp4TCraikagZP#rd">Android 使用WindowManager实现悬浮窗及源码解析</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434523&idx=1&sn=234b79fe60af1d564d806dc2356c554b&chksm=f1288760c65f0e768b4604914c87a0fe21b1836b5fd0b7827a90e2c12251245384ad81a00686&mpshare=1&scene=23&srcid=0124nmSx66kXM9I47T7HAoRR#rd">【重磅】支付宝使用的开源组件总结！</a></li><li><a href="http://mp.weixin.qq.com/s/d9KYCnccwR4EqSWGzNpgaQ">Android View相关核心知识问答</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434652&idx=1&sn=da0ceda73595e5cb931abad7e51dbe62&chksm=f12887e7c65f0ef1c086784e9ae77a7d9bd82daa6ba0302cebf307577ebd06fd3e0d9e37e87a&mpshare=1&scene=23&srcid=0214krfLUHbvJekl3snlIYUG#rd">2017年,身为Android开发的你必须要掌握的热门开源框架</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247483943&idx=1&sn=513e35f410a80b65d476d8e0740989be&chksm=e95b9bb1de2c12a7e1d823407e5e52c8725a30139c3eff35423f4e755de0ed84e69b7aee62ec&mpshare=1&scene=23&srcid=02139FATY6IN8m20sSgXL3IN#rd">Android冷启动实现APP秒开</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247483947&idx=1&sn=8c78d6d59503588c1244db8a87f3cb62&chksm=e95b9bbdde2c12ab852485fe39a6c595edb199edef44b0057520c4697f1d5ccf26a7bc197e72&mpshare=1&scene=23&srcid=0215gfKQ1v0KnyIyxICz4HCY#rd">高仿钉钉和小米的日历控件，很实用</a></li><li><a href="http://www.android100.org/html/201406/08/21147.html">Android相对布局属性全集</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247483974&idx=1&sn=c88299b9c458521db9e7ba4863f90d52&chksm=e95b9bd0de2c12c6f8270a4fcc8185ec2dbef320410a0e11c81bea965166c9802d10e6247d68&mpshare=1&scene=23&srcid=0217d3Q9uP53NlhF3dOqCYU6#rd">编译时间从33.8秒降到4.5秒我只多做了一件事</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434682&idx=1&sn=5b277d151a18a6bd1521c1af452e3e3f&chksm=f12887c1c65f0ed70cee86fbde5c1f63ffe292fec72225225d070c0a14ecb3c3855e91f29f07&mpshare=1&scene=23&srcid=02196O2Lh5ZhtH28pduwF9kf#rd">全面了解Android Notification</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822072&idx=1&sn=82e36025a1e37b8cbb68e6f86dd08698&chksm=80b78126b7c008300d2d1ce0300adf008e53b278f24da4ea3a4b90fafa74b174e91a8ffb7964&mpshare=1&scene=23&srcid=0219HbeYoHrNTclXl5GhxjWK#rd">Android 6.0 自定义文本选择操作 咕咚翻译的体验优化</a></li><li><a href="http://mp.weixin.qq.com/s/EGM6SLe_5VthIrzMzkVPqg">什么？IOS的专利？Android也能流畅实现毛玻璃效果(高斯模糊)效果</a></li><li><a href="http://mp.weixin.qq.com/s/H9v0YeXoZ5YAmmraEA9aaQ">一种快速毛玻璃虚化效果实现</a></li><li><a href="http://wetest.qq.com/lab/view/288.html?from=adsout_qqtips_past2_288&sessionUserType=BFT.PARAMS.211332.TASKID&ADUIN=408270653&ADSESSION=1487902007&ADTAG=CLIENT.QQ.5515_.0&ADPUBNO=26657">深度了解Android 7.0 ，你准备好了吗？</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822149&idx=1&sn=170f91c7a8f3142e5e0753edeef6ba77&chksm=80b7829bb7c00b8d866e6d622df7fea71ef435baf23e0809dd573aaa08ebd849b87e6b000796&mpshare=1&scene=23&srcid=022678v7owLVNhctiGQnwGi7#rd">Android 广播相关的都在这儿</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247484019&idx=1&sn=dc0ebf85da6556b1f6703119be215fea&chksm=e95b9be5de2c12f321b79f13841d4f1f86a7e5a878ba895f85c83d21735823d4f7c4f98dbb19&mpshare=1&scene=23&srcid=0227hRB6ZnIY0blZltECJFAu#rd">Android ADB命令?这一次我再也不死记了!</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822191&idx=1&sn=3a4280242d79af3df35501b397fedfa1&chksm=80b782b1b7c00ba786c6a7bf09a1107e85bde35d3902b084457436ba46dd269b9f9ab99614ea&mpshare=1&scene=23&srcid=0227Urwy034GuHMR70kKc1UF#rd">Android 系统自带DownloadManager详解</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434751&idx=1&sn=4154b06e059e17a983053a2c4806c24c&chksm=f1288784c65f0e92a443a4112c1f808db72a8595b8ba0cae9d36c661e9bb830e554b0ff87664&mpshare=1&scene=23&srcid=02271fuPd78L1MUQFhlJugdG#rd">Android Camera使用总结与那些坑</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NTcxNTg5Mg==&mid=2247483968&idx=1&sn=b3ea4e058af219d8f9a8994c21569676&chksm=e94b049bde3c8d8d52572a0a07ee0739b3a1df53f76871d8befa3589466579fbe27d0cd7feda&mpshare=1&scene=23&srcid=0228IyWTXDV2f0l97TK2RUb2#rd">开源许可协议了解这些就够了</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434795&idx=1&sn=fcbed3a22bce615e77b0945b0b54859a&chksm=f1288650c65f0f4612dd770566d961430ff63dfe5b84ccf66393fa0719ceb422955532aab091&mpshare=1&scene=23&srcid=0304wcDitruVFMCQYf4KSjLf#rd">【高端】天猫 Android UI 框架项目Tangram</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247484054&idx=1&sn=febcfe56632f43a46f7a6d8e240b2123&chksm=e95b9b00de2c12165be5bbb3c4811e47e15631bad84a336ac6f5f8558ff8941ba934a845331b&mpshare=1&scene=23&srcid=0304cbEFWsCc3LU1whZl8aWz#rd">通过这篇文章，我找到了工作！一款优雅的App开源项目-iDaily</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247484060&idx=1&sn=737571b872e0c90f26fd2f2990a872ee&chksm=e95b9b0ade2c121c56ae3c60d80f03c4caf098f9a0abf374c065be01156091ad5b7bbdf50ee2&mpshare=1&scene=23&srcid=0306XrVWaYnrXJZmyptsvxkJ#rd">Android卸载监听之后访问后台或者弹出一个网页</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822215&idx=1&sn=964d9f9c951044e572cccb8846330d25&chksm=80b782d9b7c00bcf9533d0ea5085d449083d014d6aa585817610e4d1b17fe89922eca7deb6c7&mpshare=1&scene=23&srcid=0305DLBdpq9zXDPxMe54AHfY#rd">Android插件化框架系列之类加载器</a></li><li><a href="http://www.jianshu.com/p/d17af84711a1?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">Android网络框架选择（Volley、OkHttp、Retrofit）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650238755&idx=1&sn=b4f3b351a3c8f440b538db58e67fb46d&chksm=88639e4cbf14175af6f4c27549951d718938e7f874215e765a480a1b89a0dafc6dc47bdb3954&mpshare=1&scene=23&srcid=0304DLO87Ua9ORpyRpssnnmB#rd">如何用一周时间开发一款Android APP并在Google Play上线</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434801&idx=1&sn=b44f08dcba949cf0b78b5adc93bc8989&chksm=f128864ac65f0f5c264a2ef7a202f3526fe7131ab2ec4f50f21f92076ea84e8ac0d9cbc9a3cc&mpshare=1&scene=23&srcid=0305tDFmvzNh6f1Je9W7ODBT#rd">安居客Android项目架构演进</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434590&idx=1&sn=61e8db6d4f732136764eb4e988a9276f&chksm=f1288725c65f0e334175a43ac03166ff39efa14935e67ca9044d8b367c18cc777a23c02cfcaa&mpshare=1&scene=23&srcid=0207WjJj6tVhQhmzAZajVHKO#rd">android多图选择器 图片/视频 单选or多选，以及视频录制</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822225&idx=1&sn=09177524a9e51bd049b1d042339863ec&chksm=80b782cfb7c00bd9ea3933f812c66770bd00af87c78691ad45650cd017d5d35347af30781e85&mpshare=1&scene=23&srcid=0305uuFF1GyOVIPJwYy34JKh#rd">【源码】 Android 不要错过的7个完整项目学习</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650238794&idx=1&sn=f105f8100d62a202f5695f9496425063&chksm=88639e25bf1417330f0ffb1cf6c10ea07359ff25774313fac5addfb25541f7969d1d178e17cc&mpshare=1&scene=23&srcid=0307BnnrQkjyfXWtDKaSKey9#rd">LitePal 1.5.0版本发布，你想要的都在这里</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247484068&idx=1&sn=b77a4e7be6ee2d6aede46c07fa737022&chksm=e95b9b32de2c1224116281ab3877f3ab0c36d3c220315d5eec2a85cd01d20a0e6ac218cc3944&mpshare=1&scene=23&srcid=0307ndVEUZCfBiJnTzU3JBg3#rd">比QQ更炫酷的’选项弹窗’动画</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434805&idx=1&sn=c1eaf9d6be0259c1cb9eb632e981e61f&chksm=f128864ec65f0f580eb49217bb5703401f0fbb42b5accec992d3b71a6eed570a2962f0ef1e94&mpshare=1&scene=23&srcid=0307oCu1pFbVmXM5ndunyITW#rd">【推荐】Android APK 瘦身实践</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822272&idx=1&sn=a1d7956dd8437d4bb28e47fab814a7ed&chksm=80b7821eb7c00b08eb8de256529a7cbd153ca1064612eef88fe912ba9ecb11763baacc279ccb&mpshare=1&scene=23&srcid=0307yjSaM4ItKqIYSfO5CJo6#rd">Android性能优化系列之内存优化</a></li><li><a href="https://github.com/m511386374/PopWin_MeiTuan">仿美团做的一个下拉选择页，类似于电商app中筛选距离的下拉菜单</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247484070&idx=1&sn=483e54aa85354e05dc7a8d441d9232f0&chksm=e95b9b30de2c12260cf2b87d5a13fa43609c1f6be5a2898f31f14b40e2113b8df136ba1ee6dc&mpshare=1&scene=23&srcid=0308J2PpZ44c8mIKXUyOYilp#rd">让我们聊一聊安卓应用角标那些事儿</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650238800&idx=1&sn=edf37925bc998ccb9d69912bb1f2cd2d&chksm=88639e3fbf141729a6a02d8feda0e12bea97aa17e6482d22e1d8b7b6cf0ed92889239549acee&mpshare=1&scene=23&srcid=0308iEgd2AIR7rE3o2UuT9zh#rd">使用OKHttp3实现下载(断点续传、显示进度)</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650821993&idx=1&sn=550a90e30a398bbb652ecd65209b62e2&chksm=80b781f7b7c008e17d9f5a59542f46329d28cbcd2ec075d4c2d44784f789135166a4e1949303&mpshare=1&scene=23&srcid=0309ud57QhmmrCPBrhPxoRQh#rd">Android 热修复 Tinker接入及源码浅析</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822276&idx=1&sn=b19704a9d25b266d108de13cba5b5cfe&chksm=80b7821ab7c00b0cfe2c2da31fdfffede56f9aef82b85254083ec4db3e8f6aa445c96ab01de5&mpshare=1&scene=23&srcid=0309NLJ1O9vIzz9yMzUguTPx#rd">Android 热修复 Tinker 源码分析之DexDiff / DexPatch</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650238826&idx=1&sn=294d91d9a190ea56822696994f8a04b0&chksm=88639e05bf1417137f364037bb35a8fcc120679c92b924cfabffa7011199d8ac8bba69a25194&mpshare=1&scene=23&srcid=0309gYGHZFr1g8ICrQkRhStN#rd">一看你就懂，Java中的ClassLoader详解</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822284&idx=1&sn=d6b30ab442f417cbd992e784945c7799&chksm=80b78212b7c00b049243a474933e7a3f356c8b6fca1e8d67a9fcf654cef095c0c28f6a51e31c&mpshare=1&scene=23&srcid=0310u9IxkQdQ6ESusrp1BHEY#rd">Android性能优化系列之App启动优化</a></li><li><a href="http://www.jianshu.com/p/2cbf5bf3842e?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">Android自定义dialog</a></li><li><a href="http://www.jianshu.com/p/a7e58fab4ff1?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">优雅的使用MVP+RxJava+Retrofit框架</a></li><li><a href="http://www.jianshu.com/p/bc68e763c7a2?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">Android数据库框架 - LitePal学习笔记</a></li><li><a href="http://www.jianshu.com/p/5eac94143bd6?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">插件式换肤框架搭建 - 资源加载源码分析</a></li><li><a href="http://www.jianshu.com/p/af7c0585dd5b?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">Android主题换肤 无缝切换</a></li><li><a href="http://www.jianshu.com/p/a9b86b792c8c?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">Android知识点之悬浮通知栏</a></li><li><a href="http://www.jianshu.com/p/57c454e126a3?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">基于Rxjava+Retrofit+Okhttp+LeanCloud的完整项目（段子手），供大家学习与交流</a></li><li><a href="http://ms.csdn.net/geek/185623">Android开发时，那些相见恨晚的工具或网站！</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650238877&idx=1&sn=fe65084035413c0c730c0f34b0781287&chksm=88639ef2bf1417e44203de6887fc1607b2ccf4d00e79ce8775b5c375e846a223ac270f14558e&mpshare=1&scene=23&srcid=0315ElX9ZknRnJoSVPHBzXeR#rd">Android Design Support Library使用详解</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822312&idx=1&sn=b93cbf8185d9bc696e59d2b8187fb94d&chksm=80b78236b7c00b20cbc226dfcb507e8c4f08350de2e86ecf773b505fdc1bf74837b422c86ad1&mpshare=1&scene=23&srcid=0315GGaZpsO2ZNdkjc7vXFn9#rd">Android进阶系列之Support Annotation Library使用详解</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434848&idx=1&sn=4c6ff5ffcda212d65dfa92174be4cc79&chksm=f128861bc65f0f0dc1ab7f1a25ff9e6d6e72acb7e057a6fb3b9be83c3bb08881f3ec0b03604c&mpshare=1&scene=23&srcid=0315oQ0Gwuf9mXVYmn5kRNbl#rd">【满满干货】android阿里面试题锦集</a></li><li><a href="https://segmentfault.com/a/1190000008608758">最全面的 Material Design 学习资料</a></li><li><a href="http://blog.csdn.net/briblue/article/details/54973413">一看你就懂，超详细java中的ClassLoader详解</a></li><li><a href="http://www.jianshu.com/p/1fecc80cbd59?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">如何做个依赖库让别人依赖使用</a></li><li><a href="http://www.jianshu.com/p/e1d2cc82e756?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">Android实现底部对话框BottomDialog</a></li><li><a href="http://www.jianshu.com/p/0b4854aae105?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">Android中图片压缩方案详解</a></li><li><a href="http://www.jianshu.com/p/932568ed31af?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">Android修改状态栏颜色全方位教程</a></li><li><a href="http://www.jianshu.com/p/3dc0d1291374?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">github 开源库</a></li><li><a href="http://www.jianshu.com/p/023098e98695?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=qq">Toolbar 结合 SearchView实现搜索功能(具备历史记录)</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434858&idx=1&sn=d39e50b16b600d0269cfb8162f17cbc7&chksm=f1288611c65f0f07ac5fdd31a41618ef4cc9ad27193a8caeb464ba1065a73830c989f2b2601d&mpshare=1&scene=23&srcid=0320Q6yLuwAztSFAycB1q9d4#rd">一种快速毛玻璃虚化效果实现</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822338&idx=1&sn=ee45104f78f00101545ea7b0bba56723&chksm=80b7825cb7c00b4aa37d8ef244745600edba4ab3308d7e4a39f2a2476058affde850db3ccf79&mpshare=1&scene=23&srcid=0320Lo0ecvzwMUuSdpKPyXiK#rd">Android进阶系列之源码分析AlertDialog建造者模式</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650238917&idx=1&sn=d13fceb5aab551258c64f6aa9e03b9ff&chksm=88639eaabf1417bc470ef3c4240b6b78388959dfb2911f4e4b7e341798a42bdc33151a83dedc&mpshare=1&scene=23&srcid=03204AulbIxfz4IKrX1kQOBO#rd">onConfigurationChanged方法介绍及问题解决</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822379&idx=1&sn=8dce68bad2a32ebd001e99fcc3a18290">Android自定义键盘之汉字键盘</a></li><li><a href="http://mp.weixin.qq.com/s/rJ3TawFf6ww_7lfmQzxu5w">Android 自己动手生成 Apk 了解Apk生成的种种细节</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247484101&idx=1&sn=76c0ec3cc5a59ef915f48567c652119d&chksm=e95b9b53de2c1245b4bafe92838c3149a1727b5e618bcd130a6ecbff2cb0c08afcb39ba3a0bc&mpshare=1&scene=23&srcid=0322eu6kQou0f9CPlvifthTU#rd">Android可伸缩布局－FlexboxLayout(支持RecyclerView集成)</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&mid=2247484095&idx=1&sn=6b067abe805ef665a072480b74aedb04&chksm=e95b9b29de2c123fa33ea267b33a303322fbc645dbbe2014af3e4cc75c33128f9a457583ff76&mpshare=1&scene=23&srcid=03228zmCyFG3jQRoISkAdlQI#rd">Android鬼点子-又来了一个LoadingBar</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650239018&idx=1&sn=0c81c2ea6a75ca3a4565df750ad8b2e6&chksm=88638145bf1408530bc5722871b6a6d44a1da0175642cc2ce834b6c6b203bfaa3d42fb6b851a&mpshare=1&scene=23&srcid=0329uXeCBJMtEF8WjAIFlllz#rd">Android通过蓝牙获取通讯录</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650238967&idx=1&sn=0b6bdee06eb94672c2924ac7ad8f2cb2&chksm=88639e98bf14178edce676d2130279ce6db22a16f5f82a569be11a6d7ab6b901c5ee3d927dd5&mpshare=1&scene=23&srcid=0329lTadyUoqpLO68rGcfH6b#rd">一篇文章带你搞懂DEX文件的结构</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822456&idx=1&sn=10c554676ce9cd0efb35bfda8e70c10f&chksm=80b783a6b7c00ab049e2e38b4913f54d672c3e74cda01ec79b1afa1c0ff6d618222a62f90b93&mpshare=1&scene=23&srcid=0329WofZiPagJsXq3O513hiC#rd">Android 加快apk的构建速度，如何把编译时间从130秒降到17秒</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434963&idx=1&sn=b52ecf27ce25ac4c0c4509fd96dd98cc&chksm=f12886a8c65f0fbe824134fa59b04da8a2d945c051ae800f8b44eddeb6487cff81434d2da58d&mpshare=1&scene=23&srcid=0329QNcaH7J2e9o1ehpth6To#rd">【深度总结】一个APP从启动到主页面显示经历了哪些过程？</a></li><li><a href="http://www.jianshu.com/p/0555b8c1d26a">Android使用矢量图（SVG, VectorDrawable）实践篇</a></li><li><a href="http://www.jianshu.com/p/72494773aace">Android开发人员不得不收集的代码(持续更新中)</a></li><li><a href="http://www.jianshu.com/p/b806d014162c">重撸工具类之LogUtils</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650239012&idx=1&sn=b811e0eec443d5d3f8e9863d95be0cea&chksm=8863814bbf14085ddad6c6beae2293ccd5be8e38ccf926b958953361a0f34071a1e9c8b63183&mpshare=1&scene=23&srcid=03297EZLFKWDr2xTeNrHk7y1#rd">Android使用记录访问权限</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650239036&idx=1&sn=cdde2a1f6125c8f3d780eff8c8e36076&chksm=88638153bf1408455d5c56f0778d40ba9d4448a1e68ef0bf889c4a99699353e3e4ad99f95398&mpshare=1&scene=23&srcid=0329f83Rxux9IvwfrBODq1h9#rd">Android7.0适配</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650822398&idx=1&sn=736d183aa5b95d2222e502bc9dc33ba5&chksm=80b78260b7c00b76f3d30a17ded3e30c26993832173c42192d205250a21789011bf4da0cb29b&mpshare=1&scene=23&srcid=0329qoB2w0IgSlGSIWV7mX5F#rd">Android实战自定义控件 仿华为天气预报UI</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650238931&idx=1&sn=ff6d7701f342f0ef455193f8dca1a5e8&chksm=88639ebcbf1417aa266ea74bfeb63a2a72975eee6cd6cea81ed92094eee716850cede4b0abb7&mpshare=1&scene=23&srcid=0329bcamATCy4gFCNi2RA8pX#rd">开始新的系列，Glide的基本用法</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&mid=2651434956&idx=1&sn=73192dbef2b117cf5a66432ac9d8b23e&chksm=f12886b7c65f0fa103b8aa4757fc60d3692bb62f6234c2e47b6c4e8c4d488b9a1f2f47a53960&mpshare=1&scene=23&srcid=0329kTsFO8aK85CNYRi2g7Dn#rd">【MIUI动效】Android：会呼吸的悬浮气泡</a></li><li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/61618945">Android安全防护之旅—带你把Apk混淆成中文语言代码</a></li><li><a href="http://www.open-open.com/lib/view/open1411443332703.html">收集android上开源的酷炫的交互动画和视觉效果</a></li><li><a href="http://www.open-open.com/doc/view/bc7ac26ff24b491492d2698807c6dc86">animation动画详解 - v1.0.pdf</a></li><li><a href="http://www.open-open.com/lib/view/open1328063267889.html">上百个Android开源项目分享</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650823035&idx=1&sn=2db4eea9eb569bf375f847f36b1229fa">学习Kotlin吗？</a></li><li><a href="https://www.kotlincn.net/">kotlin中文站-有学习文档</a></li><li><a href="https://kymjs.com/column/kotlin.html">Kotlin 一门强大的语言</a></li><li><a href="https://github.com/enbandari/Kotlin-Tutorials">Kotlin从入门到『放弃』系列 视频教程</a></li><li><a href="https://github.com/githubwing/GankClient-Kotlin">一个Kotlin实战项目GankClient-Kotlin</a></li></ol><p><em>会持续更新…</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 技术文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web app相关整理</title>
      <link href="/article/web-app%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86/"/>
      <url>/article/web-app%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Webapp说白了就是一个针对Iphone、Android优化后的web站点，它使用的技术无非就是HTML或HTML5、CSS3、JavaScript，服务端技术JAVA、PHP、ASP。</p></blockquote><h1 id="WebApp与Native-App有何区别呢？"><a href="#WebApp与Native-App有何区别呢？" class="headerlink" title="WebApp与Native App有何区别呢？"></a>WebApp与Native App有何区别呢？</h1><p>Native App：</p><ol><li>开发成本非常大。一般使用的开发语言为JAVA、C++、Objective-C。</li><li>更新体验较差、同时也比较麻烦。每一次发布新的版本，都需要做版本打包，且需要用户手动更新（有些应用程序即使不需要用户手动更新，但是也需要有一个恶心的提示）。</li><li>非常酷。因为native app可以调用IOS中的UI控件以UI方法，它可以实现WebApp无法实现的一些非常酷的交互效果。</li><li>Native app是被Apple认可的。Native app可以被Apple认可为一款可信任的独立软件，可以放在Apple Stroe出售，但是Web app却不行。</li></ol><p>Web App：</p><ol><li><p>开发成本较低。使用web开发技术就可以轻松的完成web app的开发。</p></li><li><p>升级较简单。升级不需要通知用户，在服务端更新文件即可，用户完全没有感觉。</p></li><li><p>维护比较轻松。和一般的web一样，维护比较简单，它其实就是一个站点。</p></li></ol><span id="more"></span><p>另附ppt:<a href="https://github.com/Sogrey/WebApp-ppt">github</a>，<a href="https://git.coding.net/sogrey/webapp-ppt.git">coding</a></p><p><a href="http://sogrey.coding.me/webapp-ppt">coding预览</a>，<a href="http://sogrey.coding.me/webapp-ppt/example/WebApp">coding示例预览</a></p><p><a href="https://sogrey.github.io/WebApp-ppt/">github预览</a>，<a href="https://sogrey.github.io/WebApp-ppt/example/WebApp">github示例预览</a></p><h1 id="web-app-开发经验"><a href="#web-app-开发经验" class="headerlink" title="web app 开发经验"></a>web app 开发经验</h1><h2 id="1-viewport："><a href="#1-viewport：" class="headerlink" title="1. viewport："></a>1. viewport：</h2><p>也就是可视区域。对于桌面浏览器，我们都很清楚viewport是什么，就是出去了所有工具栏、状态栏、滚动条等等之后用于看网页的区域，<br>这是真正有效的区域。由于移动设备屏幕宽度不同于传统web,因此我们需要改变viewport;<br>实际上我们可以操作的属性有4 个：</p><pre><code>width -             //  viewport 的宽度 （范围从200 到10,000，默认为980 像素）height -            //  viewport 的高度 （范围从223 到10,000）initial-scale -     //  初始的缩放比例 （范围从&gt;0 到10）minimum-scale -    //   允许用户缩放到的最小比例maximum-scale -    //   允许用户缩放到的最大比例user-scalable -    //   用户是否可以手动缩 (no,yes)</code></pre><p>那么到底这些设置如何让Safari 知道？其实很简单，就一个meta，形如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;   //编码</span><br><span class="line">&lt;meta id=&quot;viewport&quot; name=&quot;viewport&quot; content=&quot;width=320; initial-scale=1.0;maximum-scale=1.0; user-scalable=no;&quot;/&gt;</span><br><span class="line">&lt;meta name=”apple-mobile-web-app-capable” content=”yes” /&gt;  // 离线应用的另一个技巧    </span><br><span class="line">&lt;meta name=”apple-mobile-web-app-status-bar-style” content=black” /&gt;  // 隐藏状态栏       </span><br><span class="line">&lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot; /&gt; //指定的iphone中safari顶端的状态条的样式       </span><br><span class="line">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;       //告诉设备忽略将页面中的数字识别为电话号码     </span><br><span class="line">&lt;meta name=&quot;Author&quot; contect=&quot;Mr.He&quot;/ &gt; </span><br></pre></td></tr></table></figure><p>在设置了<code>initial-scale=1</code> 之后，我们终于可以以1:1 的比例进行页面设计了。关于viewport，还有一个很重要的概念是：iphone 的safari 浏览器完全没有滚动条，而且不是简单的“隐藏滚动条”，是根本没有这个功能。iphone 的safari 浏览器实际上从一开始就完整显示了这个网页，然后用viewport 查看其中的一部分。当你用手指拖动时，其实拖的不是页面，而是viewport。浏览器行为的改变不止是滚动条，交互事件也跟普通桌面不一样。<br>(请参考：指尖的下JS 系列文章)</p><h2 id="2-link"><a href="#2-link" class="headerlink" title="2. link:"></a>2. link:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=”apple-touch-startup-image” href=”startup.png” /&gt; // 设置开始页面图片</span><br><span class="line">&lt;link rel=”apple-touch-icon” href=”iphon_tetris_icon.png”/&gt; // 在设置书签的时候可以显示好看的图标</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:portrait)&quot; href=&quot;portrait.css&quot;&gt;    // 肖像模式样式      </span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:landscape)&quot; href=&quot;landscape.css&quot;   // 风景模式样式</span><br><span class="line">//竖屏时使用的样式</span><br><span class="line">&lt;style media=&quot;all and (orientation:portrait)&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">#landscape &#123; display: none; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">//横屏时使用的样式</span><br><span class="line">&lt;style media=&quot;all and (orientation:landscape)&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">#portrait &#123; display: none; &#125;</span><br><span class="line">&lt;/style&gt; </span><br></pre></td></tr></table></figure><h2 id="3-事件-："><a href="#3-事件-：" class="headerlink" title="3. 事件 ："></a>3. 事件 ：</h2><p> (请参考：指尖的下JS 系列文章)<br>    // 手势事件<br>    touchstart            //当手指接触屏幕时触发<br>    touchmove           //当已经接触屏幕的手指开始移动后触发<br>    touchend             //当手指离开屏幕时触发<br>    touchcancel    // 触摸事件<br>    gesturestart          //当两个手指接触屏幕时触发<br>    gesturechange      //当两个手指接触屏幕后开始移动时触发<br>    gestureend    // 屏幕旋转事件<br>    onorientationchange        // 检测触摸屏幕的手指何时改变方向<br>    orientationchange          // touch事件支持的相关属性<br>    touches<br>    targetTouches<br>    changedTouches<br>    clientX　　　　// X coordinate of touch relative to the viewport (excludes scroll offset)<br>    clientY　　　　// Y coordinate of touch relative to the viewport (excludes scroll offset)<br>    screenX　　　 // Relative to the screen<br>    screenY 　　  // Relative to the screen<br>    pageX　　 　　// Relative to the full page (includes scrolling)<br>    pageY　　　　 // Relative to the full page (includes scrolling)<br>    target　　　　 // Node the touch event originated from<br>    identifier　　   // An identifying number, unique to each touch event</p><h2 id="4-屏幕旋转事件：onorientationchange"><a href="#4-屏幕旋转事件：onorientationchange" class="headerlink" title="4. 屏幕旋转事件：onorientationchange"></a>4. 屏幕旋转事件：onorientationchange</h2><p>添加屏幕旋转事件侦听，可随时发现屏幕旋转状态（左旋、右旋还是没旋）。例子：<br>// 判断屏幕是否旋转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function orientationChange() &#123;</span><br><span class="line">    switch(window.orientation) &#123;</span><br><span class="line">    　　case 0: </span><br><span class="line">            alert(&quot;肖像模式 0,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">    　　case -90: </span><br><span class="line">            alert(&quot;左旋 -90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">    　　case 90:   </span><br><span class="line">            alert(&quot;右旋 90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">    　　case 180:   </span><br><span class="line">        　　alert(&quot;风景模式 180,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">        　　break;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>// 添加事件监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&#x27;load&#x27;, function()&#123;</span><br><span class="line">    orientationChange();</span><br><span class="line">    window.onorientationchange = orientationChange;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-隐藏地址栏-amp-处理事件的时候，防止滚动条出现："><a href="#5-隐藏地址栏-amp-处理事件的时候，防止滚动条出现：" class="headerlink" title="5. 隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现："></a>5. 隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&#x27;load&#x27;, function()&#123;</span><br><span class="line">        setTimeout(function()&#123; window.scrollTo(0, 1); &#125;, 100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-双手指滑动事件："><a href="#6-双手指滑动事件：" class="headerlink" title="6. 双手指滑动事件："></a>6. 双手指滑动事件：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&#x27;load&#x27;,　　function()&#123; window.onmousewheel = twoFingerScroll;&#125;,</span><br><span class="line">     false   // 兼容各浏览器，表示在冒泡阶段调用事件处理程序 (true 捕获阶段)</span><br><span class="line">);</span><br><span class="line">function twoFingerScroll(ev) &#123;</span><br><span class="line">    var delta =ev.wheelDelta/120;              //对 delta 值进行判断(比如正负) ，而后执行相应操作</span><br><span class="line">    return true;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-判断是否为iPhone："><a href="#7-判断是否为iPhone：" class="headerlink" title="7. 判断是否为iPhone："></a>7. 判断是否为iPhone：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isAppleMobile() &#123;</span><br><span class="line">    return (navigator.platform.indexOf(&#x27;iPad&#x27;) != -1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-localStorage"><a href="#8-localStorage" class="headerlink" title="8. localStorage:"></a>8. localStorage:</h2><p>例子 ：（注意数据名称  n  要用引号引起来）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var v = localStorage.getItem(&#x27;n&#x27;) ? localStorage.getItem(&#x27;n&#x27;) : &quot;&quot;;   // 如果名称是  n 的数据存在 ，则将其读出 ，赋予变量  v  。</span><br><span class="line">localStorage.setItem(&#x27;n&#x27;, v);                                           // 写入名称为 n、值为  v  的数据</span><br><span class="line">localStorage.removeItem(&#x27;n&#x27;);                                           // 删除名称为  n  的数据   </span><br></pre></td></tr></table></figure><h2 id="9-使用特殊链接："><a href="#9-使用特殊链接：" class="headerlink" title="9. 使用特殊链接："></a>9. 使用特殊链接：</h2><p>如果你关闭自动识别后 ，又希望某些电话号码能够链接到 iPhone 的拨号功能 ，那么可以通过这样来声明电话链接 ,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;tel:12345654321&quot;&gt;打电话给我&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;sms:12345654321&quot;&gt;发短信&lt;/a&gt;</span><br><span class="line">或用于单元格：</span><br><span class="line">&lt;td onclick=&quot;location.href=&#x27;tel:122&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="10-自动大写与自动修正"><a href="#10-自动大写与自动修正" class="headerlink" title="10. 自动大写与自动修正"></a>10. 自动大写与自动修正</h2><p>要关闭这两项功能，可以通过<code>autocapitalize</code> 与<code>autocorrect</code> 这两个选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="11-WebKit-CSS"><a href="#11-WebKit-CSS" class="headerlink" title="11. WebKit CSS:"></a>11. WebKit CSS:</h2><p>①“盒模型”的具体描述性质的包围盒块内容，包括边界，填充等等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-webkit-border-bottom-left-radius: radius;</span><br><span class="line">-webkit-border-top-left-radius: horizontal_radius vertical_radius;</span><br><span class="line">-webkit-border-radius: radius;      //容器圆角</span><br><span class="line">-webkit-box-sizing: sizing_model; 边框常量值：border-box/content-box</span><br><span class="line">-webkit-box-shadow: hoff voff blur color; //容器阴影（参数分别为：水平X 方向偏移量；垂直Y 方向偏移量；高斯模糊半径值；阴影颜色值）</span><br><span class="line">-webkit-margin-bottom-collapse: collapse_behavior; 常量值：collapse/discard/separate</span><br><span class="line">-webkit-margin-start: width;</span><br><span class="line">-webkit-padding-start: width;</span><br><span class="line">-webkit-border-image: url(borderimg.gif) 25 25 25 25 round/stretch round/stretch;</span><br><span class="line">-webkit-appearance: push-button;   //内置的CSS 表现，暂时只支持push-button</span><br></pre></td></tr></table></figure><p>②“视觉格式化模型”描述性质，确定了位置和大小的块元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">direction: rtl</span><br><span class="line">unicode-bidi: bidi-override; 常量：bidi-override/embed/normal</span><br></pre></td></tr></table></figure><p>③“视觉效果”描述属性，调整的视觉效果块内容，包括溢出行为，调整行为，能见度，动画，变换，和过渡。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">clip: rect(10px, 5px, 10px, 5px)</span><br><span class="line">resize: auto; 常量：auto/both/horizontal/none/vertical</span><br><span class="line">visibility: visible; 常量: collapse/hidden/visible</span><br><span class="line">-webkit-transition: opacity 1s linear; 动画效果 ease/linear/ease-in/ease-out/ease-in-out</span><br><span class="line">-webkit-backface-visibility: visibler; 常量：visible(默认值)/hidden</span><br><span class="line">-webkit-box-reflect: right 1px; 镜向反转</span><br><span class="line">-webkit-box-reflect: below 4px -webkit-gradient(linear, left top, left bottom,</span><br><span class="line">from(transparent), color-stop(0.5, transparent), to(white));</span><br><span class="line">-webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,1)), to(rgba(0,0,0,0)));;   //CSS 遮罩/蒙板效果</span><br><span class="line">-webkit-mask-attachment: fixed; 常量：fixed/scroll</span><br><span class="line">-webkit-perspective: value; 常量：none(默认)</span><br><span class="line">-webkit-perspective-origin: left top;</span><br><span class="line">-webkit-transform: rotate(5deg);</span><br><span class="line">-webkit-transform-style: preserve-3d; 常量：flat/preserve-3d; (2D 与3D)</span><br></pre></td></tr></table></figure><p>④“生成的内容，自动编号，并列出”描述属性，允许您更改内容的一个组成部分，创建自动编号的章节和标题，和操纵的风格清单的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">content: “Item” counter(section) ” “;</span><br><span class="line">This resets the counter.</span><br><span class="line">First section</span><br><span class="line">&gt;two section</span><br><span class="line">three section</span><br><span class="line">counter-increment: section 1;</span><br><span class="line">counter-reset: section;</span><br></pre></td></tr></table></figure><p>⑤“分页媒体”描述性能与外观的属性，控制印刷版本的网页，如分页符的行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page-break-after: auto; 常量：always/auto/avoid/left/right</span><br><span class="line">page-break-before: auto; 常量：always/auto/avoid/left/right</span><br><span class="line">page-break-inside: auto; 常量：auto/avoid</span><br></pre></td></tr></table></figure><p>⑥“颜色和背景”描述属性控制背景下的块级元素和颜色的文本内容的组成部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-webkit-background-clip: content; 常量：border/content/padding/text</span><br><span class="line">-webkit-background-origin: padding; 常量：border/content/padding/text</span><br><span class="line">-webkit-background-size: 55px; 常量：length/length_x/length_y</span><br></pre></td></tr></table></figure><p>⑦ “字型”的具体描述性质的文字字体的选择范围内的一个因素。报告还描述属性用于下载字体定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unicode-range: U+00-FF, U+980-9FF;</span><br></pre></td></tr></table></figure><p>⑧“文本”描述属性的特定文字样式，间距和自动滚屏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">text-shadow: #00FFFC 10px 10px 5px;</span><br><span class="line">text-transform: capitalize; 常量：capitalize/lowercase/none/uppercase</span><br><span class="line">word-wrap: break-word; 常量：break-word/normal</span><br><span class="line">-webkit-marquee: right large infinite normal 10s; 常量：direction(方向) increment(迭代次数) repetition(重复) style(样式) speed(速度);</span><br><span class="line">-webkit-marquee-direction: ahead/auto/backwards/down/forwards/left/reverse/right/up</span><br><span class="line">-webkit-marquee-incrementt: 1-n/infinite(无穷次)</span><br><span class="line">-webkit-marquee-speed: fast/normal/slow</span><br><span class="line">-webkit-marquee-style: alternate/none/scroll/slide</span><br><span class="line">-webkit-text-fill-color: #ff6600; 常量：capitalize, lowercase, none, uppercase</span><br><span class="line">-webkit-text-security: circle; 常量：circle/disc/none/square</span><br><span class="line">-webkit-text-size-adjust: none; 常量:auto/none;</span><br><span class="line">-webkit-text-stroke: 15px #fff;</span><br><span class="line">-webkit-line-break: after-white-space; 常量：normal/after-white-space</span><br><span class="line">-webkit-appearance: caps-lock-indicator;</span><br><span class="line">-webkit-nbsp-mode: space; 常量： normal/space</span><br><span class="line">-webkit-rtl-ordering: logical; 常量：visual/logical</span><br><span class="line">-webkit-user-drag: element; 常量：element/auto/none</span><br><span class="line">-webkit-user-modify: read- only; 常量：read-write-plaintext-only/read-write/read-only</span><br><span class="line">-webkit-user-select: text; 常量：text/auto/none</span><br></pre></td></tr></table></figure><p>⑨“表格”描述的布局和设计性能表的具体内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-webkit-border-horizontal-spacing: 2px;</span><br><span class="line">-webkit-border-vertical-spacing: 2px;</span><br><span class="line">-webkit-column-break-after: right; 常量：always/auto/avoid/left/right</span><br><span class="line">-webkit-column-break-before: right; 常量：always/auto/avoid/left/right</span><br><span class="line">–webkit-column-break-inside: logical; 常量：avoid/auto</span><br><span class="line">-webkit-column-count: 3; //分栏</span><br><span class="line">-webkit-column-rule: 1px solid #fff;</span><br><span class="line">style:dashed,dotted,double,groove,hidden,inset,none,outset,ridge,solid</span><br></pre></td></tr></table></figure><p>⑩“用户界面”描述属性，涉及到用户界面元素在浏览器中，如滚动文字区，滚动条，等等。报告还描述属性，范围以外的网页内容，如光标的标注样式和显示当您按住触摸触摸<br>目标，如在iPhone上的链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-webkit-box-align: baseline,center,end,start,stretch 常量：baseline/center/end/start/stretch</span><br><span class="line">-webkit-box-direction: normal;常量：normal/reverse</span><br><span class="line">-webkit-box-flex: flex_valuet</span><br><span class="line">-webkit-box-flex-group: group_number</span><br><span class="line">-webkit-box-lines: multiple; 常量：multiple/single</span><br><span class="line">-webkit-box-ordinal-group: group_number</span><br><span class="line">-webkit-box-orient: block-axis; 常量：block-axis/horizontal/inline-axis/vertical/orientation</span><br><span class="line">–webkit-box-pack: alignment; 常量：center/end/justify/start</span><br></pre></td></tr></table></figure><h2 id="12-动画过渡"><a href="#12-动画过渡" class="headerlink" title="12. 动画过渡"></a>12. 动画过渡</h2><p>这是 Webkit 中最具创新力的特性：使用过渡函数定义动画。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-webkit-animation: title infinite ease-in-out 3s;</span><br><span class="line">animation 有这几个属性：</span><br><span class="line">-webkit-animation-name： //属性名，就是我们定义的keyframes</span><br><span class="line">-webkit-animation-duration：3s //持续时间</span><br><span class="line">-webkit-animation-timing-function： //过渡类型：ease/ linear(线性) /ease-in(慢到快)/ease-out(快到慢) /ease-in-out(慢到快再到慢) /cubic-bezier</span><br><span class="line">-webkit-animation-delay：10ms //动画延迟(默认0)</span><br><span class="line">-webkit-animation-iteration-count： //循环次数(默认1)，infinite 为无限</span><br><span class="line">-webkit-animation-direction： //动画方式：normal(默认 正向播放)； alternate(交替方向，第偶数次正向播放，第奇数次反向播放)</span><br></pre></td></tr></table></figure><p>这些同样是可以简写的。但真正让我觉的很爽的是keyframes，它能定义一个动画的转变过程供调用，过程为0%到100%或from(0%)到to(100%)。简单点说，只要你有想法，你想让元素在这个过程中以什么样的方式改变都是很简单的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-webkit-transform: 类型（缩放scale/旋转rotate/倾斜skew/位移translate）</span><br><span class="line">scale(num,num) 放大倍率。scaleX 和 scaleY(3)，可以简写为：scale(* , *)</span><br><span class="line">rotate(*deg) 转动角度。rotateX 和 rotateY，可以简写为：rotate(* , *)</span><br><span class="line">Skew(*deg) 倾斜角度。skewX 和skewY，可简写为：skew(* , *)</span><br><span class="line">translate(*,*) 坐标移动。translateX 和translateY，可简写为：translate(* , *)。</span><br></pre></td></tr></table></figure><p>实现模拟弹出消息框（Alert）的例子：<br>①定义过渡（在<code>&lt;style type=&quot;text/css&quot;&gt;</code>段中描述keyframes）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@-webkit-keyframes DivZoom</span><br><span class="line">&#123;</span><br><span class="line">0% &#123; -webkit-transform: scale(0.01) &#125;</span><br><span class="line">60% &#123; -webkit-transform: scale(1.05) &#125;</span><br><span class="line">80% &#123; -webkit-transform: scale(0.95) &#125;</span><br><span class="line">100% &#123; -webkit-transform: scale(1.00) &#125;</span><br><span class="line">&#125;</span><br><span class="line">.sZoom &#123; -webkit-animation: DivZoom 0.5s ease-in-out &#125;</span><br></pre></td></tr></table></figure><p>(很容易看懂，将元素从缩小的0.01 倍–很小但不能为0 倍，放大到1.05 倍，再缩小到0.95倍，最后到1倍即正常大小。整个过渡过程事件为0.5 秒，动画方式为ease-in-out，即慢到快再到慢，默认只进行1次过渡。这正是大家经常看到的 iPhone 弹出的提示信息的动画效果！）<br>②定义元素（在<code>&lt;body&gt;</code>段中）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;layerH&quot; style=&quot;-webkit-border-radius:12px; border:2px solid #FFF;-webkit-box-shadow: 0px 2px 4px #888;position: absolute; left: 24px; top: 106px;&lt;br&gt;width: 256px; height: 268px; padding-left: 8px; padding-right: 8px;color: #FFFFFF; text-shadow: 1px 1px 1px #000; text-align: center;background-color: RGBA(32,48,96,0.9);</span><br><span class="line">background-image:url(&#x27;BG-Msg.png&#x27;); background-repeat:no-repeat;</span><br><span class="line">z-index: 1; visibility: hidden; &quot;&gt;</span><br><span class="line">&lt;p&gt;&lt;span style=&quot;font-size: 16pt; font-weight: bold&quot;&gt;使用说明&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">&lt;hr noshade size=&quot;1&quot;&gt;</span><br><span class="line">&lt;div id=&quot;HelpText&quot; style=&quot;height: 120px&quot;&gt;说明文字&lt;/div&gt;</span><br><span class="line">&lt;hr noshade size=&quot;1&quot;&gt;</span><br><span class="line">&lt;form name=&quot;formV&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;确认&quot; name=&quot;B1&quot;</span><br><span class="line">style=&quot;width: 100%; height: 40px; font-size: 14pt; ont-weight: bold;</span><br><span class="line">color: #FFFFFF; text-shadow: 0px -1px 1px #000;&quot;</span><br><span class="line">onclick=&quot; layerH.style.visibility=&#x27;hidden&#x27;&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>③启动动画（在 javascript 定义的函数中）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function pHelp()</span><br><span class="line">&#123;</span><br><span class="line">layerH.style.visibility = &#x27;visible&#x27;</span><br><span class="line">layerH.style.cssText = &quot;-webkit-animation-delay: &quot; + Math.random() + &quot;ms&quot;</span><br><span class="line">layerH.className = &#x27;sZoom&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(这个启动函数就很好理解了。但是为什么要使用-webkit-animation-delay 这句呢？因为当一个元素过渡显示完成后，若其样式没有变化，下一次将无法进行过渡动画显示。我们巧妙的利用其动画延迟时间定义，使其有所变化，就避免了上述问题。其中使用随机数函数Math.random()，产生一个大于0 小于1 的随机数。当然，延迟零点几毫秒，用户是不会察觉的。)</p><p>补充：</p><p>1.锁定 viewport</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ontouchmove=&quot;event.preventDefault()&quot; //锁定viewport，任何屏幕操作不移动用户界面（弹出键盘除外）。</span><br></pre></td></tr></table></figure><p>2.被点击元素的外观变化，可以使用样式来设定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-tap-highlight-color: 颜色</span><br></pre></td></tr></table></figure><p>3.侦测iPhone/iPod<br>开发特定设备的移动网站，首先要做的就是设备侦测了。下面是使用Javascript侦测iPhone/iPod的UA，然后转向到专属的URL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))) &#123;</span><br><span class="line">　　if (document.cookie.indexOf(&quot;iphone_redirect=false&quot;) == -1) &#123;</span><br><span class="line">　　　　window.location = &quot;http://m.example.com&quot;;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然Javascript是可以在水果设备上运行的，但是用户还是可以禁用。它也会造成客户端刷新和额外的数据传输，所以下面是服务器端侦测和转向：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(strstr($_SERVER[&#x27;HTTP_USER_AGENT&#x27;],&#x27;iPhone&#x27;) || strstr($_SERVER[&#x27;HTTP_USER_AGENT&#x27;],&#x27;iPod&#x27;)) &#123;</span><br><span class="line">　　header(&#x27;Location: http://yoursite.com/iphone&#x27;);</span><br><span class="line">　　exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.阻止旋转屏幕时自动调整字体大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;-webkit-text-size-adjust:none;&#125;</span><br></pre></td></tr></table></figure><p>5.iPhone才识别的CSS<br>如果不想设备侦测，可以用CSS媒体查询来专为iPhone/iPod定义样式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-device-width: 480px) &#123;&#125;</span><br></pre></td></tr></table></figure><p>6.缩小图片<br>网站的大图通常宽度都超过480像素，如果用前面的代码限制了缩放，这些图片在iPhone版显示显然会超过屏幕。好在iPhone机能还够，我们可以用CSS让iPhone自动将大图片缩小显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-device-width: 480px)&#123;</span><br><span class="line">　　img&#123;max-width:100%;height:auto;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.模拟:hover伪类<br>因为iPhone并没有鼠标指针，所以没有hover事件。那么CSS :hover伪类就没用了。但是iPhone有Touch事件，onTouchStart 类似 onMouseOver，onTouchEnd 类似 onMouseOut。所以我们可以用它来模拟hover。使用Javascript：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var myLinks = document.getElementsByTagName(&#x27;a&#x27;);</span><br><span class="line">for(var i = 0; i &lt; myLinks.length; i++)&#123;</span><br><span class="line">　　myLinks[i].addEventListener(’touchstart’, function()&#123;this.className = “hover”;&#125;, false);</span><br><span class="line">　　myLinks[i].addEventListener(’touchend’, function()&#123;this.className = “”;&#125;, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用CSS增加hover效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:hover, a.hover &#123; /* 你的hover效果 */ &#125;</span><br></pre></td></tr></table></figure><p>这样设计一个链接，感觉可以更像按钮。并且，这个模拟可以用在任何元素上。</p><h1 id="web-app-开发中垒砖"><a href="#web-app-开发中垒砖" class="headerlink" title="web app 开发中垒砖"></a>web app 开发中垒砖</h1><p>当然，因为这些高端智能手机（Iphone、Android）的内置浏览器都是基于webkit内核的，所以在开发WEBAPP时，多数都是使 用 HTML5和CSS3技术做UI布局。当使用HTML5和CSS3l做UI时，若还是遵循着一般web开发中使用HTML4和CSS2那样的开发方式 的 话，这也就失去了WEBAPP的本质意义了，且有些效果也无法实现的，所以在此又回到了我们的主题–webapp的布局方式和技术。</p><p>在此所说的移动平台前端开发是指针对高端智能手机（如Iphone、Android）做站点适配也就是WebApp，并非是针对普通手机开 发 Wap 2.0，所以在阅读本篇文章以前，你需要对webkit内核的浏览器有一定的了解，你需要对HTML5和CSS3有一定的了解。</p><h2 id="1-webkit内核的私有的meta标签"><a href="#1-webkit内核的私有的meta标签" class="headerlink" title="1.webkit内核的私有的meta标签"></a>1.webkit内核的私有的meta标签</h2><p>首先我们来看看webkit内核中的一些私有的meta标签，这些meta标签在开发webapp时起到非常重要的作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=”width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;” name=”viewport” /&gt;</span><br><span class="line">&lt;meta content=”yes” name=”apple-mobile-web-app-capable” /&gt;</span><br><span class="line">&lt;meta content=”black” name=”apple-mobile-web-app-status-bar-style” /&gt;</span><br><span class="line">&lt;meta content=”telephone=no” name=”format-detection” /&gt;</span><br></pre></td></tr></table></figure><pre><code>第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览；第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式；第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码。</code></pre><h2 id="2-HTML5标签的使用"><a href="#2-HTML5标签的使用" class="headerlink" title="2.HTML5标签的使用"></a>2.HTML5标签的使用</h2><p>在 开始编写webapp时，哥建议前端工程师使用HTML5，而放弃HTML4，因为HTML5可以实现一些HTML4中无法实现的丰富的WEB应用程 序 的体验，可以减少开发者很多的工作量，当然了你决定使用HTML5前，一定要对此非常熟悉，要知道HTML5的新标签的作用。比如定义一块内容或文章 区域 可使用section标签，定义导航条或选项卡可以直接使用nav标签等等。</p><h2 id="3-放弃CSS-float属性"><a href="#3-放弃CSS-float属性" class="headerlink" title="3.放弃CSS float属性"></a>3.放弃CSS float属性</h2><p>在项目开发过程中可以会遇到内容排列排列显示的布局(见下图)，假如你遇见这样的视觉稿，哥建议你放弃float，可以直接使用display:block;</p><h2 id="4-利用CSS3边框背景属性"><a href="#4-利用CSS3边框背景属性" class="headerlink" title="4.利用CSS3边框背景属性"></a>4.利用CSS3边框背景属性</h2><p>这 个按钮有圆角效果，有内发光效果还有高光效果，这样的按钮使用CSS3写是无法写出来的，当然圆角可以使用CSS3来写，但高光和内发光却无法使 用 CSS3编写，这个时候你不妨使用-webkit-border-image来定义这个按钮的样式。-webkit-border-image就个很 复杂 的样式属性。</p><h2 id="5-块级化a标签"><a href="#5-块级化a标签" class="headerlink" title="5.块级化a标签"></a>5.块级化a标签</h2><p>请保证将每条数据都放在一个a标签中，为何这样做？因为在触控手机上，为提升用户体验，尽可能的保证用户的可点击区域较大。</p><h2 id="6-自适应布局模式"><a href="#6-自适应布局模式" class="headerlink" title="6.自适应布局模式"></a>6.自适应布局模式</h2><p>在 编写CSS时，我不建议前端工程师把容器（不管是外层容器还是内层）的宽度定死。为达到适配各种手持设备，我建议前端工程师使用自适应布局模式（支付 宝 采用了自适应布局模式），因为这样做可以让你的页面在ipad、itouch、ipod、iphone、android、 web safarik、 chrome都能够正常的显示，你无需再次考虑设备的分辨率。</p><h2 id="7-学会使用webkit-box"><a href="#7-学会使用webkit-box" class="headerlink" title="7.学会使用webkit-box"></a>7.学会使用webkit-box</h2><p>上一节，我们说过自适应布局模式，有些同学可能会问：如何在移动设备上做到完全自适应呢？很感谢webkit为display属性提供了一个webkit-box的值，它可以帮助前端工程师做到盒子模型灵活控制。</p><h2 id="8-如何去除Android平台中对邮箱地址的识别"><a href="#8-如何去除Android平台中对邮箱地址的识别" class="headerlink" title="8.如何去除Android平台中对邮箱地址的识别"></a>8.如何去除Android平台中对邮箱地址的识别</h2><p>看 过iOS webapp API的同学都知道iOS提供了一个meta标签:用于禁用iOS对页面中电话号码的自动识别。在iOS中是不自动识别邮件 地 址的，但在Android平台，它会自动检测邮件地址，当用户touch到这个邮件地址时，Android会弹出一个框提示用户发送邮件，如果你不 想 Android自动识别页面中的邮件地址，你不妨加上这样一句meta标签在head 中 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=”email=no” name=”format-detection” /&gt;</span><br></pre></td></tr></table></figure><h2 id="9-如何去除iOS和Android中的输入URL的控件条"><a href="#9-如何去除iOS和Android中的输入URL的控件条" class="headerlink" title="9.如何去除iOS和Android中的输入URL的控件条"></a>9.如何去除iOS和Android中的输入URL的控件条</h2><p>你的老板或者PD或者交互设计师可能会要求你：能否让我们的webapp更加像nativeapp，我不想让用户看见那个输入url的控件条？</p><p>答案是可以做到的。我们可以利用一句简单的javascript代码来实现这个效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(scrollTo,0,0,0);</span><br></pre></td></tr></table></figure><p>请注意，这句代码必须放在<code>window.onload</code>里才能够正常的工作，而且你的当前文档的内容高度必须是高于窗口的高度时，这句代码才能有效的执行。</p><h2 id="10-如何禁止用户旋转设备"><a href="#10-如何禁止用户旋转设备" class="headerlink" title="10.如何禁止用户旋转设备"></a>10.如何禁止用户旋转设备</h2><p>我曾经也想禁止用户旋转设备，也想实现像某些客户端那样：只能在肖像模式或景观模式下才能正常运行。但现在我可以很负责任的告诉你：别想了!在移动版的webkit中做不到！</p><p>至 少Apple webapp API已经说到了：我们为了让用户在safari中正常的浏览网页，我们必须保证用户的设备处于任何一个方 位 时，safari都能够正常的显示网页内容（也就是自适应），所以我们禁止开发者阻止浏览器的<code>orientationchange</code>事件，看来苹果公司 的出 发点是正确的，苹果确实不是一般的苹果。</p><p>iOS已经禁止开发者阻止<code>orientationchange</code>事件，那Android呢？对不起，我没有找到任何资料说Android禁止开发者阻止浏览器<code>orientationchange</code>事件，但是在Android平台，确实也是阻止不了的。</p><h2 id="11-如何检测用户是通过主屏启动你的webapp"><a href="#11-如何检测用户是通过主屏启动你的webapp" class="headerlink" title="11.如何检测用户是通过主屏启动你的webapp"></a>11.如何检测用户是通过主屏启动你的webapp</h2><p>看过Apple webapp API的同学都知道iOS为safari提供了一个将当前页面添加主屏的功能，按下 iphoneipodipod touch底部工具中的小加号，或者ipad顶部左侧的小加号，就可以将当前的页面添加到设备的主屏，在设备的主屏会 自动 增加一个当前页面的启动图标，点击该启动图标就可以快速、便捷的启动你的webapp。从主屏启动的webapp和浏览器访问你的webapp最大 的区别 是它清除了浏览器上方和下方的工具条，这样你的webapp就更加像是nativeapp了，还有一个区别是window对像中的 <code>navigator</code>子对 象的一个<code>standalone</code>属性。iOS中浏览器直接访问站点时，<code>navigator.standalone</code>为<code>false</code>,从 主屏启动webapp 时，<code>navigator.standalone</code>为<code>true</code>， 我们可以通过<code>navigator.standalone</code>这个属性获知 用户当前是否是从主屏访 问我们的webapp的。在Android中从来没有添加到主屏这回事！</p><h2 id="12-如何关闭iOS中键盘自动大写"><a href="#12-如何关闭iOS中键盘自动大写" class="headerlink" title="12.如何关闭iOS中键盘自动大写"></a>12.如何关闭iOS中键盘自动大写</h2><p>我 们知道在iOS中，当虚拟键盘弹出时，默认情况下键盘是开启首字母大写的功能的，根据某些业务场景，可能我们需要关闭这个功能，移动版本webkit 为 input元素提供了<code>autocapitalize</code>属性，通过指定<code>autocapitalize=&quot;off&quot;</code>来关闭键盘默认首字母大写。</p><h2 id="13-iOS中如何彻底禁止用户在新窗口打开页面"><a href="#13-iOS中如何彻底禁止用户在新窗口打开页面" class="headerlink" title="13.iOS中如何彻底禁止用户在新窗口打开页面"></a>13.iOS中如何彻底禁止用户在新窗口打开页面</h2><p>有 时我们可能需要禁止用户在新窗口打开页面，我们可以使用a标签的<code>target=&quot;_self&quot;</code>来指定用户在新窗口打开，或者target属性保持空， 但 是你会发现iOS的用户在这个链接的上方长按3秒钟后，iOS会弹出一个列表按钮，用户通过这些按钮仍然可以在新窗口打开页面，这样的话，开发者指定 的 target属性就失效了，但是可以通过指定当前元素的<code>-webkit-touch-callout</code>样式属性为none来禁止iOS弹出这些按钮。这 个技 巧仅适用iOS对于Android平台则无效。</p><h2 id="14-iOS中如何禁止用户保存图片、复制图片"><a href="#14-iOS中如何禁止用户保存图片、复制图片" class="headerlink" title="14.iOS中如何禁止用户保存图片、复制图片"></a>14.iOS中如何禁止用户保存图片、复制图片</h2><p>我们在第13条技巧中提到元素的<code>-webkit-touch-callout</code>属性，同样为一个<code>img</code>标签指定<code>-webkit-touch-callout为none</code>也会禁止设备弹出列表按钮，这样用户就无法保存/复制你的图片了。</p><h2 id="15-iOS中如何禁止用户选中文字"><a href="#15-iOS中如何禁止用户选中文字" class="headerlink" title="15.iOS中如何禁止用户选中文字"></a>15.iOS中如何禁止用户选中文字</h2><p>我们通过指定文字标签的<code>-webkit-user-select</code>属性为<code>none</code>便可以禁止iOS用户选中文字。</p><h2 id="16-iOS中如何获取滚动条的值"><a href="#16-iOS中如何获取滚动条的值" class="headerlink" title="16.iOS中如何获取滚动条的值"></a>16.iOS中如何获取滚动条的值</h2><p>桌 面浏览器中想要获取滚动条的值是通过<code>document.scrollTop</code>和<code>document.scrollLeft</code>得到的，但在iOS中你会发现这 两 个属性是未定义的，为什么呢？因为在iOS中没有滚动条的概念，在Android中通过这两个属性可以正常获取到滚动条的值，那么在iOS中我们该如 何获 取滚动条的值呢？</p><p>通过<code>window.scrollY</code>和<code>window.scrollX</code>我们可以得到当前窗口的y轴和x轴滚动条的值。</p><h2 id="17-如何解决盒子边框溢出"><a href="#17-如何解决盒子边框溢出" class="headerlink" title="17.如何解决盒子边框溢出"></a>17.如何解决盒子边框溢出</h2><p>当 你指定了一个块级元素时，并且为其定义了边框，设置了其宽度为100％。在移动设备开发过程中我们通常会对文本框定义为宽度100％，将其定义为块级 元 素以实现全屏自适应的样式，但此时你会发现，该元素的边框(左右)各1个像素会溢了文档，导致出现横向滚动条，为解决这一问题，我们可以为其添加一个 特殊 的样式<code>-webkit-box-sizing:border-box;</code>用来指定该盒子的大小包括边框的宽度。</p><h2 id="18-如何解决Android-2-0以下平台中圆角的问题"><a href="#18-如何解决Android-2-0以下平台中圆角的问题" class="headerlink" title="18.如何解决Android 2.0以下平台中圆角的问题"></a>18.如何解决Android 2.0以下平台中圆角的问题</h2><p>如果大家够细心的话，在做wap站点开发时，大家应该会发现android 2.0以下的平台中问题特别的多，比如说边框圆角这个问题吧。</p><p>在对一个元素定义圆角时，为完全兼容android 2.0以下的平台，我们必须要按照以下技巧来定义边框圆角：</p><p><code>-webkit</code>这个前缀必须要加上（在iOS中，你可以不加，但android中一定要加）；<br>如果对针对边框做样式定义，比如<code>border:1px solid #000;</code>那么<code>-webkit-border-radius</code>这属性必须要出现在border属性后。<br>假如我们有这样的视觉元素，左上角和右上角是圆角时，我们必须要先定义全局的(4个角的圆角值)<code>-webkit-border- radius:5px;</code> 然后再依次的覆盖左下角和右下角，<code>-webkit-border-bottom-left-radius:0;-webkit- border- bottom-right-border:0;</code>否则在android 2.0以下的平台中将全部显示直角，还有记住！<code>-webkit</code>这个前缀一定要加上！</p><h2 id="19-如何解决android平台中页面无法自适应"><a href="#19-如何解决android平台中页面无法自适应" class="headerlink" title="19.如何解决android平台中页面无法自适应"></a>19.如何解决android平台中页面无法自适应</h2><p>虽然你的html和css都是完全自适应的，但有一天如果你发现你的页面在android中显示的并不是自适应的时候，首先请你确认你的head标签中是否包含以下meta标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=”viewport” content=”width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0;” /&gt;</span><br></pre></td></tr></table></figure><p>如果有的话，那请你再仔细的看清楚有没有这个属性的值<code>width=device-width</code>，如果没有请立即加上吧！</p><h2 id="20-如何解决iOS-4-3版本中safari对页面中5位数字的自动识别和自动添加样式"><a href="#20-如何解决iOS-4-3版本中safari对页面中5位数字的自动识别和自动添加样式" class="headerlink" title="20.如何解决iOS 4.3版本中safari对页面中5位数字的自动识别和自动添加样式"></a>20.如何解决iOS 4.3版本中safari对页面中5位数字的自动识别和自动添加样式</h2><p>新的iOS系统也就是4.3版本，升级后对safari造成了一个bug：即使你添加了如下的meta标签，safari仍然会对页面中的5位连续的数字进行自动识别，并且将其重新渲染样式，也就是说你的css对该标签是无效的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=”format-detection” content=”telphone=no” /&gt;</span><br></pre></td></tr></table></figure><p>我们可以用一个比较龌龊的办法来解决。比如说支付宝wap站点中显示金额的标签，我们都做了如下改写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class=”t-balance”style=”background:none;padding:0;border:0;”&gt;95009.00&lt;/button&gt;元</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.25xt.com/html5css3/10261.html/comment-page-1">http://www.25xt.com/html5css3/10261.html/comment-page-1</a><br><a href="http://www.cnblogs.com/webapplee/p/3771716.html">http://www.cnblogs.com/webapplee/p/3771716.html</a></p>]]></content>
      
      
      <categories>
          
          <category> WebApp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手记 </tag>
            
            <tag> PPT </tag>
            
            <tag> WebApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序初印象【整理】</title>
      <link href="/article/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%8D%B0%E8%B1%A1%E3%80%90%E6%95%B4%E7%90%86%E3%80%91/"/>
      <url>/article/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%8D%B0%E8%B1%A1%E3%80%90%E6%95%B4%E7%90%86%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信小程序是什么"><a href="#微信小程序是什么" class="headerlink" title="微信小程序是什么"></a>微信小程序是什么</h1><p>『微信小程序』是微信即公众号之后推出的一项服务。</p><blockquote><p>我们提供了一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。    </p><p>—— 微信内测界面</p></blockquote><p>核心理念：</p><blockquote><p>小程序是一种不需要下载安装即可使用的应用，它实现了应用『触手可及』的梦想，用户扫一扫或搜一搜即可打开应用。也体现了『用完即走』的理念，用户不关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载。    </p><p>—— 张小龙</p></blockquote><span id="more"></span><p>另附ppt:<a href="https://sogrey.github.io/Wechat-app-ppt/index.html">github预览</a>，<a href="http://sogrey.coding.me/wechat-app-ppt">coding预览</a></p><p><a href="https://raw.githubusercontent.com/Sogrey/Wechat-app-ppt/master/example/youdao.zip">github下载实例demo</a>，<a href="https://coding.net/u/sogrey/p/wechat-app-ppt/git/raw/master/example/youdao.zip">coding下载实例demo</a></p><h1 id="微信小程序优缺点"><a href="#微信小程序优缺点" class="headerlink" title="微信小程序优缺点"></a>微信小程序优缺点</h1><p>优点：</p><ol><li>比传统的 Hybird 应用在操作体验上，它具有更快、更流畅的应用体验，摆脱混合应用对浏览器性能的依赖且能够调用系统原生接口，有一定的数据缓存能力。</li><li>比 React Native 类应用，更轻量级。</li><li>比 Native App ，则胜在开发周期短、投入成本低、使用便捷，且依托微信庞大的用户基础和粘性，可以迅速引流，验证产品模式和用户需求。</li></ol><p>缺点：</p><p>因为一些安全和其它方面的考虑，小程序的能力被限制，禁锢了小程序的能力。</p><ol><li>目前限制应用包大小为 1024 kb 。</li><li>微信开放接口 API 较少。</li><li>仅限于小应用的能力，想要实现复杂应用能力上还不足。</li><li>在多层级使用场景以及需要跳转类的需求上劣势明显。</li></ol><p>具体限制：</p><ol><li>不支持 HTML。WXML 语法与 HTML 有差异，CSS 选择器不支持级联。框架并非运行在浏览器中，所以 JavaScript 在 web 中一些能力都无法使用，如 document，window 等。</li><li>源码包大小不能超过 1M，单次request 传输数据最大 1M。</li><li>MINA 实现的 TabBar 最多 5 个 tab，wx.navigateTo 可推入后台的页面最多 5 层，超过则不能打开新界面。</li><li>没有 WebView ，自带 View 暂不支持图文混排。</li><li>不支持 A 标签，无法打开普通网页。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html">官方文档不可少</a></li><li><a href="http://www.jianshu.com/p/c9089483f761">微信小程序分析</a></li><li><a href="http://www.jianshu.com/p/aaef5ceb3936">微信小程序开发教程–从零开始</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手记 </tag>
            
            <tag> PPT </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webp的探究之路</title>
      <link href="/article/Webp%E7%9A%84%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%B7%AF/"/>
      <url>/article/Webp%E7%9A%84%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developers.google.com/speed/webp/">google官方</a>（需翻墙）</li><li><a href="https://en.wikipedia.org/wiki/WebP">维基百科</a></li><li><a href="https://isux.tencent.com/introduction-of-webp.html">WebP 探寻之路(腾讯)</a></li><li><a href="http://geek.csdn.net/news/detail/122393">WebP 原理和 Android 支持现状介绍</a></li><li><a href="http://webm.greatdreamers.cn/tags/webp/">WEBM 项目-开放的网络媒体项目</a></li><li><a href="http://www.csdn.net/tag/webp/download">webp工具源码下载</a></li><li><a href="http://www.cnblogs.com/season-huang/p/5804884.html">webp图片实践之路</a></li><li><a href="https://segmentfault.com/a/1190000005972143">【译】 WebP 支持：超出你想象</a></li><li><a href="http://www.itnose.net/detail/6323858.html">webp介绍与使用</a></li><li><a href="http://tech.qq.com/a/20140721/074637.htm">【资讯】WebP的故事：谷歌要统一互联网图片格式</a></li><li><a href="http://slides.faso.me/2014/webp/">faso</a></li></ul><p><a href="https://www.zhihu.com/question/27201061">https://www.zhihu.com/question/27201061</a></p><p><a href="https://isparta.github.io/compare-webp/index.html#12345">https://isparta.github.io/compare-webp/index.html#12345</a></p><p><a href="https://isparta.github.io/compare-webp/index_a.html#12">https://isparta.github.io/compare-webp/index_a.html#12</a></p><p><a href="https://zhuanlan.zhihu.com/p/23648251">https://zhuanlan.zhihu.com/p/23648251</a></p><p><a href="https://tech.upyun.com/article/252/WebP%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html">https://tech.upyun.com/article/252/WebP%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html</a></p><p><a href="http://pic.zhaoxi.net/">http://pic.zhaoxi.net/</a></p>]]></content>
      
      
      <categories>
          
          <category> Webp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android中使用icon fonts字体图标</title>
      <link href="/article/android%E4%B8%AD%E4%BD%BF%E7%94%A8icon-fonts%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/"/>
      <url>/article/android%E4%B8%AD%E4%BD%BF%E7%94%A8icon-fonts%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>IconFont字体不仅仅流行于Web开发，在移动开发中也渐渐的使用的范围更广泛。这篇文章主要介绍了在Android开发中使用icon font的代码和方法。</p></blockquote><span id="more"></span><h1 id="1-Icon-fonts介绍"><a href="#1-Icon-fonts介绍" class="headerlink" title="1 Icon fonts介绍"></a>1 Icon fonts介绍</h1><p>对于可缩放的自适应设计来讲，Icon fonts是一种惊人的解决方案。</p><p>在开发native app时，你应该记住icon fonts技术有多项超过位图的高级特性，这些特性所带来的好处会影响你的设计工作流，以及产品的最终品质。</p><p><strong>可缩放性（Scalability）：</strong></p><p>基于字体的icon是与分辨率无关并能缩放到任何想要程度的技术。你的图标看起来毫不关心retina,HDPI,XHDPI等等屏幕，但渲染时会根据目标设备自动调整，你将有能力应对任何当下，未来，或大多数任意规格的设备</p><p><strong>尺寸（Size ）：</strong></p><p>裁剪到正确的比例，icon font的文件的大小要比起位图小到难以置信的程度，使用icon font时，你不需要根据不同设备准备不同的图片，你的APP只需要在启动时加载一次icon font文件即可。</p><p><strong>可维护性（ Maintainability ）：</strong></p><p>自你的icon打包进一个字体文件，在项目自始至终你仅需要维护这个单一的字体文件。</p><p>通过管理字体文件你可以很自然的组织你的icon集合，任意的进行修改或扩展</p><p><strong>可推广性（Adoption）：</strong></p><p>然而，应用这样的icon fonts可能会影响你和你同事之间的工作流程，但说服让他们采用这样的技术也非常简单，有数款免费或收费的工具帮你轻松达到目的并能看到很好的应用结果，在几乎任意（手机）移动平台、浏览器或操作系统</p><p><strong>灵活性（Flexibility）：</strong></p><p>应用icon fonts技术中最有意义的一项能力是可以操纵icon fonts， 改变颜色，大小，仅仅几行代码就可以在瞬间改变外观</p><p><strong>可交互性(Interactivity)：</strong></p><p>由于灵活性以及能够通过代码方便的操纵，icon fonts 是独一无二的在运行时被操纵，通过应用icon fonts技术， 你能轻松的在不同状态显示对应的不同效果，创建动画。</p><h1 id="2-Icon-fonts优缺点"><a href="#2-Icon-fonts优缺点" class="headerlink" title="2 Icon fonts优缺点"></a>2 Icon fonts优缺点</h1><p>字体图标是指将图标做成字体文件（.ttf），从而代替传统的png等图标资源。<br>使用字体图标的优点和缺点分别为：<br>优点： </p><pre><code>  1. 可以高度自定义图标的样式（包括大小和颜色)，对于个人开发者尤其适用   2. 可以减少项目和安装包的大小（特别你的项目中有很多图片icon时，效果将是M级）   3. 几乎可以忽略屏幕大小和分辨率，做到更好的适配  4. 使用简单   …… </code></pre><p>缺点： </p><pre><code>  1. 只能是一些简单的icon，不能代替如背景图、9图等资源   2. 一些需要文字说明的icon，图片资源将会是更好的选择   3. 对设计的要求更高，不同icon可能拥有不同的边距，这时要切换icon时还要设置大小   4. 由于边距的存在可能存在无法填满控件的情况   5. 无法在Android studio中进行实时预览</code></pre><p>iconfont对于客户端应用来说有很多便捷：</p><pre><code>  1. 自由变化大小  2. 自由修改颜色  3. 可以添加一些视觉效果如：阴影、旋转、透明度。  4. 比单位的图片更节省资源</code></pre><h1 id="3-获取字体文件"><a href="#3-获取字体文件" class="headerlink" title="3 获取字体文件"></a>3 获取字体文件</h1><p>icon font字体文件来源很多，我这里列出两个（在文章尾<a href="#%E5%8F%82%E8%80%83">参考#字体图标库</a>）。</p><p>这里以<a href="http://fontawesome.io/cheatsheet/">http://fontawesome.io/cheatsheet/</a>为例，其github仓库是<a href="https://github.com/FortAwesome/Font-Awesome/">https://github.com/FortAwesome/Font-Awesome/</a>,我们的字体文件就是从<a href="https://github.com/FortAwesome/Font-Awesome/blob/master/fonts/fontawesome-webfont.ttf">这里获取</a>，获取到的字体文件是以<code>.ttf</code>为后缀的字体文件。</p><h1 id="4-在Android项目中使用"><a href="#4-在Android项目中使用" class="headerlink" title="4 在Android项目中使用"></a>4 在Android项目中使用</h1><h2 id="4-1-新建Android项目"><a href="#4-1-新建Android项目" class="headerlink" title="4.1 新建Android项目"></a>4.1 新建Android项目</h2><p>打开Android studio新建一个Android项目，我新建一个包名为<code>org.sogrey.iconfont.demo</code>的应用，具体新建步骤就不赘述了。另再新建一个Module包名为<code>org.sogrey.iconfont</code>的库应用，结构如下：<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-17_001301.jpg" alt="新建Android项目"></p><h2 id="4-2-在库应用中引入-ttf字体"><a href="#4-2-在库应用中引入-ttf字体" class="headerlink" title="4.2 在库应用中引入.ttf字体"></a>4.2 在库应用中引入<code>.ttf</code>字体</h2><p>在库应用中引入<code>.ttf</code>字体，放在<code>assets</code>文件夹下，新建java类<code>IconFontTextView</code>继承自<code>android.widget.TextView</code>,结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-17_002541.jpg" alt="在库应用中引入`.ttf`字体"></p><p>IconFontTextView.java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.iconfont;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Typeface;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适用于fontawesome的字体TextView</span></span><br><span class="line"><span class="comment"> * Created by Sogrey on 2017/1/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IconFontTextView</span> <span class="keyword">extends</span> <span class="title class_">TextView</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IconFontTextView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IconFontTextView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, attrs,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IconFontTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="type">Typeface</span> <span class="variable">iconfont</span> <span class="operator">=</span> Typeface.createFromAsset(context.getAssets(), <span class="string">&quot;fontawesome-webfont.ttf&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setTypeface(iconfont);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-在Application中使用"><a href="#4-3-在Application中使用" class="headerlink" title="4.3 在Application中使用"></a>4.3 在Application中使用</h2><p>下面就正式来使用icon font了，在app的build.gradle中引用刚刚的IconFont库：</p><pre><code>compile project(&#39;:lib_iconfont&#39;)</code></pre><p>activity_main.xml布局中放几个<code>IconFontTextView</code>,其string属性设置为以<code>&amp;#</code>开头的字符串，以通讯录图标为例:</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-17_003852.jpg" alt="通讯录图标icon font"></p><p>前面的图标就是最终要实现的效果，<code>fa-address-book</code>用在html标签的class类属性中，而我们要用的是后面放括弧中的<code>&amp;#xf2b9;</code>。</p><p>xml布局文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">org.sogrey.iconfont.IconFontTextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/text1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;<span class="symbol">&amp;#xf2b9;</span> 通讯录&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>编译运行即可看到效果。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-17_005941.jpg" alt="运行效果"></p><p>预览一下全部图标：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-17_010816.jpg" alt="预览一下全部图标"></p><p>附：在<a href="https://icomoon.io/app">https://icomoon.io/app</a>可定制你需要的图标打包成字体文件下载引用，具体方法可参考<a href="http://blog.csdn.net/ruihanchen/article/details/50032841">如何在Android使用图标字体？</a>。</p><p>demo看<a href="https://github.com/Sogrey/IconFontTextView">这里</a>，Good luck!</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>字体图标库</p><ul><li><a href="http://fontawesome.io/cheatsheet/">http://fontawesome.io/cheatsheet/</a></li><li><a href="https://icomoon.io/app">https://icomoon.io/app</a></li></ul><p>参考</p><ul><li><a href="http://www.tuicool.com/articles/Mn2ARv">如何在移动端app中应用字体图标icon fonts</a></li><li><a href="http://www.jb51.net/article/94880.htm">Android中正确使用字体图标(iconfont)的方法</a></li><li><a href="http://blog.csdn.net/ruihanchen/article/details/50032841">如何在Android使用图标字体？</a></li><li><a href="http://www.weste.net/2013/12-13/94695.html">在Android开发中使用icon font的代码和方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> icon font字体图标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android混淆签名(上)</title>
      <link href="/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>代码混淆，是将计算机程序的代码转换成一种功能上等价，但是难于阅读和理解的形式的行为。代码混淆可以用于程序源代码，也可以用于程序编译而成的中间代码。执行代码混淆的程序被称作代码混淆器。目前已经存在许多种功能各异的代码混淆器。</p><p>代码混淆的主要目的是为了保护源代码，阻止反向工程。反向工程会带来许多问题，诸如知识产权泄露，程序弱点暴露易受攻击等。使用即时编译技术的语言，如Java、C#所编写的程序更容易受到反向工程的威胁。<a href="http://blog.csdn.net/hongshan50/article/details/22746703">1</a></p><p>签名移步<a href="https://sogrey.github.io/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8B%EF%BC%89/">签名</a></p></blockquote><span id="more"></span><h1 id="1-混淆"><a href="#1-混淆" class="headerlink" title="1 混淆"></a>1 混淆</h1><h2 id="1-1-混淆介绍"><a href="#1-1-混淆介绍" class="headerlink" title="1.1 混淆介绍"></a>1.1 混淆介绍</h2><p>首先先简单说一下什么是混淆和混淆的作用，其实这个搜索下可以找到一堆官方的说法等等，这里简单口语叙述一下，混淆就是把代码替换成a、b、c基本字母组成的代码，比如一个方法名为：function()，混淆后可能会被替换成a()。</p><p>混淆的好处：</p><ul><li>代码混淆后阅读性降低，反编译后破译程序难度提高</li><li>混淆后字节数减少，减少了应用了体积</li></ul><p>前者只能说有一点作用，后者则需要看代码的数量。</p><p>当然不能忽视混淆的缺点：混淆后，测试不充分可能导致某些功能不能使用</p><h2 id="1-2-Eclipse混淆和Android-Studio混淆"><a href="#1-2-Eclipse混淆和Android-Studio混淆" class="headerlink" title="1.2 Eclipse混淆和Android Studio混淆"></a>1.2 Eclipse混淆和Android Studio混淆</h2><p><strong>Eclipse</strong></p><p>首先打开“project.properties”文件，然后在文件中添加一行：</p><pre><code>proguard.config=$&#123;sdk.dir&#125;/tools/proguard/proguard-android.txt:proguard-project.txt</code></pre><p>文件中之前就有一行，不过是被注释掉了。</p><p>在release打包时就会按照我们的配置进行混淆，注意，在我们平时的debug时是不会进行混淆的。</p><p><strong>Android Studio</strong></p><p>在build.gradle中进行配置</p><pre><code>android &#123;    buildTypes &#123;        release &#123;            minifyEnabled true //true 表示开启混淆            proguardFiles getDefaultProguardFile（&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;            //proguardFile &#39;some-other-rules.txt&#39;  配置单个文件这样        &#125;    &#125;&#125;</code></pre><h2 id="1-3-混淆步骤"><a href="#1-3-混淆步骤" class="headerlink" title="1.3 混淆步骤"></a>1.3 混淆步骤</h2><ol><li>shrink： 去掉无用代码</li><li>optimize：优化代码（静态化，内联，无用参数去除等。。）</li><li>obfuscate：混淆，给类、变量、方法改名字</li><li>preverify：预效验</li></ol><h2 id="1-4-混淆规则"><a href="#1-4-混淆规则" class="headerlink" title="1.4 混淆规则"></a>1.4 混淆规则</h2><p><a href="https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html">混淆规则文档</a></p><p><strong>优化控制</strong></p><p>这个是用于控制混淆是否开启优化代码，例如一些if/else语句可以被简化等这些操作：</p><pre><code># 不优化-dontoptimize # 代码循环优化次数，0-7，默认为5-optimizationpasses 5</code></pre><p><strong>优化进阶</strong></p><p>开启优化后可以设置下面的规则，assumenosideeffects表示指定的代码无效，可以优化，最终效果表现为不执行。    </p><pre><code># 混淆时所采用的优化规则-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*# 关闭log-assumenosideeffects class android.util.Log &#123;    public static boolean isLoggable(java.lang.String, int);    public static int v(...);    public static int i(...);    public static int w(...);    public static int d(...);    public static int e(...);&#125;</code></pre><p><strong>基本混淆规则</strong></p><p>下面这些一般混淆规则都要加入，其中前两个在默认文件中已经配置</p><pre><code># 包名不使用大小写混合 aA Aa-dontusemixedcaseclassnames # 不混淆第三方引用的库-dontskipnonpubliclibraryclasses # 不做预校验-dontpreverify # 忽略警告-ignorewarning</code></pre><p><strong>输出混淆记录</strong></p><p>混淆后由于阅读困难性提高，所以为了方便自己查阅，可以输出mapping对应文件，可以利用AndroidSDK\tools\proguard\bin中的proguardgui.bat打开混淆工具，利用retrace结合mapping和stacktrace调试遇到的错误</p><pre><code># 混淆后生产映射文件 map 类名-&gt;转化后类名的映射# 存放在app\build\outputs\mapping\release中-verbose # 混淆前后的映射-printmapping mapping.txt # apk 包内所有 class 的内部结构-dump class_files.txt # 未混淆的类和成员-printseeds seeds.txt # 列出从 apk 中删除的代码-printusage unused.txt</code></pre><p><strong>保留源代码行号</strong></p><p>即使使用retrace工具，还是很难定位到错误的时候，可以暂时先保留行号，观察错误修改后再关闭掉</p><pre><code># 抛出异常时保留代码行号# 这个最后release的时候关闭掉-keepattributes SourceFile,LineNumberTable</code></pre><p><strong>组件白名单”&gt;基本组件白名单</strong></p><p>Android中的基本组件不能混淆，为了方便，下面提供了兼容性比较高的规则：</p><pre><code>-keep public class * extends android.app.Fragment-keep public class * extends android.app.Activity-keep public class * extends android.app.Application-keep public class * extends android.app.Service-keep public class * extends android.content.BroadcastReceiver-keep public class * extends android.content.ContentProvider-keep public class * extends android.app.backup.BackupAgentHelper-keep public class * extends android.preference.Preference</code></pre><p><strong>Support包规则</strong></p><pre><code># 如果有引用v4包可以添加下面这行-keep public class * extends android.support.v4.app.Fragment # 如果引用了v4或者v7包-dontwarn android.support.**</code></pre><p><strong>不混淆本地方法</strong></p><p>本地方法不能混淆，这个规则在默认配置文件中有：</p><pre><code># 保持 native 方法不被混淆-keepclasseswithmembernames class * &#123;    native &lt;methods&gt;;&#125;</code></pre><p><strong>WebView混淆规则</strong></p><p>使用了WebView的JS功能则开启下面规则，这个规则在自定义规则文件中已经用注释说明了：</p><pre><code># WebView使用javascript功能则需要开启-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;    public *;&#125;</code></pre><p><strong>注解、泛型和反射混淆</strong></p><pre><code># 保护注解-keepattributes *Annotation*-keep class * extends java.lang.annotation.Annotation &#123;*;&#125; # 泛型与反射-keepattributes Signature-keepattributes EnclosingMethod&lt;/code&gt;</code></pre><p>有些注解可能不能被混淆，需要手动混淆一下</p><p><strong>内部类混淆</strong></p><pre><code># 不混淆内部类-keepattributes InnerClasses&lt;/code&gt;</code></pre><p><strong>部分第三方混淆参考规则</strong></p><p>Gson</p><pre><code># gson-dontwarn com.google.**-keep class com.google.gson.** &#123;*;&#125;</code></pre><p>otto</p><pre><code># otto混淆规则-keepattributes *Annotation*-keepclassmembers class ** &#123;    @com.squareup.otto.Subscribe public *;    @com.squareup.otto.Produce public *;&#125;</code></pre><p>universal-image-loader</p><pre><code>-dontwarn com.nostra13.universalimageloader.**-keep class com.nostra13.universalimageloader.** &#123;*;&#125;</code></pre><p>友盟统计</p><pre><code># 友盟统计-keepclassmembers class * &#123;    public &lt;init&gt; (org.json.JSONObject);&#125; # 友盟统计5.0.0以上SDK需要-keepclassmembers enum * &#123;    public static **[] values();    public static ** valueOf(java.lang.String);&#125; # 友盟统计R.java删除问题-keep public class com.gdhbgh.activity.R$*&#123;    public static final int *;&#125;</code></pre><p>OkHttp</p><pre><code># OkHttp-dontwarn com.squareup.okhttp.**-keep class com.squareup.okhttp.** &#123;*;&#125;-keep interface com.squareup.okhttp.** &#123;*;&#125;-dontwarn okio.**&lt;/code&gt;</code></pre><p>nineoldandroids</p><pre><code>-dontwarn com.nineoldandroids.*-keep class com.nineoldandroids.** &#123;*;&#125;</code></pre><p>支付宝</p><pre><code># 支付宝-keep class com.alipay.android.app.IAlixPay&#123;*;&#125;-keep class com.alipay.android.app.IAlixPay$Stub&#123;*;&#125;-keep class com.alipay.android.app.IRemoteServiceCallback&#123;*;&#125;-keep class com.alipay.android.app.IRemoteServiceCallback$Stub&#123;*;&#125;-keep class com.alipay.sdk.app.PayTask&#123;    public *;&#125;-keep class com.alipay.sdk.app.AuthTask&#123;    public *;&#125;</code></pre><p>Socket.io</p><pre><code># socket.io-keep class socket.io-client.-keepclasseswithmembers,allowshrinking class socket.io-client.* &#123;*;&#125;-keep class io.socket.-keepclasseswithmembers,allowshrinking class io.socket.* &#123;*;&#125;</code></pre><p>JPUSH</p><pre><code># jpush-dontwarn cn.jpush.**-keep class cn.jpush.** &#123;*;&#125; # protobuf（jpush依赖）-dontwarn com.google.**-keep class com.google.protobuf.** &#123;*;&#125;</code></pre><p>友盟分享</p><p>这个只有部分热门的SDK，具体可以参考分享文档：</p><pre><code># 友盟分享-dontwarn com.umeng.**-dontwarn com.tencent.weibo.sdk.** -keep public interface com.tencent.**-keep public interface com.umeng.socialize.**-keep public interface com.umeng.socialize.sensor.**-keep public interface com.umeng.scrshot.** -keep public class com.umeng.socialize.* &#123;*;&#125; -keep class com.umeng.scrshot.**-keep public class com.tencent.** &#123;*;&#125;-keep class com.umeng.socialize.sensor.**-keep class com.umeng.socialize.handler.**-keep class com.umeng.socialize.handler.*-keep class com.tencent.mm.sdk.modelmsg.WXMediaMessage &#123;*;&#125;-keep class com.tencent.mm.sdk.modelmsg.** implements com.tencent.mm.sdk.modelmsg.WXMediaMessage$IMediaObject &#123;*;&#125; -keep class im.yixin.sdk.api.YXMessage &#123;*;&#125;-keep class im.yixin.sdk.api.** implements im.yixin.sdk.api.YXMessage$YXMessageData&#123;*;&#125; -keep class com.tencent.** &#123;*;&#125;-dontwarn com.tencent.**-keep public class com.umeng.soexample.R$*&#123;    public static final int *;&#125;-keep class com.tencent.open.TDialog$*-keep class com.tencent.open.TDialog$* &#123;*;&#125;-keep class com.tencent.open.PKDialog-keep class com.tencent.open.PKDialog &#123;*;&#125;-keep class com.tencent.open.PKDialog$*-keep class com.tencent.open.PKDialog$* &#123;*;&#125; -keep class com.sina.** &#123;*;&#125;-dontwarn com.sina.**-keep class  com.alipay.share.sdk.** &#123;*;&#125;</code></pre><h2 id="1-5-混淆模板"><a href="#1-5-混淆模板" class="headerlink" title="1.5 混淆模板"></a>1.5 混淆模板</h2><p>参见<a href="https://github.com/Sogrey/notes/blob/master/%E6%B7%B7%E6%B7%86%E6%A8%A1%E6%9D%BF.md">这里</a></p><h2 id="1-6-填混淆的坑"><a href="#1-6-填混淆的坑" class="headerlink" title="1.6 填混淆的坑"></a>1.6 填混淆的坑</h2><p><strong>网络层混淆</strong></p><p>混淆要注意，一般网络层都不进行混淆，可以经过划分包后直接不混淆网络层的包：</p><pre><code>-keep class com.xxx.xxx.http.** &#123;*;&#125;&lt;/code&gt;</code></pre><p><strong>数据模型混淆</strong></p><p>所有bean都不要混淆，可以使用下面的：</p><pre><code>-keep class * implements java.io.Serializable &#123;*;&#125;-keepclassmembers class * implements java.io.Serializable &#123;*;&#125;</code></pre><p>但是有时候上述代码可能导致应用卡住，没用任何错误提示，所以我建议采用分包模式，把所有bean放在一个包中，直接对该包加白名单：</p><pre><code>-keep class com.xxx.xxx.domain.** &#123;*;&#125;</code></pre><p><strong>XML映射问题</strong></p><p>如果你遇到一些控件无法Inflate，报NullPointException，比如ListView，NavigationView等等，这个问题花了我几个小时自己研究出了规则：</p><pre><code>-keep class org.xmlpull.v1.** &#123;*;&#125;</code></pre><p><strong>混淆规则编写方法</strong></p><p>如果混淆后报错，通过retrace后找到错误的问题后可以直接编写规则来去掉混淆，但是如果报的错误莫名其妙，而且报错的类没有混淆，那么你可以采用极端的方法，加入下面规则：</p><pre><code>-keep class *.** &#123;*;&#125;</code></pre><p>这条规则表示不混淆所有类及其中所有代码，加了这条规则之后，<br>还不能运行表示是其他问题，例如注解，内部类等等，<br>可以运行后，可以通过反编译，寻找所有包名，记录下来，把上述规则改为：</p><pre><code>-keep class android.** &#123;*;&#125;-keep class com.** &#123;*;&#125;-keep class io.** &#123;*;&#125;-keep class org.** &#123;*;&#125;...</code></pre><p>一个个去掉检查是否有报错，例如查到</p><pre><code>-keep class com.** &#123;*;&#125;</code></pre><p>加了就不报错，则可以继续一级级往下检查。</p><blockquote><p>签名移步<a href="https://sogrey.github.io/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8B%EF%BC%89/">签名</a></p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html">混淆规则文档</a></li><li><a href="http://www.2cto.com/kf/201607/530170.html">Android混淆心得</a></li><li><a href="http://www.cnblogs.com/cr330326/p/5534915.html">ProGuard代码混淆技术详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> apk混淆 </tag>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android混淆签名(下)</title>
      <link href="/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>混淆移步<a href="https://sogrey.github.io/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8A%EF%BC%89/">混淆</a></p><p>每个发布的应用都有自己的一个唯一合法的ID，这个就是应用自身的签名，签名可以保证你软件升级的一致性，使用相同签名的应用可以实现覆盖安装，而不一致的签名将无法共享使用数据，也即是无法覆盖安装，这样可以防止别人篡改，盗用开发者的应用，造成对开发者利益的损害。那么如何为自己的应用进行签名呢？<a href="http://blog.sina.com.cn/s/blog_694394d30102vp3i.html">1</a></p></blockquote><span id="more"></span><h1 id="2-apk签名"><a href="#2-apk签名" class="headerlink" title="2 apk签名"></a>2 apk签名</h1><p>APK签名之两步走：</p><ol><li>创建一个key</li><li>使用步骤1中产生的key对apk签名</li></ol><h2 id="2-1-签名文件生成"><a href="#2-1-签名文件生成" class="headerlink" title="2.1 签名文件生成"></a>2.1 签名文件生成</h2><h3 id="2-1-1-命令行生成签名文件"><a href="#2-1-1-命令行生成签名文件" class="headerlink" title="2.1.1 命令行生成签名文件"></a>2.1.1 命令行生成签名文件</h3><p>创建key，需要用到java的keytool.exe工具(该工具位于java环境的安装目录下jdk1.6.0_24jrebin，不同jdk版本可能略有差异)，使用产生的key对apk签名用到的是jarsigner.exe (位于安装目录下的jdk1.6.0_24bin)，如果你正确安装了java环境，并配置了正解的环境变量，那么你可以直接打开运行命令窗口输入</p><pre><code>C:\Users\Sogrey&gt;keytool -genkey -alias demo.keystore -keyalg RSA -validity 40000 -keystore demo.keystore</code></pre><p>说明： <code>-genkey</code> 产生密钥<br><code>-alias demo.keystore</code> key的别名 demo.keystore<br><code>-keyalg RSA</code> 使用RSA算法对签名加密<br><code>-validity 40000</code> 证书有效期限4000天<br><code>-keystore demo.keystore</code> 生成key的存放路径，你可以生成到指定路径（例如：D:\demo.keystore 在D盘根目录生成key文件，文件名为demo.keystor，如果不指定绝对路径将在当前cmd所在目录生成key文件）,当前我的签名文件就保存在 <code>C:\Users\Sogrey</code> 目录下。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_221026.jpg" alt="命令行生成签名文件"></p><h3 id="2-1-2-Eclipse生成签名文件"><a href="#2-1-2-Eclipse生成签名文件" class="headerlink" title="2.1.2 Eclipse生成签名文件"></a>2.1.2 Eclipse生成签名文件</h3><p>参见我早期的<a href="http://blog.sina.com.cn/s/blog_694394d30102w4i9.html">另一篇</a>。</p><h3 id="2-1-3-Android-studio生成签名文件"><a href="#2-1-3-Android-studio生成签名文件" class="headerlink" title="2.1.3 Android studio生成签名文件"></a>2.1.3 Android studio生成签名文件</h3><p>Android studio 生成签名文件与Eclipse类似，菜单Build-&gt;Generate Signed APK ，<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/%E5%9B%BE%E7%89%871.jpg" alt="Android studio生成签名文件"></p><p>弹出下面对话框：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_223909.jpg" alt="Android studio生成签名文件"></p><p>点击<code>Create new...</code>,弹出下面对话框：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_224524.jpg" alt="Android studio生成签名文件"></p><p>其中：</p><pre><code>Key store path：密钥库文件的地址 Password/Confirm：密钥库的密码 Key：   Alias：密钥名称   Password/Confirm：密钥密码   Validity(years)：密钥有效时间   First and Last Name：密钥颁发者姓名   Organizational Unit：密钥颁发组织   City or Locality：城市   Country Code(XX)：国家 </code></pre><p>点击<code>ok</code>,便可生成签名文件，文件路径为上面填写的<code>Key store path</code>。</p><h2 id="2-2-签名apk"><a href="#2-2-签名apk" class="headerlink" title="2.2 签名apk"></a>2.2 签名apk</h2><h3 id="2-2-1-命令行签名apk文件"><a href="#2-2-1-命令行签名apk文件" class="headerlink" title="2.2.1 命令行签名apk文件"></a>2.2.1 命令行签名apk文件</h3><pre><code>C:\Users\Sogrey&gt; jarsigner -verbose -keystore demo.keystore -signedjar demo_signed.apk demo.apk demo.keystore</code></pre><p>说明： <code>-verbose</code> 输出签名的详细信息<br><code>-keystore demo.keystore</code> 使用key的绝对路径，就是在第一步中生成的key<br><code>-signedjar demor_signed.apk demo.apk demo.keystore</code> 正式签名，三个参数中依次为签名后产生的文件demo_signed，要签名的文件demo.apk和密钥库demo.keystore<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_222555.jpg" alt="命令行签名apk文件"><br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_222730.jpg" alt="命令行签名apk文件"></p><h3 id="2-2-2-Eclipse签名apk文件"><a href="#2-2-2-Eclipse签名apk文件" class="headerlink" title="2.2.2 Eclipse签名apk文件"></a>2.2.2 Eclipse签名apk文件</h3><p>参见<a href="http://blog.sina.com.cn/s/blog_694394d30102w4i9.html">早期文章</a></p><h3 id="2-2-3-Android-studio签名apk文件"><a href="#2-2-3-Android-studio签名apk文件" class="headerlink" title="2.2.3 Android studio签名apk文件"></a>2.2.3 Android studio签名apk文件</h3><p>菜单Build-&gt;Generate Signed APK,弹出框中选择<code>Choose existing...</code>,选择以创建好的签名文件。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_223909.jpg" alt="Android studio生成签名文件"></p><p>输入<code>Key store password</code>,点击<code>Key alias</code>后面的<code>...</code>选择别名，再次输入别名密码，点击<code>next</code>,选择签名为debug还是release.点击<code>finish</code>即可签名完成。</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_225717.jpg"><br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_230129.jpg"></p><h1 id="3-查看签名"><a href="#3-查看签名" class="headerlink" title="3 查看签名"></a>3 查看签名</h1><h2 id="3-1-查看签名文件信息"><a href="#3-1-查看签名文件信息" class="headerlink" title="3.1 查看签名文件信息"></a>3.1 查看签名文件信息</h2><pre><code>$ keytool -list -keystore debug.keystore </code></pre><p>结果：<br>    C:\Users\Sogrey\Desktop&gt;keytool -list -keystore demo.jks<br>    输入密钥库口令:</p><pre><code>密钥库类型: JKS密钥库提供方: SUN您的密钥库包含 1 个条目demo, 2017-1-13, PrivateKeyEntry,证书指纹 (SHA1): 5D:2B:A2:05:8F:36:74:9C:F7:B4:A7:48:32:54:9B:6D:6C:9C:D7:9C</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_230705.jpg"></p><h2 id="3-2-查看apk签名信息"><a href="#3-2-查看apk签名信息" class="headerlink" title="3.2 查看apk签名信息"></a>3.2 查看apk签名信息</h2><p>用winrar打开待查看的apk，将其中<code>META-INF</code>文件夹解压出来，得到其中的<code>CERT.RSA</code>文件</p><pre><code>$ keytool -printcert -file META-INF/CERT.RSA</code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-13_231453.jpg"></p><h1 id="4-签名apk压缩"><a href="#4-签名apk压缩" class="headerlink" title="4 签名apk压缩"></a>4 签名apk压缩</h1><p>签名之后，用zipalign(压缩对齐)优化你的APK文件。未签名的apk不能使用，也不能优化。签名之后的apk谷歌推荐使用zipalign.exe(位于android-sdk-windowstools目录下)工具对其优化：</p><pre><code>C:\Users\Sogrey&gt; zipalign -v 4 demo_signed.apk final.apk</code></pre><p>这样，zipalign能够使apk文件中未压缩的数据在4个字节边界上对齐（一般4个字节是一个性能很好的值），这样android系统就可以使用mmap()(请自行查阅这个函数的用途)函数读取文件，可以在读取资源上获得较高的性能，</p><p>PS:</p><ol><li>在4个字节边界上对齐的意思就是指编译器把4个字节作为一个单位来进行读取的数据资源，因此，CPU能够对变量进行较之前不对齐更高效、快速的访问。</li><li>对齐的根源：android系统中的Davlik虚拟机使用自己专有的格式DEX，DEX的结构是紧凑的，为了让运行时的性能更好，可以进一步用”对齐”进一步优化，但是大小一般会有所增加。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.sina.com.cn/s/blog_694394d30102vp3i.html">android应用之——为自己的apk签名 </a></li><li><a href="http://blog.csdn.net/wed110/article/details/38303637">查看APK的签名的方法</a></li><li><a href="http://www.360doc.com/content/14/0908/05/9200790_407757027.shtml">Android如何查看应用签名信息–微信平台开发应用的签名</a></li><li><a href="http://janrone.com/2015/12/29/%E6%9F%A5%E7%9C%8Bapk%E7%AD%BE%E5%90%8D-%E5%92%8C-keystore-%E7%9A%84%E4%BF%A1%E6%81%AF/">查看apk签名 和 keystore 的信息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> apk混淆 </tag>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我收集的一些开源项目</title>
      <link href="/article/%E6%88%91%E6%94%B6%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
      <url>/article/%E6%88%91%E6%94%B6%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这交互炸了:一分钟让你拥有微信拖拽透明返回PhotoView<br><a href="http://mp.weixin.qq.com/s/dW6t1hoVl_mqPx6mO_Tssg">http://mp.weixin.qq.com/s/dW6t1hoVl_mqPx6mO_Tssg</a><br>高仿微信可拖拽返回PhotoView<br><a href="https://github.com/githubwing/DragPhotoView">https://github.com/githubwing/DragPhotoView</a><br><a href="https://github.com/chrisbanes/PhotoView">https://github.com/chrisbanes/PhotoView</a></p><p>《云阅》一个仿网易云音乐UI，使用Gank.Io及豆瓣Api开发的开源项目<br><a href="http://mp.weixin.qq.com/s/jsDov5TFGO2DBywZ8QHlYQ">http://mp.weixin.qq.com/s/jsDov5TFGO2DBywZ8QHlYQ</a><br><a href="https://github.com/youlookwhat/CloudReader">https://github.com/youlookwhat/CloudReader</a></p><p>Android如何实现茄子快传<br><a href="https://mp.weixin.qq.com/s/V_KH5hlRXMP1WKLsw7uMww">https://mp.weixin.qq.com/s/V_KH5hlRXMP1WKLsw7uMww</a><br><a href="https://github.com/mayubao/KuaiChuan">https://github.com/mayubao/KuaiChuan</a></p><span id="more"></span><p>==========================</p><p>//Android 开源项目分类<br><a href="https://github.com/Trinea/android-open-project/tree/master/%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E7%89%88">https://github.com/Trinea/android-open-project/tree/master/%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E7%89%88</a></p><p>//GitHub 优秀的 Android 开源项目<br><a href="http://www.open-open.com/lib/view/open1416808977430.html#articleHeader11">http://www.open-open.com/lib/view/open1416808977430.html#articleHeader11</a></p><p>2016Android开源项目及库汇总<br><a href="http://www.jianshu.com/p/f498179798b5">http://www.jianshu.com/p/f498179798b5</a></p><p>//泡在网上的日子<br><a href="http://www.jcodecraeer.com/a/opensource/2016/0121/3903.html">http://www.jcodecraeer.com/a/opensource/2016/0121/3903.html</a></p><p>//MVP例子集锦<br><a href="https://github.com/wenzhihao123/Android-rxjava-retrofit-okhttp-app">https://github.com/wenzhihao123/Android-rxjava-retrofit-okhttp-app</a></p><p><a href="https://gold.xitu.io/entry/585ba05561ff4b0058041f6b/view">https://gold.xitu.io/entry/585ba05561ff4b0058041f6b/view</a></p><p><a href="https://github.com/saiwu-bigkoo/Android-PickerView">https://github.com/saiwu-bigkoo/Android-PickerView</a><br>//模仿微信图片点击全屏效果<br><a href="http://www.apkbus.com/thread-267329-1-1.html">http://www.apkbus.com/thread-267329-1-1.html</a></p><p>//第三方刷新库<br><a href="http://gold.xitu.io/entry/570f716a1ea493006b5ecfbb">http://gold.xitu.io/entry/570f716a1ea493006b5ecfbb</a></p><p>GitHub地址：<a href="https://github.com/Aspsine/SwipeToLoadLayout">https://github.com/Aspsine/SwipeToLoadLayout</a><br>GitHub地址：<a href="https://github.com/cymcsg/UltimateRecyclerView">https://github.com/cymcsg/UltimateRecyclerView</a><br>GitHub地址：<a href="https://github.com/Aspsine/IRecyclerView">https://github.com/Aspsine/IRecyclerView</a><br>GitHub地址：<a href="https://github.com/WuXiaolong/PullLoadMoreRecyclerView">https://github.com/WuXiaolong/PullLoadMoreRecyclerView</a><br>GitHub地址：<a href="https://github.com/cundong/HeaderAndFooterRecyclerView">https://github.com/cundong/HeaderAndFooterRecyclerView</a></p><p><a href="https://github.com/tuesda/CircleRefreshLayout">https://github.com/tuesda/CircleRefreshLayout</a></p><p><a href="https://github.com/imallan/JellyRefreshLayout">https://github.com/imallan/JellyRefreshLayout</a></p><p>PullableLayout可以很容易地拉至加载功能添加到您的应用程序的顶部，左侧，底部和右侧<br><a href="https://github.com/zongren/PullableLayout">https://github.com/zongren/PullableLayout</a></p><p>一个牛逼的刷新控件TwinklingRefreshLayout<br><a href="https://github.com/lcodecorex/TwinklingRefreshLayout">https://github.com/lcodecorex/TwinklingRefreshLayout</a></p><p>//XRecyclerView<br><a href="http://www.see-source.com/androidwidget/detail.html?wid=587">http://www.see-source.com/androidwidget/detail.html?wid=587</a></p><p>//Added Load More to Ultra Pull to Refresh for Android. Support all the views.<br><a href="https://github.com/captainbupt/android-Ultra-Pull-To-Refresh-With-Load-More">https://github.com/captainbupt/android-Ultra-Pull-To-Refresh-With-Load-More</a></p><p>//BGARefreshLayout-Android可以对所有控件实现下拉刷新和上拉加载更多功能<br><a href="http://www.23code.com/bgarefreshlayout-android/">http://www.23code.com/bgarefreshlayout-android/</a></p><p>//LoadingLayout<br><a href="https://gold.xitu.io/post/583c242061ff4b006b59c7fb">https://gold.xitu.io/post/583c242061ff4b006b59c7fb</a></p><p>//可适配所有视图的下拉刷新上拉加载，并支持各种风格。<br><a href="https://github.com/canyinghao/CanRefresh">https://github.com/canyinghao/CanRefresh</a></p><p>//掘金安卓社区<br><a href="http://gold.xitu.io/welcome/android">http://gold.xitu.io/welcome/android</a></p><p>/** 自定义view<br><a href="http://www.gcssloop.com/customview/Canvas_BasicGraphics">http://www.gcssloop.com/customview/Canvas_BasicGraphics</a></p><p>//视频播放器<br><a href="https://github.com/jjdxmashl/jjdxm_ijkplayer">https://github.com/jjdxmashl/jjdxm_ijkplayer</a></p><p><a href="https://github.com/curtis2/SuperVideoPlayer">https://github.com/curtis2/SuperVideoPlayer</a></p><p><a href="https://github.com/supercwn/SuperPlayer">https://github.com/supercwn/SuperPlayer</a></p><p>基于 ijkplayer 的视频播放器，仿 Bilibili 客户端，集成沉浸式全屏、弹幕、触屏控制、视频源切换等功能<br><a href="https://gold.xitu.io/entry/583d2d8ca22b9d006a9241f8">https://gold.xitu.io/entry/583d2d8ca22b9d006a9241f8</a></p><p>//开关<br><a href="https://github.com/kyleduo/SwitchButton">https://github.com/kyleduo/SwitchButton</a></p><p>//数据库<br><a href="https://github.com/requery/requery">https://github.com/requery/requery</a></p><p>圆弧刻度温度进度条<br><a href="https://gold.xitu.io/entry/582ecede67f35600633eb136">https://gold.xitu.io/entry/582ecede67f35600633eb136</a></p><p>通用PopupWindow，几行代码搞定PopupWindow弹窗<br><a href="https://gold.xitu.io/entry/583fee8d61ff4b006c1b07de">https://gold.xitu.io/entry/583fee8d61ff4b006c1b07de</a></p><p>自定义对话框应该这样写<br><a href="https://gold.xitu.io/entry/58451816128fe10058aee0ca">https://gold.xitu.io/entry/58451816128fe10058aee0ca</a></p><p>Android Studio 快速开发之道<br><a href="https://gold.xitu.io/entry/583bd4a2c59e0d006b419b0d">https://gold.xitu.io/entry/583bd4a2c59e0d006b419b0d</a></p><p>引导界面滑动导航 + 大于等于1页时无限轮播 + 各种切换动画轮播效果<br><a href="https://github.com/bingoogolapple/BGABanner-Android">https://github.com/bingoogolapple/BGABanner-Android</a></p><p>MVP 开发框架再试 - 程序员如何更优雅的看直播<br>App based on Material Design + MVP + Rxjava + Retrofit + Okhttp + Glide + Cache + theme + others<br><a href="https://gold.xitu.io/entry/58456f14a22b9d007aa1e3f7">https://gold.xitu.io/entry/58456f14a22b9d007aa1e3f7</a></p><p> AndroidIOS风格底部选择器（支持时间，日期，自定义）<br><a href="http://blog.csdn.net/androidmsky/article/details/53302959">http://blog.csdn.net/androidmsky/article/details/53302959</a></p><p>MaterialEditText<br><a href="https://github.com/rengwuxian/MaterialEditText">https://github.com/rengwuxian/MaterialEditText</a></p><p>ExpandableTextView<br><a href="https://github.com/Carbs0126/ExpandableTextView">https://github.com/Carbs0126/ExpandableTextView</a></p><p>//通用的adapter<br><a href="https://github.com/hongyangAndroid/baseAdapter">https://github.com/hongyangAndroid/baseAdapter</a></p><p>CalendarListview是一个高度定制的日期选择器，可以满足多选日期的需求<br><a href="https://github.com/henry-newbie/CalendarView">https://github.com/henry-newbie/CalendarView</a></p><p>Android酷炫实用的开源框架（UI框架）<br><a href="http://www.runoob.com/w3cnote/android-ui-framework.html">http://www.runoob.com/w3cnote/android-ui-framework.html</a></p><p> Android自定义控件三部曲文章索引<br><a href="http://blog.csdn.net/harvic880925/article/details/50995268">http://blog.csdn.net/harvic880925/article/details/50995268</a></p><p>一个绚丽的loading动效分析与实现！<br><a href="http://blog.csdn.net/tianjian4592/article/details/44538605">http://blog.csdn.net/tianjian4592/article/details/44538605</a></p><p>基于RxJava的下载工具。支持多线程下载和断点下载，智能判断是否支持多线程下载和断点下载。基于RxJava和改造打造的下载工具，支持多线程下载和断点续传，智能判断是否支持断点续传等功能<br><a href="https://github.com/ssseasonnn/RxDownload">https://github.com/ssseasonnn/RxDownload</a></p><p>一个蛮酷的加载进度条<br><a href="https://github.com/zhangyuChen1991/ZYDownloading">https://github.com/zhangyuChen1991/ZYDownloading</a></p><p>一个Android定制的ListView和滚动型上拉放大项。<br><a href="https://github.com/Frank-Zhu/PullZoomView">https://github.com/Frank-Zhu/PullZoomView</a></p><p>Swipebacklayout及Activity启动的动画<br><a href="http://blog.csdn.net/xiechengfa/article/details/45317503">http://blog.csdn.net/xiechengfa/article/details/45317503</a></p><p>SwipeBackHelper及Activity启动的动画<br> <a href="https://github.com/Jude95/SwipeBackHelper">https://github.com/Jude95/SwipeBackHelper</a></p><p>Android6.0 权限适配及兼容库的实现<br><a href="https://gold.xitu.io/entry/585cdeec61ff4b0063ef3ba7/view">https://gold.xitu.io/entry/585cdeec61ff4b0063ef3ba7/view</a></p><p>球形水波百分比控件<br><a href="https://gold.xitu.io/entry/585cdda1128fe1006de45502/view">https://gold.xitu.io/entry/585cdda1128fe1006de45502/view</a></p><p>Android 自定义 ClearEditTextView<br><a href="https://gold.xitu.io/entry/585c8bab61ff4b00688bb0cb/view">https://gold.xitu.io/entry/585c8bab61ff4b00688bb0cb/view</a></p><p>Android 自定义价格日历控件<br><a href="https://gold.xitu.io/entry/583414a2570c35006c24c581">https://gold.xitu.io/entry/583414a2570c35006c24c581</a></p><p>Android时间选择器<br>下载地址<br><a href="http://www.apkbus.com/thread-257790-1-1.html">http://www.apkbus.com/thread-257790-1-1.html</a><br>compile ‘com.jzxiang.pickerview:TimePickerDialog:0.9.2’</p><p> Android自定义弹窗——右上角悬浮关闭<br><a href="http://blog.csdn.net/qqyanjiang/article/details/51556618">http://blog.csdn.net/qqyanjiang/article/details/51556618</a></p><p>歌词显示控件<br> LyricView<a href="https://gold.xitu.io/entry/5861cb798d6d810065f78635/view">https://gold.xitu.io/entry/5861cb798d6d810065f78635/view</a></p><p><a href="https://github.com/WuLiFei/LyricViewDemo">https://github.com/WuLiFei/LyricViewDemo</a></p><p>RxRetrofit - 终极封装 - 深入浅出 &amp; 文件上传<br><a href="https://gold.xitu.io/entry/585e444961ff4b005814b3e8/view">https://gold.xitu.io/entry/585e444961ff4b005814b3e8/view</a></p><p><a href="http://www.jianshu.com/p/e04690cba093">http://www.jianshu.com/p/e04690cba093</a></p><p>Android 开发人员不得不收集的代码 (持续更新中)<br><a href="https://gold.xitu.io/entry/583cf7bac59e0d006b477dff">https://gold.xitu.io/entry/583cf7bac59e0d006b477dff</a></p><p>下载不应该让人感到痛苦，Aria，致力于让下载傻瓜化。<br><a href="https://gold.xitu.io/entry/5850f475570c350069de3403">https://gold.xitu.io/entry/5850f475570c350069de3403</a></p><p>菜单开源库装逼大全<br><a href="http://www.jianshu.com/p/e04690cba093">http://www.jianshu.com/p/e04690cba093</a></p><p>自定义View<br><a href="https://github.com/xinghongfei/awesome-view">https://github.com/xinghongfei/awesome-view</a><br>编写自定义 View 并发布到 JCenter<br><a href="https://gold.xitu.io/entry/583bcd0aac502e006c27583d/view">https://gold.xitu.io/entry/583bcd0aac502e006c27583d/view</a></p><p>AndAndroid 自定义 View 合集<br><a href="https://gold.xitu.io/entry/58466f9fac502e006bb275e0/view">https://gold.xitu.io/entry/58466f9fac502e006bb275e0/view</a></p><p>打造酷炫 AndroidStudio 插件<br><a href="https://gold.xitu.io/entry/5862648161ff4b00582c467e/view">https://gold.xitu.io/entry/5862648161ff4b00582c467e/view</a></p><p> PagerSlidingTabStrip 从头到脚  | 掘金技术征文<br><a href="https://gold.xitu.io/entry/5860843ada2f600065977f7d/view">https://gold.xitu.io/entry/5860843ada2f600065977f7d/view</a></p><p>hellocharts-android-Android 图表开源库的使用 (一)<br><a href="https://gold.xitu.io/entry/58637011ac502e006745f90f/view">https://gold.xitu.io/entry/58637011ac502e006745f90f/view</a></p><p>仿时钟表盘自定义view<br><a href="http://m.blog.csdn.net/article/details?id=53228258">http://m.blog.csdn.net/article/details?id=53228258</a></p><p>直接拿去用！每个App都会用到的LoadingLayout<br><a href="https://gold.xitu.io/entry/583c406361ff4b006cc717a2/view">https://gold.xitu.io/entry/583c406361ff4b006cc717a2/view</a></p><p>一个可以实现滑动解锁，滑动接听效果的控件<br><a href="https://gold.xitu.io/entry/5832947b8ac2470061c46f38/view">https://gold.xitu.io/entry/5832947b8ac2470061c46f38/view</a></p><p>一款强大的 Android 底部导航<br><a href="https://gold.xitu.io/entry/5833b8458ac247005a1a11fe/view">https://gold.xitu.io/entry/5833b8458ac247005a1a11fe/view</a></p><p>持续收集 Android Studio 好用的插件~~ 只选对的！<br><a href="https://gold.xitu.io/entry/583543f9d20309005fe2a21a/view">https://gold.xitu.io/entry/583543f9d20309005fe2a21a/view</a></p><p>RxJava+Retrofit+OkHttp 封装<br><a href="https://gold.xitu.io/entry/58395fcc128fe1006ab1609d/view">https://gold.xitu.io/entry/58395fcc128fe1006ab1609d/view</a></p><p>基于 ijkplayer 的视频播放器，仿 Bilibili 客户端，集成沉浸式全屏、弹幕、触屏控制、视频源切换等功能<br><a href="https://gold.xitu.io/entry/583d2d8ca22b9d006a9241f8/view">https://gold.xitu.io/entry/583d2d8ca22b9d006a9241f8/view</a></p><p>高仿百度外卖个人中心，让你的界面和我一起浪起来~<br><a href="https://gold.xitu.io/entry/583fbc5cac502e006cbadc6a/view">https://gold.xitu.io/entry/583fbc5cac502e006cbadc6a/view</a></p><p>android 表单验证框架，正则、非空、长度、密码等等等<br><a href="https://gold.xitu.io/entry/583fdf38a22b9d007a832d37/view">https://gold.xitu.io/entry/583fdf38a22b9d007a832d37/view</a></p><p>RxJava+Retrofit+Okhttp+Mvp<br><a href="https://gold.xitu.io/entry/5842753661ff4b005885eaae/view">https://gold.xitu.io/entry/5842753661ff4b005885eaae/view</a></p><p>自定义对话框应该这样写<br><a href="https://gold.xitu.io/entry/58451816128fe10058aee0ca/view">https://gold.xitu.io/entry/58451816128fe10058aee0ca/view</a></p><p>Android 通用标题栏组合控件<br><a href="https://gold.xitu.io/entry/5847c1d8128fe10057978b4e/view">https://gold.xitu.io/entry/5847c1d8128fe10057978b4e/view</a><br>//常用的工具第三方包</p><pre><code>//百分比compile &#39;com.android.support:percent:25.0.0&#39;//web抓包compile &#39;org.jsoup:jsoup:1.10.1&#39;//视频框架compile &#39;fm.jiecao:jiecaovideoplayer:3.6.3&#39;//侧滑删除compile &#39;com.yanzhenjie:recyclerview-swipe:1.0.1&#39;compile &#39;me.codeboy.android:align-text-view:2.3.0&#39;compile &#39;com.yanzhenjie:recyclerview-swipe:1.0.1&#39;compile &#39;com.jcodecraeer:xrecyclerview:1.2.7&#39;//图片加载compile &#39;com.squareup.picasso:picasso:2.5.2&#39;compile &#39;net.steamcrafted:materialiconlib:1.0.3&#39;compile &#39;com.android.support:recyclerview-v7:25.1.0&#39;//卡片compile &#39;com.android.support:cardview-v7:25.1.0&#39;compile &#39;com.android.support:design:25.1.0&#39;//分包 防止65535compile &#39;com.android.support:multidex:1.0.1&#39;compile &#39;com.github.bumptech.glide:glide:3.5.2&#39;//loading 加载 compile &#39;com.wang.avi:library:2.1.2&#39;compile &#39;io.reactivex:rxjava:1.1.6&#39;compile &#39;io.reactivex:rxandroid:1.2.1&#39;compile &#39;com.squareup.okhttp3:logging-interceptor:3.4.0-RC1&#39;compile &#39;com.squareup.okhttp3:okhttp-urlconnection:3.2.0&#39;compile &#39;com.squareup.retrofit2:retrofit:2.1.0&#39;compile &#39;com.squareup.retrofit2:converter-scalars:2.1.0&#39;compile &#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;compile &#39;org.greenrobot:eventbus:3.0.0&#39;compile &#39;com.squareup.okio:okio:1.8.0&#39;compile &#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;//侧滑删除compile &#39;com.nikhilpanju.recyclerviewenhanced:recyclerviewenhanced:1.0.0&#39;compile &#39;com.commit451:PhotoView:1.2.4&#39;compile &#39;com.nineoldandroids:library:2.4.0&#39;Gson 工具//针对安卓做过优化compile &#39;com.alibaba:fastjson:1.1.52.android&#39;    //未优化compile &#39;com.alibaba:fastjson:+&#39;compile &#39;com.google.code.gson:gson:2.2.4&#39;</code></pre><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sp存储和读取</span></span><br><span class="line">    <span class="type">SharedPreferences</span> <span class="variable">mSharedPreferences</span> <span class="operator">=</span> MyApplication.getContextObject().getSharedPreferences(<span class="string">&quot;loginUser&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line"></span><br><span class="line">    SharedPreferences.<span class="type">Editor</span> <span class="variable">editor</span> <span class="operator">=</span> mSharedPreferences.edit();</span><br><span class="line">    editor.putInt(<span class="string">&quot;userid&quot;</span>,data.get(<span class="number">0</span>).getData().getUserid());</span><br><span class="line">    editor.putString(<span class="string">&quot;username&quot;</span>,data.get(<span class="number">0</span>).getData().getUsername());</span><br><span class="line">    editor.putString(<span class="string">&quot;litpic&quot;</span>,data.get(<span class="number">0</span>).getData().getLitpic());</span><br><span class="line">    editor.putString(<span class="string">&quot;lastlogintime&quot;</span>,data.get(<span class="number">0</span>).getData().getLastlogintime());</span><br><span class="line">    editor.putString(<span class="string">&quot;state&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    editor.commit();</span><br><span class="line">    Log.d(<span class="string">&quot;HomeFragment_4&quot;</span>, <span class="string">&quot;data.get(0).getData().getUserid():&quot;</span> + data.get(<span class="number">0</span>).getData().getUserid());</span><br><span class="line"></span><br><span class="line"><span class="type">SharedPreferences</span> <span class="variable">sp</span> <span class="operator">=</span> MyApplication.getContextObject().getSharedPreferences(<span class="string">&quot;loginUser&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">    <span class="type">int</span> uid=sp.getInt(<span class="string">&quot;userid&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    String username=sp.getString(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    String litpic=sp.getString(<span class="string">&quot;litpic&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    String lastlogintime=sp.getString(<span class="string">&quot;lastlogintime&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//唤起qq</span></span><br><span class="line"><span class="type">PackageManager</span> <span class="variable">manager</span> <span class="operator">=</span> mActivity.getPackageManager();</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">openQQ</span> <span class="operator">=</span> manager.getLaunchIntentForPackage(<span class="string">&quot;com.tencent.mobileqq&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.startActivity(openQQ);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手记 </tag>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/article/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/article/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>自从入驻github越来越喜欢Git了，自然也就离不开使用各种git命令来克隆提交代码了，当然git像svn一样，也有小乌龟窗口可视化程序<a href="https://tortoisegit.org/">TortoiseGit</a>，需要的可自行下载。</p><p>这节把一些常用的git命令整理下，也方便以后查阅使用。</p><p>转载自：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a>，非常感谢阮一峰的这篇文章。</p></blockquote><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt="Git常用6个命令"></p><p>几个专用名词的译名如下。</p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><span id="more"></span><h1 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><h1 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [<span class="built_in">dir</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git <span class="built_in">rm</span> [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git <span class="built_in">mv</span> [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h1 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名本地分支</span></span><br><span class="line">$ git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure><h1 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h1 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h1 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h1 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h1 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向</span></span><br><span class="line">$ git remote set-url origin [remote]</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ git remote <span class="built_in">rm</span> origin</span><br><span class="line">$ git remote add origin [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果未设置过git远程地址</span></span><br><span class="line">$ git remote add origin [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> -v --progress [remote] [localDir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取更新</span></span><br><span class="line">$ git pull -v --progress <span class="string">&quot;origin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交更新</span></span><br><span class="line">$ git push --progress <span class="string">&quot;origin&quot;</span> master:master</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://gitref.org/creating/">Git Reference</a></li><li><a href="http://www.cnblogs.com/mengdd/p/4153773.html">Git常用命令总结</a></li><li><a href="http://blog.csdn.net/dengsilinming/article/details/8000622">Git 常用命令大全</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></li><li><a href="https://github.com/521xueweihan/git-tips">[github]Git的奇技淫巧 521xueweihan/git-tips</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客基于主题Yelee(yelog) 添加文章分类</title>
      <link href="/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"/>
      <url>/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://sogrey.github.io/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%A0%87%E7%AD%BE%E4%BA%91%E2%80%9D%E5%92%8C%E2%80%9C%E5%85%B3%E4%BA%8E%E6%88%91%E2%80%9D%E8%8F%9C%E5%8D%95%E9%A1%B9%E9%A1%B5%E9%9D%A2/">Hexo博客基于主题Yelee(yelog) 添加“标签云”和“关于我”菜单项页面</a></p><p>经过上一节，我已经添加了“标签云”和“关于我”等页面，但是回到标签云页面，我们看到页面上显示<code>已有0个分类，共计10个标签</code>，那么这个文章分类该怎么添加?这就是这节要讲的，也算是对上一篇的补充。<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-11_180103.jpg" alt="标签云页面"></p></blockquote><span id="more"></span><h1 id="1-站点配置"><a href="#1-站点配置" class="headerlink" title="1 站点配置"></a>1 站点配置</h1><p>在站点根目录下的<code>_config.yml</code>里有这么一段：</p><pre><code># Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:</code></pre><p>其中：<code>category_dir: categories</code>就是分配分类目录了，没有的可以按这样配置，下面就是创建了。</p><h1 id="2-创建分类"><a href="#2-创建分类" class="headerlink" title="2 创建分类"></a>2 创建分类</h1><p>跟创建<code>云标签</code>一样：</p><pre><code>hexo new page categories</code></pre><p>在<code>source</code>目录下生成一个<code>categories\index.md</code>文件，编辑它：</p><pre><code>---date: 2017-01-12 02:23:17title: categoriestype: &quot;categories&quot;comments: false---</code></pre><p>在上一篇说道<code>type</code>值为<code>tags</code>是标签云，这里是分类<code>categories</code>。就这么简单不用再做其他输入。</p><h1 id="3-为文章添加分类"><a href="#3-为文章添加分类" class="headerlink" title="3 为文章添加分类"></a>3 为文章添加分类</h1><p>以<a href="https://sogrey.github.io/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%A0%87%E7%AD%BE%E4%BA%91%E2%80%9D%E5%92%8C%E2%80%9C%E5%85%B3%E4%BA%8E%E6%88%91%E2%80%9D%E8%8F%9C%E5%8D%95%E9%A1%B9%E9%A1%B5%E9%9D%A2/">Hexo博客基于主题Yelee(yelog) 添加“标签云”和“关于我”菜单项页面</a>这一篇为例：</p><pre><code>---title: Hexo博客基于主题Yelee(yelog) 添加“标签云”和“关于我”菜单项页面date: 2017-01-11 17:00:30tags: [HEXO,Yelee,yelog,“标签云”,“关于我”]categories: HEXO博客---</code></pre><p>其中：<code>categories: HEXO博客</code>就是设置该文章分类到<code>HEXO博客</code>。</p><blockquote><p>注：文章标签可以添加多个，分类却只能有一个，设置多个只有第一个生效。</p></blockquote><p>此时文章列表上就多了文章分类了，也可以再到<code>标签云</code>页面查看：<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-12_110538.jpg" alt="分类"></p><p>Good luck!</p>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Yelee </tag>
            
            <tag> yelog </tag>
            
            <tag> 文章分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客基于主题Yelee(yelog) 添加“标签云”和“关于我”菜单项页面</title>
      <link href="/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%A0%87%E7%AD%BE%E4%BA%91%E2%80%9D%E5%92%8C%E2%80%9C%E5%85%B3%E4%BA%8E%E6%88%91%E2%80%9D%E8%8F%9C%E5%8D%95%E9%A1%B9%E9%A1%B5%E9%9D%A2/"/>
      <url>/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%A0%87%E7%AD%BE%E4%BA%91%E2%80%9D%E5%92%8C%E2%80%9C%E5%85%B3%E4%BA%8E%E6%88%91%E2%80%9D%E8%8F%9C%E5%8D%95%E9%A1%B9%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><ul><li><a href="https://sogrey.github.io/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/">如何在Github Pages搭建个人独立主页？</a></li><li><a href="https://sogrey.github.io/article/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub-pages/">我是如何用hexo搭建github pages</a></li></ul><p>经过前两篇我已经搭建好了一个简单的HEXO博客，目前使用的是主题是<code>yelog</code>,<code>yelog</code>是基于<code>yelee</code>修改而来，在页面的左半边是博主的信息，中间部分有个菜单，依次是<code>主页</code>、<code>所有文章</code>、<code>标签云</code>和<code>关于我</code>，博客搭建起来的时候<code>主页</code>和<code>所有文章</code>已经生效可以直接使用了，至于<code>标签云</code>和<code>关于我</code>这两个页面还并未创建，这节就来创建它们。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-11_171158.jpg" alt="yelog Menu"></p><span id="more"></span><h1 id="1-设置主题配置文件"><a href="#1-设置主题配置文件" class="headerlink" title="1 设置主题配置文件"></a>1 设置主题配置文件</h1><p>在主题配置文件<code>themes\yelog\_config.yml</code>里找到<code>menu</code>,如下：</p><pre><code># Header | 主菜单## About Page: `hexo new page about`## Tags Cloud Page: `hexo new page tags`menu:  主页: /  所有文章: /archives/  #随笔: /tags/随笔  标签云: /tags/  关于我: /about/  更新日志: /logs/</code></pre><p>注：配置文件里用<code>#</code>注释</p><p>参照上面配置可以增删修改菜单项，比<code>标签云: /tags/</code>,表示有个菜单名为<code>标签云</code>,如文章开头的图，冒号后面的<code>/tags/</code>表示它的访问路径，比如我的站点是<code>https://sogrey.github.io/</code>,那么点击<code>标签云</code>菜单访问的是<code>https://sogrey.github.io/tags/</code>.</p><p>看到上面的配置中已经为我们写好的提示如何创建<code>标签云</code>和<code>关于我</code>页面:</p><pre><code>## About Page: `hexo new page about`## Tags Cloud Page: `hexo new page tags`</code></pre><p>下面我来创建<code>标签云</code>页面。</p><h1 id="2-创建标签云页面"><a href="#2-创建标签云页面" class="headerlink" title="2 创建标签云页面"></a>2 创建<code>标签云</code>页面</h1><p>在Hexo博客本地根目录右键选择<code>Git Bash</code>（前提是已安装好<code>Git</code>和<code>Node.js</code>,可参照<a href="https://sogrey.github.io/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/">如何在Github Pages搭建个人独立主页？</a>）,输入命令：</p><pre><code>hexo new page tags</code></pre><p>回车，提示：</p><pre><code>INFO  Created: ...\source\tags\index.md</code></pre><p>就创建完成了。在<code>source\</code>目录下会多出一个<code>tags</code>文件夹，里面有一个<code>index.md</code>文件，打开该文件输入如下：</p><pre><code>---title: 标签云date: 2017-01-10 22:54:00type: &quot;tags&quot;comments: true---</code></pre><p>其中：<code>title</code>和<code>date</code>是标题和创建时间，<code>type</code>表示类型，值<code>tags</code>表示这是个标签云页面，<code>comments</code>是是否允许评论，<code>true</code>表示允许评论。</p><p>这样标签云页面已经创建好了，部署试一下：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-11_180103.jpg" alt="标签云页面"></p><h1 id="3-创建关于我页面"><a href="#3-创建关于我页面" class="headerlink" title="3 创建关于我页面"></a>3 创建<code>关于我</code>页面</h1><p>创建<code>关于我</code>页面和<code>标签云</code>页面步骤一样；输入命令：</p><pre><code>hexo new page about</code></pre><p>创建<code>about\index.md</code>文件，页面内容由你随意输入：</p><pre><code>---title: 关于我date: 2017-01-10 22:20:12---# 关于我=== 在此输入正文 ===</code></pre><p>部署，预览页面：</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-11_180604.jpg" alt="关于我"></p><p>到此两个页面都已创建完成，可以发布到github或coding了。另外我自己添加了<a href="https://sogrey.github.io/logs/">更新日志</a>页面，有兴趣的也可以自己创建一个，方法与上面创建<code>关于我</code>一样。</p><p>对于yelee主题的使用和配置，可参照<a href="http://moxfive.coding.me/yelee">这里</a>。<br>Good luck!</p>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Yelee </tag>
            
            <tag> yelog </tag>
            
            <tag> 标签云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5 PPT</title>
      <link href="/article/Html5-PPT/"/>
      <url>/article/Html5-PPT/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&gt;&gt;&gt;&gt;&gt;<a href="http://sogrey.coding.me/html5/">国内点此预览</a>&lt;&lt;&lt;&lt;&lt;</p><p>&gt;&gt;&gt;&gt;&gt;<a href="https://sogrey.github.io/Html5-ppt/">国际点此预览</a>&lt;&lt;&lt;&lt;&lt;</p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_221733.jpg" alt="Html5-ppt"><br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_221804.jpg" alt="Html5-ppt"></p>]]></content>
      
      
      <categories>
          
          <category> Html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PPT </tag>
            
            <tag> Html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Github Pages搭建个人独立主页？</title>
      <link href="/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/"/>
      <url>/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1准备工作"><a href="#1准备工作" class="headerlink" title="1准备工作"></a>1准备工作</h1><h2 id="1-1-Github注册及使用。"><a href="#1-1-Github注册及使用。" class="headerlink" title="1.1 Github注册及使用。"></a>1.1 Github注册及使用。</h2><p>官网是：<a href="https://pages.github.com/">https://pages.github.com/</a>，是github提供的一个服务，我们可以免费的再其上面搭建自己的网站，也有很多人利用github pages作为自己的个人博客站点。GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p><h3 id="1-1-1-Github登录"><a href="#1-1-1-Github登录" class="headerlink" title="1.1.1 Github登录"></a>1.1.1 Github登录</h3><p>登录地址：<a href="https://github.com/login">https://github.com/login</a>，还没有github账号的小伙伴赶紧去注册一个，点击”<a href="https://github.com/join?source=login">Create an account</a>“注册不再赘述。<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/sogrey_github_20170109101825.png" alt="github登录"></p><span id="more"></span><h3 id="1-1-2-新建仓库"><a href="#1-1-2-新建仓库" class="headerlink" title="1.1.2 新建仓库"></a>1.1.2 新建仓库</h3><p>登录成功之后到<a href="https://github.com/new">仓库信息填写界面</a>创建一个仓库,须注意仓库的名称必须是：<code>&#123;你的用户名&#125;.github.io</code>，将<code>&#123;你的用户名&#125;</code>换成你自己的名字，例如我自己的<code>Sogrey.github.io</code><br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_104430.png" alt="新建github仓库"></p><h3 id="1-1-3-获取git地址"><a href="#1-1-3-获取git地址" class="headerlink" title="1.1.3 获取git地址"></a>1.1.3 获取git地址</h3><p>进入刚仓库点击<code>Clone or download</code>可查看git地址以备后用。<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_104936.png" alt="获取git地址"></p><h2 id="1-2-安装准备软件"><a href="#1-2-安装准备软件" class="headerlink" title="1.2 安装准备软件"></a>1.2 安装准备软件</h2><h3 id="1-2-1-依次下载安装："><a href="#1-2-1-依次下载安装：" class="headerlink" title="1.2.1 依次下载安装："></a>1.2.1 依次下载安装：</h3><ul><li><a href="http://nodejs.org/">Node.js</a></li><li><a href="http://git-scm.com/">Git</a>（<a href="https://github.com/waylau/git-for-win">Git for Windows 国内下载站</a>）</li></ul><p>选择本地目录作为工作空间，我这里选择的是：<code>E:\github</code>,为方便演示我已另外创建了仓库：<code>Test.github.io</code>,git地址是：<a href="https://github.com/Sogrey/Test.github.io.git">https://github.com/Sogrey/Test.github.io.git</a>.</p><h3 id="1-2-2-clone到本地"><a href="#1-2-2-clone到本地" class="headerlink" title="1.2.2 clone到本地"></a>1.2.2 clone到本地</h3><p>命令行进入硬盘上任意一个文件夹，我这里选择<code>E:\github</code>，然后执行</p><pre><code>git clone https://github.com/Sogrey/Test.github.io.git</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_112759.png" alt="clone到本地"><br>此时你会发现在<code>E:\github</code>目录下会多出文件，正是我们github上的文件目录<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_113346.png" alt="clone到本地"></p><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_113812.png" alt="clone到本地"></p><h1 id="2-新建测试页面"><a href="#2-新建测试页面" class="headerlink" title="2 新建测试页面"></a>2 新建测试页面</h1><h2 id="2-1-新建测试页面文件"><a href="#2-1-新建测试页面文件" class="headerlink" title="2.1 新建测试页面文件"></a>2.1 新建测试页面文件</h2><p>我们在clone下来的目录里新建一个html文档：<code>index.html</code>,必须.git文件夹在同一个目录,输入以下内容：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;Hello world&lt;/title&gt;        &lt;meta charset=&#39;utf-8&#39;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1&gt;Hello world！这是我使用github pages搭建的个人站点。&lt;/h1&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_115202.png" alt="新建测试页面"></p><h2 id="2-2-上传测试页面"><a href="#2-2-上传测试页面" class="headerlink" title="2.2 上传测试页面"></a>2.2 上传测试页面</h2><p>命令行指定到clone下来的目录里</p><pre><code>cd Test.github.io</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_115619.png" alt="命令行指定到clone下来的目录里"><br>下面就是提交了，依次输入以下命令：</p><pre><code>git add .git commit -m &quot;更新index.html，编写测试页面&quot;git push</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_120645.png" alt="git 提交"><br>依次执行git add . , git commit -m “注释”，git push，然后输入你的用户名，密码即可。<br>在浏览器直接访问看看：<br><code>http://&#123;你的域名&#125;.github.io</code></p><p>由于这里我已经创建了<code>sogrey.github.io</code>,再次创建会作为<code>sogrey.github.io</code>的一个子目录：<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_125632.png" alt="访问github pages"><br>以上文字出现乱码，解决办法是另存<code>index.html</code>为<code>utf-8 无BOM</code> 格式<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_130649.png" alt="访问github pages"><br>注意：</p><ul><li>如果是创建子目录，仓库名可以不按照 <code>&#123;你的域名&#125;.github.io</code>这种格式，直接自定义，比如把上面<code>Test.github.io</code>改成<code>Test</code>，直接访问<a href="https://sogrey.github.io/Test/">https://sogrey.github.io/Test/</a>即可。</li><li>如果是创建子目录，默认不显示为github pages，设置方法为 <code>Settings</code> -&gt; <code>GitHub Pages</code> -&gt; <code>Source</code> 改为 <code>master branch</code> 点击 <code>Save</code>保存即可。<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_131707.png" alt="创建github pages子目录设置"><br>重新访问<a href="https://sogrey.github.io/Test/">https://sogrey.github.io/Test/</a>试试：<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_132154.png" alt="重新访问"></li></ul><p>到此，一个简单的github pages就建好了。Good luck!</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.csdn.net/lmj623565791/article/details/51319147">如何利用github打造博客专属域名</a></li><li><a href="http://www.jianshu.com/p/05289a4bc8b2">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li><li><a href="http://www.jianshu.com/p/35e197cb1273">Hexo搭建Github-Pages博客填坑教程</a></li><li><a href="http://www.jianshu.com/p/b06222fbc135">用Hexo创建个人博客</a></li></ul><p>Markdown 语法参考：</p><ul><li><a href="https://segmentfault.com/markdown">Markdown 编辑器语法指南</a></li><li><a href="http://www.jianshu.com/p/1e402922ee32/">Markdown——入门指南</a></li><li><a href="http://www.appinn.com/markdown/">Markdown 语法说明 (简体中文版)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Github pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是如何用hexo搭建github pages</title>
      <link href="/article/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub-pages/"/>
      <url>/article/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub-pages/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1 准备"></a>1 准备</h1><p>首先简单描述一下搭建的大体准备工作：</p><ul><li>1 拥有一个 github pages</li><li>2 本地环境  Git 和 Node.js</li><li>3 在本地电脑里配置 hexo 的环境。（ hexo 与 github pages 绑定，写博文修改博文等，生成静态博客并 push to github 。)</li><li>4 绑定自己的域名（也可以不用绑定，需要绑定的自行百度。）</li></ul><p>本节要讲的是 如何用hexo搭建github pages,对于第1、2两点可参考另一篇<a href="https://sogrey.github.io/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/">如何在Github-Pages搭建个人独立主页？</a></p><span id="more"></span><h1 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2 Hexo"></a>2 Hexo</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="2-1-Hexo-安装"><a href="#2-1-Hexo-安装" class="headerlink" title="2.1 Hexo 安装"></a>2.1 Hexo 安装</h2><p>官网：<a href="https://hexo.io/">https://hexo.io/</a></p><p>安装流程参考<a href="https://hexo.io/zh-cn/docs/">官方文档</a>，避免入坑。</p><h2 id="2-2-Hexo-建站"><a href="#2-2-Hexo-建站" class="headerlink" title="2.2 Hexo 建站"></a>2.2 Hexo 建站</h2><p>Hexo 安装好了之后，就开始进行建站。cmd打开终端 cd 到指定目录（这里使用D盘根目录<code>d:\</code>）并使用如下命令即可建好</p><pre><code>hexo init yourname cd yourname npm install</code></pre><p>其中 yourname 是你的文件夹名字可随意取（本文章假设 yourname 的文件夹名称是 Hexo ）。<br>或直接新建Hexo，在<code>D:\HEXO</code>使用git Bash命令执行亦可,直接在此目录下<code>右键</code> 选择<code>git Bash</code>,依次执行以下命令：</p><pre><code>hexo initnpm install</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_151319.png" alt="git Bash命令"><br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_161000.jpg" alt="git Bash命令"><br>完成之后会在D盘会创建一个Hexo目录<br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_161345.jpg" alt="Hexo目录"><br>建站可参考<a href="https://hexo.io/zh-cn/docs/setup.html">建站|Hexo</a></p><p><strong>特别提示：如何与 Github pages 进行关联:</strong></p><p>在刚刚创建出来的目录的根目录下存在一个 <code>_config.yml</code> 文件,使用文本编辑器打开，在最末尾配置：</p><pre><code>deploy:  type: git  repository: https://github.com/Sogrey/Sogrey.github.io.git  branch: master</code></pre><p>其中 <code>repository</code> 字段的值替换成你的 github pages 提交代码的git地址,git地址如何获取参见<a href="https://sogrey.github.io/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/">如何在Github-Pages搭建个人独立主页？</a>中<code>1.1.3 获取git地址</code></p><h2 id="2-3-Hexo-本地发布"><a href="#2-3-Hexo-本地发布" class="headerlink" title="2.3 Hexo 本地发布"></a>2.3 Hexo 本地发布</h2><p>使用终端命令进行发布：</p><pre><code>hexo cleanhexo g #作用同 hexo generatehexo s #作用同 hexo server</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_161613.jpg" alt="Hexo 本地发布"><br>命令详解，<code>hexo clean</code>是清除缓存，<code>hexo g</code>是生成本地发布文件夹，<code>hexo s</code>启动本地服务并发布，发布成功之后浏览器查看<a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="https://cdn.jsdelivr.net/gh/sogrey/cdn/imgs/2017-01-09_161808.jpg" alt="Hexo 本地发布"></p><p>如需停止本地服务，命令行按 <code>ctrl+c</code></p><p>Hexo 命令参考<a href="https://hexo.io/zh-cn/docs/commands.html">官方文档</a></p><h2 id="2-4-Hexo-发布到github-pages"><a href="#2-4-Hexo-发布到github-pages" class="headerlink" title="2.4 Hexo 发布到github pages"></a>2.4 Hexo 发布到github pages</h2><p>当然这存在于本地，而并未发布到github pages服务器，所以需要使用终端命令进行发布：</p><pre><code>hexo cleanhexo g #作用同 hexo generatehexo d #作用同 hexo deploy</code></pre><p>命令详解，<code>hexo clean</code>是清除缓存，<code>hexo g</code>是生成本地发布文件夹，<code>hexo d</code>才是最后的发布到 github pages 上，期间会依次弹出两个输入框，依次输入你的github用户名和密码。更多的 hexo 命令操作请参考官方文档即可。不过一般用来用去无非就是创建页面、发布这么几条命令而已。</p><blockquote><p>最后提示一点，可能会遇到的问题，在执行<code>hexo init</code>时，若提示</p><p>SSL certificate problem: unable to get local issuer certificate</p><p>可以 先执行<code>git config --global http.sslVerfiy false</code> </p></blockquote><p>到此，就可以到github pages去查看上传的页面了。Good lock!</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.tuicool.com/articles/MramqqJ">我的博客是如何搭建的（github pages + HEXO + 域名绑定）</a></li><li><a href="http://www.jianshu.com/p/465830080ea9">HEXO+Github,搭建属于自己的博客</a></li><li><a href="https://segmentfault.com/a/1190000004947261">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li><li><a href="http://www.jianshu.com/p/05289a4bc8b2">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li><li><a href="http://www.cnblogs.com/liulangmao/p/4323064.html">使用hexo搭建github.io博客(一)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Github pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/article/hello-world/"/>
      <url>/article/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
