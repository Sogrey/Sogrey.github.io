<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>一张图弄懂开源协议-GPL、BSD、MIT、Mozilla、Apache和LGPL 之间的差别</title>
      <link href="/article/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%BC%84%E6%87%82%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE-GPL%E3%80%81BSD%E3%80%81MIT%E3%80%81Mozilla%E3%80%81Apache%E5%92%8CLGPL-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%88%AB/"/>
      <url>/article/%E4%B8%80%E5%BC%A0%E5%9B%BE%E5%BC%84%E6%87%82%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE-GPL%E3%80%81BSD%E3%80%81MIT%E3%80%81Mozilla%E3%80%81Apache%E5%92%8CLGPL-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一张 <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮大神</a>的图秒懂各大开源协议差异</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201105/bg2011050101.png" alt=""></p><ol><li><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">阮一峰的网络日志</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开源协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源协议 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activity启动模式(lauchMode)</title>
      <link href="/article/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-lauchMode/"/>
      <url>/article/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-lauchMode/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>launchMode在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。这里简单介绍一下task的概念，task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task。</p><a id="more"></a><p>Activity一共有以下四种launchMode：</p><p>1.standard</p><p>2.singleTop</p><p>3.singleTask</p><p>4.singleInstance</p><p>我们可以在AndroidManifest.xml配置<activity>的android:launchMode属性为以上四种之一即可。</activity></p><p>下面我们结合实例一一介绍这四种lanchMode：</p><p><strong>1.standard</strong>  <strong>标准模式</strong></p><p>standard模式是默认的启动模式，不用为<activity>配置android:launchMode属性即可，当然也可以指定值为standard。</activity></p><p><strong>说明：</strong> Android创建Activity时的默认模式，假设没有为Activity设置启动模式的话，默觉得标准模式。每次启动一个Activity都会又一次创建一个新的实例入栈，无论这个实例是否存在。</p><p><strong>生命周期：</strong>如上所看到的，每次被创建的实例Activity 的生命周期符合典型情况，它的onCreate、onStart、onResume都会被调用。</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity，此时C处于栈顶，启动模式为<strong>Standard 模式</strong>。</p><p><strong>简单点理解：standard启动模式Activity栈从栈底到栈顶顺序为A1 -&gt; B -&gt; C -&gt; A2…。（其中A、B、C等都表示不同的Activity实例，A1、A2则表示属于具有同一Activity类的不同实例）</strong></p><p><strong>2.singleTop</strong>  <strong>栈顶复用模式</strong></p><p>我们在上面的基础上为<activity>指定属性android:launchMode=”singleTop”，系统就会按照singleTop启动模式处理跳转行为。</activity></p><p><strong>说明：</strong>分两种处理情况：须要创建的Activity已经处于栈顶时，此时会直接复用栈顶的Activity。不会再创建新的Activity；若须要创建的Activity不处于栈顶，此时会又一次创建一个新的Activity入栈，同Standard模式一样。</p><p><strong>生命周期：</strong>若情况一中栈顶的Activity被直接复用时，它的onCreate、onStart不会被系统调用，由于它并没有发生改变。可是一个新的方法 <strong>onNewIntent</strong>会被回调（Activity被正常创建时不会回调此方法）。</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity，此时C处于栈顶，启动模式为<strong>SingleTop 模式</strong>。情况一：在C Activity中加入点击事件，须要跳转到还有一个同类型的C Activity。</p><p>结果是直接复用栈顶的C Activity。</p><p>情况二：在C Activity中加入点击事件，须要跳转到还有一个A Activity。结果是创建一个新的Activity入栈。成为栈顶。</p><p><strong>这就是singleTop启动模式，如果发现有对应的Activity实例正位于栈顶，则重复利用，不再生成新的实例。</strong></p><p><strong>简单点理解，singleTop即表示当前Activity栈中“栈顶唯一”，Activity跳转顺序或standard模式下栈结构如果为：A -&gt; B -&gt; C -&gt; D1 -&gt; D2，则singleTop启动模式为：A -&gt; B -&gt; C -&gt; D1(此时回调D1的onNewIntent()..)。</strong></p><p><strong>3.singleTask</strong>  <strong>栈内复用模式</strong></p><p><strong>说明：</strong>若须要创建的Activity已经处于栈中时，此时不会创建新的Activity，而是将存在栈中的Activity上面的其他Activity所有销毁，使它成为栈顶。</p><p><strong>生命周期：</strong>同SingleTop 模式中的情况一同样。仅仅会又一次回调Activity中的 <strong>onNewIntent</strong>方法</p><p><strong>举例：</strong>此时Activity 栈中以此有A、B、C三个Activity。此时C处于栈顶，启动模式为<strong>SingleTask 模式</strong>。</p><p>情况一：在C Activity中加入点击事件，须要跳转到还有一个同类型的C Activity。结果是直接用栈顶的C Activity。情况二：在C Activity中加入点击事件，须要跳转到还有一个A Activity。</p><p>结果是将A Activity上面的B、C所有销毁，使A Activity成为栈顶。 </p><p>在上面的基础上我们修改FirstActivity的属性android:launchMode=”singleTask”。</p><p><strong>这就是singleTask模式，如果发现所在Activity栈中有对应的Activity实例，则使此Activity实例之上的其他Activity实例统统出栈，使此Activity实例成为栈顶对象，显示到幕前。</strong></p><p><strong>简单点理解，singleTask表示当前Activity栈中“实例唯一”，Activity跳转顺序或standard模式下栈结构如果为：A -&gt; B1 -&gt; C -&gt; D -&gt; B2，则singleTask启动模式为：A -&gt; B1(此时回调onNewIntent()..)</strong></p><p><strong>4.singleInstance</strong>  <strong>单实例模式</strong></p><p><strong>说明：</strong> SingleInstance比較特殊，是全局单例模式，是一种加强的SingleTask模式。它除了具有它所有特性外，还加强了一点：具有此模式的Activity仅仅能单独位于一个任务栈中。</p><p>这个经常使用于系统中的应用，比如Launch、锁屏键的应用等等，整个系统中仅仅有一个！所以在我们的应用中一般不会用到。了解就可以。</p><p><strong>举例：</strong>比方 A Activity是该模式，启动A后。系统会为它创建一个单独的任务栈，由于栈内复用的特性。兴许的请求均不会创建新的Activity，除非这个独特的任务栈被系统销毁。</p><p>这种启动模式比较特殊，因为它会启用一个新的栈结构，将Acitvity放置于这个新的栈结构中，并保证不再有其他Activity实例进入。</p><p><strong>简单点理解，singleInstance所标识的Activity，当被启动时，系统会首先判断系统其他栈中是否已经存在此Activity实例，有则直接使用，并且其所在的Activity栈理论上只有它一个Activity元素。所以启动它的Activity与它并不在一个task中，所以才需要特别注意Back的问题。一般表示为：task1 A -&gt; task2 B。</strong></p><p><strong>singleInstance表示该Activity在系统范围内“实例唯一”。由此我们发现，singInstance和singleTask主要区别在与系统范围内的“实例唯一”还是当前Activity栈“实例唯一”。</strong></p><h1 id="二-启动模式的使用方式"><a href="#二-启动模式的使用方式" class="headerlink" title="二.启动模式的使用方式"></a><strong>二.启动模式的使用方式</strong></h1><h2 id="1-在-Manifest-xml中指定Activity启动模式"><a href="#1-在-Manifest-xml中指定Activity启动模式" class="headerlink" title="1. 在 Manifest.xml中指定Activity启动模式"></a><strong>1. 在 Manifest.xml中指定Activity启动模式</strong></h2><p>一种静态的指定方法，在Manifest.xml文件里声明Activity的同一时候指定它的启动模式，这样在代码中跳转时会依照指定的模式来创建Activity。样例例如以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=&quot;..activity.MultiportActivity&quot; android:launchMode=&quot;singleTask&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="2-启动Activity时。在Intent中指定启动模式去创建Activity"><a href="#2-启动Activity时。在Intent中指定启动模式去创建Activity" class="headerlink" title="2. 启动Activity时。在Intent中指定启动模式去创建Activity"></a><strong>2. 启动Activity时。在Intent中指定启动模式去创建Activity</strong></h2><p>一种动态的启动模式，在new 一个Intent后，通过Intent的addFlags方法去动态指定一个启动模式。样例例如以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent();</span><br><span class="line">intent.setClass(context, MainActivity.class);</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">context.startActivity(intent);</span><br></pre></td></tr></table></figure><hr><p><strong>注意：</strong>以上两种方式都能够为Activity指定启动模式，可是二者还是有差别的。</p><p><strong>（1）优先级</strong>：动态指定方式即另外一种比第一种优先级要<strong>高</strong>，若两者同一时候存在，以另外一种方式为准。</p><p><strong>（2）限定范围</strong>：第一种方式无法为Activity直接指定 <strong>FLAG_ACTIVITY_CLEAR_TOP</strong> 标识，另外一种方式无法为Activity指定 <strong>singleInstance</strong> 模式。</p><hr><hr><hr><hr><h1 id="三-Activity-的-Flags"><a href="#三-Activity-的-Flags" class="headerlink" title="三. Activity 的 Flags"></a><strong>三. Activity 的 Flags</strong></h1><p>标记位既能够设定Activity的启动模式，如同上面介绍的，在动态指定启动模式，比方 <strong>FLAG_ACTIVITY_NEW_TASK</strong> 和 <strong>FLAG_ACTIVITY_SINGLE_TOP</strong> 等。它还能够影响Activity 的运行状态 ，比方 <strong>FLAG_ACTIVITY_CLEAN_TOP</strong> 和 <strong>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong> 等。</p><p>以下介绍几个基本的标记位，切勿死记，理解几个就可以，须要时再查官方文档。</p><h3 id="1-FLAG-ACTIVITY-NEW-TASK"><a href="#1-FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="1. FLAG_ACTIVITY_NEW_TASK"></a><strong>1. FLAG_ACTIVITY_NEW_TASK</strong></h3><p>作用是为Activity指定 “<strong>SingleTask</strong>”启动模式。跟在AndroidMainfest.xml指定效果同样。</p><hr><h3 id="2-FLAG-ACTIVITY-SINGLE-TOP"><a href="#2-FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="2. FLAG_ACTIVITY_SINGLE_TOP"></a><strong>2. FLAG_ACTIVITY_SINGLE_TOP</strong></h3><p>作用是为Activity指定 “<strong>SingleTop</strong>”启动模式，跟在AndroidMainfest.xml指定效果同样。</p><hr><h3 id="3-FLAG-ACTIVITY-CLEAN-TOP"><a href="#3-FLAG-ACTIVITY-CLEAN-TOP" class="headerlink" title="3. FLAG_ACTIVITY_CLEAN_TOP"></a><strong>3. FLAG_ACTIVITY_CLEAN_TOP</strong></h3><p>具有此标记位的Activity，启动时会将与该Activity在同一任务栈的其他Activity出栈。一般与SingleTask启动模式一起出现。它会完毕SingleTask的作用。但事实上SingleTask启动模式默认具有此标记位的作用</p><hr><h3 id="4-FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS"><a href="#4-FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS" class="headerlink" title="4.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS"></a><strong>4.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong></h3><p>具有此标记位的Activity不会出如今历史Activity的列表中，使用场景：当某些情况下我们不希望用户通过历史列表回到Activity时，此标记位便体现了它的效果。它等同于在xml中指定Activity的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:excludeFromRecents=&quot;trure&quot;</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h1 id="四-启动模式的实际应用场景"><a href="#四-启动模式的实际应用场景" class="headerlink" title="四. 启动模式的实际应用场景"></a><strong>四. 启动模式的实际应用场景</strong></h1><p>这四种模式中的Standard模式是最普通的一种，没有什么特别注意。而SingleInstance模式是整个系统的单例模式，在我们的应用中一般不会应用到。所以，这里就具体解说 <strong>SingleTop</strong> 和 <strong>SingleTask</strong>模式的运用场景：</p><h2 id="1-SingleTask模式的运用场景"><a href="#1-SingleTask模式的运用场景" class="headerlink" title="1. SingleTask模式的运用场景"></a><strong>1. SingleTask模式的运用场景</strong></h2><p>最常见的应用场景就是保持我们应用开启后仅仅有一个Activity的实例。最典型的样例就是应用中展示的主页（Home页）。</p><p>假设用户在主页跳转到其他页面，运行多次操作后想返回到主页，假设不使用SingleTask模式，在点击返回的过程中会多次看到主页，这明显就是设计不合理了。</p><hr><hr><hr><h2 id="2-SingleTop模式的运用场景"><a href="#2-SingleTop模式的运用场景" class="headerlink" title="2. SingleTop模式的运用场景"></a><strong>2. SingleTop模式的运用场景</strong></h2><p>假设你在当前的Activity中又要启动同类型的Activity，此时建议将此类型Activity的启动模式指定为SingleTop，能够降低Activity的创建，节省内存！</p><hr><hr><hr><h2 id="3-注意：复用Activity时的生命周期回调"><a href="#3-注意：复用Activity时的生命周期回调" class="headerlink" title="3. 注意：复用Activity时的生命周期回调"></a><strong>3. 注意：复用Activity时的生命周期回调</strong></h2><p>这里还须要考虑一个<strong>Activity跳转时携带页面參数的问题</strong>。</p><p>由于当一个Activity设置了SingleTop或者SingleTask模式后，跳转此Activity出现<strong>复用原有Activity</strong>的情况时，<strong>此Activity的onCreate方法将不会再次运行。onCreate方法仅仅会在第一次创建Activity时被运行。</strong></p><p>而一般onCreate方法中会进行该页面的数据初始化、UI初始化，假设页面的展示数据无关页面跳转传递的參数，则不必操心此问题，若页面展示的数据就是通过getInten() 方法来获取，那么问题就会出现：getInten()获取的一直都是老数据，根本无法接收跳转时传送的新数据！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java对象转json时空值(null)处理</title>
      <link href="/article/Java%E5%AF%B9%E8%B1%A1%E8%BD%ACjson%E6%97%B6%E7%A9%BA%E5%80%BC-null-%E5%A4%84%E7%90%86/"/>
      <url>/article/Java%E5%AF%B9%E8%B1%A1%E8%BD%ACjson%E6%97%B6%E7%A9%BA%E5%80%BC-null-%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Java对象在转json的时候，如果对象里面有属性值为null的话，那么在json序列化的时候要不要序列出来呢？</p></blockquote><a id="more"></a><h2 id="1-fastjson"><a href="#1-fastjson" class="headerlink" title="1 fastjson"></a>1 fastjson</h2><p>fastJson在转换java对象为json的时候，默认是不序列化null值对应的key的也就是说当对象里面的属性为空的时候，在转换成json时，不序列化那些为null值的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.java2Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sogrey.java2Json.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fastjson 版本是 1.2.54</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fastjsonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">"Sogrey"</span>);</span><br><span class="line">String str = JSONObject.toJSONString(user);<span class="comment">// fastjson默认转换是不序列化null值对应的key的</span></span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 输出结果是：&#123;"age":0,"userName":"Sogrey"&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果想把null对应的key序列化出来呢？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果需要序列化null对应的key</span></span><br><span class="line">str = JSONObject</span><br><span class="line">.toJSONString(</span><br><span class="line">user,</span><br><span class="line"><span class="keyword">new</span> SerializerFeature[] &#123; SerializerFeature.WriteMapNullValue &#125;);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 输出结果是： &#123;"age":0,"job":null,"userName":"Sogrey"&#125;</span></span><br></pre></td></tr></table></figure><p>想字符类型字段如果为null,转换输出为”“,而非null ，需要多加一个参数：WriteNullStringAsEmpty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想字符类型字段如果为null,转换输出为"",而非null ，需要多加一个参数：WriteNullStringAsEmpty</span></span><br><span class="line">str = JSONObject.toJSONString(user, <span class="keyword">new</span> SerializerFeature[] &#123;</span><br><span class="line">SerializerFeature.WriteMapNullValue,</span><br><span class="line">SerializerFeature.WriteNullStringAsEmpty &#125;);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">//输出结果是：&#123;"age":0,"job":"","userName":"Sogrey"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-Gson"><a href="#2-Gson" class="headerlink" title="2  Gson"></a>2  Gson</h2><p> gson和fastjson一样，默认是不序列化null值对应的key的</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.sogrey.java2Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.sogrey.java2Json.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">"Sogrey"</span>);</span><br><span class="line">Gson g = <span class="keyword">new</span> GsonBuilder().create();</span><br><span class="line">String str = g.toJson(user);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// &#123;"userName":"Sogrey","age":0&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 若是想序列化null值对应的key，只需要将以上创建代码改成以下代码就行：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">new</span> GsonBuilder().serializeNulls().create();</span><br><span class="line">str = g.toJson(user);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// &#123;"userName":"Sogrey","age":0,"job":null&#125;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/Sogrey/JavaBean2Json" target="_blank" rel="noopener">github</a></p>]]></content>
      
      
      <categories>
          
          <category> Json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android版本和API Level对应关系</title>
      <link href="/article/Android%E7%89%88%E6%9C%AC%E5%92%8CAPI-Level%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/"/>
      <url>/article/Android%E7%89%88%E6%9C%AC%E5%92%8CAPI-Level%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>平台版本</td><td>API 级别</td><td>VERSION_CODE</td><td>备注</td></tr><tr><td><a href="https://developer.android.com/about/versions/pie/android-9.0.html" target="_blank" rel="noopener">Android 9.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/28/changes.html" target="_blank" rel="noopener">28</a></td><td><code>Pie</code></td><td><a href="https://developer.android.com/about/versions/pie/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/oreo/android-8.1.html" target="_blank" rel="noopener">Android 8.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/27/changes.html" target="_blank" rel="noopener">27</a></td><td><code>Oreo</code></td><td><a href="https://developer.android.com/about/versions/oreo/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/oreo/android-8.0.html" target="_blank" rel="noopener">Android 8.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/26/changes.html" target="_blank" rel="noopener">26</a></td><td><code>Oreo</code></td><td><a href="https://developer.android.com/about/versions/oreo/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/nougat/android-7.1.html" target="_blank" rel="noopener">Android 7.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/25/changes.html" target="_blank" rel="noopener">25</a></td><td><code>Nougat</code></td><td><a href="https://developer.android.com/about/versions/nougat/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/nougat/android-7.0.html" target="_blank" rel="noopener">Android 7.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/24/changes.html" target="_blank" rel="noopener">24</a></td><td><code>Nougat</code></td><td><a href="https://developer.android.com/about/versions/nougat/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/marshmallow/android-6.0.html" target="_blank" rel="noopener">Android 6.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/23/changes.html" target="_blank" rel="noopener">23</a></td><td><code>Marshmallow</code></td><td><a href="https://developer.android.com/about/versions/marshmallow/index.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-5.1.html" target="_blank" rel="noopener">Android 5.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/22/changes.html" target="_blank" rel="noopener">22</a></td><td><code>LOLLIPOP_MR1</code></td><td><a href="https://developer.android.com/about/versions/lollipop.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-5.0.html" target="_blank" rel="noopener">Android 5.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/21/changes.html" target="_blank" rel="noopener">21</a></td><td><code>LOLLIPOP</code></td><td></td></tr><tr><td>Android 4.4W</td><td><a href="https://developer.android.com/sdk/api_diff/20/changes.html" target="_blank" rel="noopener">20</a></td><td><code>KITKAT_WATCH</code></td><td>仅限 KitKat for Wearables</td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.4.html" target="_blank" rel="noopener">Android 4.4</a></td><td><a href="https://developer.android.com/sdk/api_diff/19/changes.html" target="_blank" rel="noopener">19</a></td><td><code>KITKAT</code></td><td><a href="https://developer.android.com/about/versions/kitkat.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.3.html" target="_blank" rel="noopener">Android 4.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/18/changes.html" target="_blank" rel="noopener">18</a></td><td><code>JELLY_BEAN_MR2</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.2.html" target="_blank" rel="noopener">Android 4.2、4.2.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/17/changes.html" target="_blank" rel="noopener">17</a></td><td><code>JELLY_BEAN_MR1</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html#android-42" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.1.html" target="_blank" rel="noopener">Android 4.1、4.1.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/16/changes.html" target="_blank" rel="noopener">16</a></td><td><code>JELLY_BEAN</code></td><td><a href="https://developer.android.com/about/versions/jelly-bean.html#android-41" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.0.3.html" target="_blank" rel="noopener">Android 4.0.3、4.0.4</a></td><td><a href="https://developer.android.com/sdk/api_diff/15/changes.html" target="_blank" rel="noopener">15</a></td><td><code>ICE_CREAM_SANDWICH_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-4.0-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-4.0.html" target="_blank" rel="noopener">Android 4.0、4.0.1、4.0.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/14/changes.html" target="_blank" rel="noopener">14</a></td><td><code>ICE_CREAM_SANDWICH</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.2.html" target="_blank" rel="noopener">Android 3.2</a></td><td><a href="https://developer.android.com/sdk/api_diff/13/changes.html" target="_blank" rel="noopener">13</a></td><td><code>HONEYCOMB_MR2</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.1.html" target="_blank" rel="noopener">Android 3.1.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/12/changes.html" target="_blank" rel="noopener">12</a></td><td><code>HONEYCOMB_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-3.1-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-3.0.html" target="_blank" rel="noopener">Android 3.0.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/11/changes.html" target="_blank" rel="noopener">11</a></td><td><code>HONEYCOMB</code></td><td><a href="https://developer.android.com/about/versions/android-3.0-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.3.3.html" target="_blank" rel="noopener">Android 2.3.4 Android 2.3.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/10/changes.html" target="_blank" rel="noopener">10</a></td><td><code>GINGERBREAD_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-2.3-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.3.html" target="_blank" rel="noopener">Android 2.3.2 Android 2.3.1 Android 2.3</a></td><td><a href="https://developer.android.com/sdk/api_diff/9/changes.html" target="_blank" rel="noopener">9</a></td><td><code>GINGERBREAD</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.2.html" target="_blank" rel="noopener">Android 2.2.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/8/changes.html" target="_blank" rel="noopener">8</a></td><td><code>FROYO</code></td><td><a href="https://developer.android.com/about/versions/android-2.2-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.1.html" target="_blank" rel="noopener">Android 2.1.x</a></td><td><a href="https://developer.android.com/sdk/api_diff/7/changes.html" target="_blank" rel="noopener">7</a></td><td><code>ECLAIR_MR1</code></td><td><a href="https://developer.android.com/about/versions/android-2.0-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.0.1.html" target="_blank" rel="noopener">Android 2.0.1</a></td><td><a href="https://developer.android.com/sdk/api_diff/6/changes.html" target="_blank" rel="noopener">6</a></td><td><code>ECLAIR_0_1</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-2.0.html" target="_blank" rel="noopener">Android 2.0</a></td><td><a href="https://developer.android.com/sdk/api_diff/5/changes.html" target="_blank" rel="noopener">5</a></td><td><code>ECLAIR</code></td><td></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.6.html" target="_blank" rel="noopener">Android 1.6</a></td><td><a href="https://developer.android.com/sdk/api_diff/4/changes.html" target="_blank" rel="noopener">4</a></td><td><code>DONUT</code></td><td><a href="https://developer.android.com/about/versions/android-1.6-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.5.html" target="_blank" rel="noopener">Android 1.5</a></td><td><a href="https://developer.android.com/sdk/api_diff/3/changes.html" target="_blank" rel="noopener">3</a></td><td><code>CUPCAKE</code></td><td><a href="https://developer.android.com/about/versions/android-1.5-highlights.html" target="_blank" rel="noopener">平台亮点</a></td></tr><tr><td><a href="https://developer.android.com/about/versions/android-1.1.html" target="_blank" rel="noopener">Android 1.1</a></td><td>2</td><td><code>BASE_1_1</code></td><td></td></tr><tr><td>Android 1.0</td><td>1</td><td><code>BASE</code></td></tr></tbody></table><p>摘自<a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels" target="_blank" rel="noopener">Android Developers#<uses-sdk></uses-sdk></a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter 路由跳转</title>
      <link href="/article/Flutter%20%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/"/>
      <url>/article/Flutter%20%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><h4 id="1-注册"><a href="#1-注册" class="headerlink" title="1. 注册"></a>1. 注册</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Flutter 示例'</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> MyHomePage(title: <span class="string">'Flutter 示例主页'</span>),</span><br><span class="line">      routes: &#123; <span class="comment">//静态注册路由，不能传递参数</span></span><br><span class="line">        <span class="string">"SecondPage"</span>: (BuildContext context) =&gt; <span class="keyword">new</span> Second()</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="comment">//      routes: &lt;String, WidgetBuilder&gt;&#123;</span></span><br><span class="line"><span class="comment">//        // 这里可以定义静态路由，不能传递参数</span></span><br><span class="line"><span class="comment">//        '/router/second': (_) =&gt; new Second(),</span></span><br><span class="line"><span class="comment">//      &#125;,</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///这种路由的缺点是不能传递参数。</span></span><br><span class="line">Navigator.pushNamed(context, <span class="string">"SecondPage"</span>);</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><h4 id="有参跳转"><a href="#有参跳转" class="headerlink" title="有参跳转"></a>有参跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到新的 页面我们需要调用 navigator.push方法  -</span></span><br><span class="line">Navigator.push(context,</span><br><span class="line"><span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">    builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Second(title: <span class="string">"第二个页面"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="无参跳转"><a href="#无参跳转" class="headerlink" title="无参跳转"></a>无参跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到新的 页面我们需要调用 navigator.push方法  -</span></span><br><span class="line">Navigator.push(</span><br><span class="line">    context,</span><br><span class="line">    <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">        builder: (context) =&gt; <span class="keyword">new</span> Second()</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Sogrey/flutter-demos/blob/master/flutter_route/apks/app-release.apk?raw=true" target="_blank" rel="noopener">apk</a>，<a href="https://github.com/Sogrey/flutter-demos/tree/master/flutter_route" target="_blank" rel="noopener">github</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 动态调用外部jar/dex</title>
      <link href="/article/Android%20%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8jar&amp;dex/"/>
      <url>/article/Android%20%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8jar&amp;dex/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>现有需求，需要做一个生成外部jar，去验证已发布App有效性，这个外部jar可更新，而App不用重新发布之需要重新发布这个jar包即可。此次记录这种需求开发，jar包中以MD5加密为例。</p><a id="more"></a><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>跟往常一样，创建android studio 项目，其中包含两个app Module和两个library Module，目前都是空项目。如下图：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813151634.jpg?raw=true" alt=""></p><p>其中：</p><ul><li><code>app</code>:发布App，需要验证的App项目。</li><li><code>app2</code>:用于直接依赖测试打包jar项目。</li><li><code>lib_interface</code>:这个项目里只有一个接口<code>interface</code>，提供了一个或多个可供调用的方法,所有用到验证jar包的项目包括发布jar项目本身都要依赖于它，比如此项目中另外三个项目都要依赖于此library Module。</li><li><code>lib_md5</code>:用于发包jar包的项目。</li></ul><h2 id="创建接口类"><a href="#创建接口类" class="headerlink" title="创建接口类"></a>创建接口类</h2><p>首先处理<code>lib_interface</code>,在<code>lib_interface</code>中新建一个<code>interface</code>接口类<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_interface/src/main/java/org/sogrey/jarinterface/Md5JarInterface.java" target="_blank" rel="noopener">Md5JarInterface.java</a></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152011.jpg?raw=true" alt=""></p><p>里面只有一个方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Md5值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getMd5</span><span class="params">(String content)</span></span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152128.jpg?raw=true" alt=""></p><h2 id="实现接口类方法"><a href="#实现接口类方法" class="headerlink" title="实现接口类方法"></a>实现接口类方法</h2><p>要实现上面接口类方法，转到<code>lib_md5</code> module,首先需要先依赖<code>lib_interface</code>:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152251.jpg?raw=true" alt=""></p><p>在<code>lib_md5</code>的<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/build.gradle" target="_blank" rel="noopener">build.gradle</a>多了句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation project(<span class="string">':lib_interface'</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152320.jpg?raw=true" alt=""></p><p>依赖好之后，在<code>lib_md5</code>新建一个<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/src/main/java/org/sogrey/md5/impl/Md5Utils.java" target="_blank" rel="noopener">Md5Utils.java</a>实现<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_interface/src/main/java/org/sogrey/jarinterface/Md5JarInterface.java" target="_blank" rel="noopener">Md5JarInterface</a>接口:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152416.jpg?raw=true" alt=""></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152504.jpg?raw=true" alt=""></p><p>下面引进<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/src/main/java/org/sogrey/md5/MD5.java" target="_blank" rel="noopener">MD5.java</a>(md5算法网上多得是)，并实现<code>getMd5()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMd5</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MD5.MD5(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时一个简单的库项目功能基本完成，测试通过后就能发包jar包了。</p><h2 id="依赖测试"><a href="#依赖测试" class="headerlink" title="依赖测试"></a>依赖测试</h2><p>完成了库项目功能开发，先直接依赖测试下结果。让<code>app2</code> module依赖于<code>lib_interface</code>和<code>lib_md5</code>：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152617.jpg?raw=true" alt=""></p><p>简单修改<a href="https://github.com/Sogrey/LoadJar/blob/master/app2/src/main/res/layout/activity_main.xml" target="_blank" rel="noopener">activity_main.xml</a>:</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813152751.jpg?raw=true" alt=""></p><p>在<a href="https://github.com/Sogrey/LoadJar/blob/master/app2/src/main/java/org/sogrey/app2/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a>添加下面代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TextView txtResult = findViewById(R.id.txt_result);</span><br><span class="line">txtResult.setText(<span class="keyword">new</span> Md5Utils().getMd5(<span class="string">"123456"</span>));</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153202.jpg?raw=true" alt=""></p><p>编译运行测试：</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153401.jpg?raw=true" alt=""></p><p>测试正常。</p><h2 id="混淆打包jar"><a href="#混淆打包jar" class="headerlink" title="混淆打包jar"></a>混淆打包jar</h2><p>经过测试<code>lib_md5</code>项目功能正常，下面准备混淆打包。</p><p>混淆模板参考<a href="https://sogrey.github.io/notes/%E6%B7%B7%E6%B7%86%E6%A8%A1%E6%9D%BF">这里</a>。</p><p>但须注意，对外调用的接口方法是不能被混淆，否则后找不到,修改<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/proguard-rules.pro" target="_blank" rel="noopener">proguard-rules.pro</a>添加如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-keep public class org.sogrey.md5.impl.Md5Utils</span><br><span class="line">-keepclasseswithmembers public class org.sogrey.md5.impl.Md5Utils&#123;</span><br><span class="line">   public String getMd5();</span><br><span class="line">&#125;</span><br><span class="line">-keep class org.sogrey.md5.impl.Md5Utils&#123;</span><br><span class="line">   public &lt;methods&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813153930.jpg?raw=true" alt=""></p><p>编辑<code>lib_md5</code>的<a href="https://github.com/Sogrey/LoadJar/blob/master/lib_md5/build.gradle" target="_blank" rel="noopener">build.gradle</a>,修改buildTypes.release.minifyEnabled 为 true.</p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155019.jpg?raw=true" alt=""></p><p>添加task：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def SDK_BASENAME = <span class="string">"MD5"</span> //名称</span><br><span class="line">def SDK_VERSION = <span class="string">"_V1.0"</span> //版本</span><br><span class="line">def sdkDestinationPath = <span class="string">"build"</span> //生成保存位置</span><br><span class="line">def zipFile = file(<span class="string">'build/intermediates/bundles/release/classes.jar'</span>) //打包源文件</span><br><span class="line"></span><br><span class="line">task deleteBuild(<span class="built_in">type</span>: Delete) &#123;</span><br><span class="line">    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + <span class="string">".jar"</span></span><br><span class="line">&#125;</span><br><span class="line">task makeJar(<span class="built_in">type</span>: Jar) &#123;</span><br><span class="line">    from zipTree(zipFile)</span><br><span class="line">    from fileTree(dir: <span class="string">'src/main'</span>,includes: [<span class="string">'assets/**'</span>])//将assets目录打入jar包</span><br><span class="line">    baseName = SDK_BASENAME + SDK_VERSION</span><br><span class="line">    destinationDir = file(sdkDestinationPath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeJar.dependsOn(deleteBuild, build)</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813154519.jpg?raw=true" alt=""></p><p><code>makeJar</code> task作用是打包生成jar，但是生成的jar是没有混淆的，再添加task:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">task proguardJar(dependsOn: [<span class="string">'makeJar'</span>], <span class="built_in">type</span>: proguard.gradle.ProGuardTask) &#123;</span><br><span class="line">    //Android 默认的 proguard 文件</span><br><span class="line">    configuration android.getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>)</span><br><span class="line">    //manifest 注册的组件对应的 proguard 文件</span><br><span class="line">    configuration <span class="string">'proguard-rules.pro'</span></span><br><span class="line">    String inJar = makeJar.archivePath.getAbsolutePath()</span><br><span class="line">    //输入 jar</span><br><span class="line">    injars inJar</span><br><span class="line">    //输出 jar</span><br><span class="line">    outjars inJar.substring(0, inJar.lastIndexOf(File.separator)) + <span class="string">"/proguard-<span class="variable">$&#123;makeJar.archiveName&#125;</span>"</span></span><br><span class="line">    //设置不删除未引用的资源(类，方法等)</span><br><span class="line">    dontshrink</span><br><span class="line">    Plugin plugin = getPlugins().hasPlugin(<span class="string">"AppPlugin"</span>) ?</span><br><span class="line">            getPlugins().findPlugin(<span class="string">"AppPlugin"</span>) :</span><br><span class="line">            getPlugins().findPlugin(<span class="string">"LibraryPlugin"</span>)</span><br><span class="line">    <span class="keyword">if</span> (plugin != null) &#123;</span><br><span class="line">        List&lt;String&gt; runtimeJarList</span><br><span class="line">        <span class="keyword">if</span> (plugin.getMetaClass().getMetaMethod(<span class="string">"getRuntimeJarList"</span>)) &#123;</span><br><span class="line">            runtimeJarList = plugin.getRuntimeJarList()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (android.getMetaClass().getMetaMethod(<span class="string">"getBootClasspath"</span>)) &#123;</span><br><span class="line">            runtimeJarList = android.getBootClasspath()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            runtimeJarList = plugin.getBootClasspath()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String runtimeJar : runtimeJarList) &#123;</span><br><span class="line">            //给 proguard 添加 runtime</span><br><span class="line">            libraryjars(runtimeJar)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155807.jpg?raw=true" alt=""></p><p><code>proguardJar</code> task 用于混淆打包。可以看到<code>proguardJar</code>里调用了<code>makeJar</code><br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155854.jpg?raw=true" alt=""></p><p>执行task,点击android studio 右上角<code>Gradle</code>展开找到<code>:lib_md5</code>,在<code>task</code>&gt;<code>other</code>里找到我们刚定义的task：<code>makeJar</code>和<code>proguardJar</code>，直接双击执行，我们需要混淆的直接双击<code>proguardJar</code> task,等待编译完成，会在<code>build</code>里生成了两个jar包：<code>MD5_V1.0.jar</code>和<code>proguard-MD5_V1.0.jar</code>，从文件名就能看出<code>proguard-MD5_V1.0.jar</code>是混淆过的。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155922.jpg?raw=true" alt=""></p><p>直接zip解压可直接看到包结构可class文件:<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813155642.jpg?raw=true" alt=""></p><h2 id="jar包dx处理"><a href="#jar包dx处理" class="headerlink" title="jar包dx处理"></a>jar包dx处理</h2><p>jar包生成好之后，下面就要进行dx处理，把生成的jar拷贝到Android SDK目录下<code>build-tools\28.0.1</code>，后面的版本根据你自己的版本：<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160050.jpg?raw=true" alt=""></p><p>执行下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dx --dex --output=proguard-MD5-dex_V1.0.jar proguard-MD5_V1.0.jar</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160501.jpg?raw=true" alt=""></p><p>将会生成目标jar包：<code>proguard-MD5-dex_V1.0.jar</code><br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160542.jpg?raw=true" alt=""></p><p>同样我们zip解压后看到的是一个dex文件。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160636.jpg?raw=true" alt=""></p><h2 id="引入外部jar测试"><a href="#引入外部jar测试" class="headerlink" title="引入外部jar测试"></a>引入外部jar测试</h2><p>jar包dx处理完毕后就可以使用<code>app</code> module加载外部jar测试了，当然首先<code>app</code>须依赖于<code>lib_interface</code>。</p><p>为方便安装测试，我们把dx处理好的jar放在assets文件夹下，app安装后拷贝到sd卡再加载。<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813160836.jpg?raw=true" alt=""></p><p><a href="https://github.com/Sogrey/LoadJar/blob/master/app/src/main/java/org/sogrey/loadjar/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a>中代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">File cacheFile = FileUtils.getCacheDir(getApplicationContext());</span><br><span class="line">File libFile = <span class="keyword">new</span> File(cacheFile, <span class="string">"lib"</span>);</span><br><span class="line"><span class="keyword">if</span> (!libFile.exists()) libFile.mkdirs();</span><br><span class="line">String internalPath = cacheFile.getAbsolutePath() + File.separator + <span class="string">"lib"</span> + File.separator + jarName;</span><br><span class="line">File desFile = <span class="keyword">new</span> File(internalPath);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!desFile.exists()) &#123;</span><br><span class="line">        desFile.createNewFile();</span><br><span class="line">        FileUtils.copyFiles(<span class="keyword">this</span>, jarName, desFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上是将jar拷贝到sd卡，是为测试方便，实际应用中应该是下载保存到sd卡.</span></span><br><span class="line"><span class="comment">//下面开始加载dex class</span></span><br><span class="line">DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(internalPath, libFile.getAbsolutePath(), <span class="keyword">null</span>, getClassLoader());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//加载的类名为jar文件里面完整类名，写错会找不到此类hh</span></span><br><span class="line">    Class libClazz = dexClassLoader.loadClass(className);</span><br><span class="line">    <span class="keyword">final</span> Md5JarInterface md5JarInterface = (Md5JarInterface) libClazz.newInstance();</span><br><span class="line">    <span class="keyword">if</span> (md5JarInterface != <span class="keyword">null</span>) &#123;</span><br><span class="line">        txtResult.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                txtResult.setText(md5JarInterface.getMd5(<span class="string">"123456"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码通过<code>DexClassLoader</code>类加载器找到对应的类，该类实现了<code>Md5JarInterface</code>接口方法，调用该方法得到结果。</p><p>最后因为有SD卡文件读写，别忘了添加权限：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>android 6.0动态权限申请请自行百度。</p><p>测试之：<br><img src="https://github.com/Sogrey/LoadJar/blob/master/screenShot/TIM-20180813162747.jpg?raw=true" alt=""></p><p>项目地址：<a href="https://github.com/Sogrey/LoadJar" target="_blank" rel="noopener">github</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> jar </tag>
            
            <tag> dex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JNI Md5加密生成so文件</title>
      <link href="/article/JNI%20Md5%E5%8A%A0%E5%AF%86%E7%94%9F%E6%88%90so%E6%96%87%E4%BB%B6/"/>
      <url>/article/JNI%20Md5%E5%8A%A0%E5%AF%86%E7%94%9F%E6%88%90so%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JNI Md5加密生成so文件</p><p>IDE工具:Android Studio<br>编译环境:JDK1.8+Android SDK+NDK</p><a id="more"></a><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1 新建项目"></a>1 新建项目</h2><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/新建项目-Android-jni-md5.jpg" alt=""></p><p>选中“Include C++ support”,一直“Next”.<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/选择c++Support.jpg" alt=""></p><p>等待项目构建完成后<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/项目目录结构.jpg" alt=""></p><p>看到 <code>java</code>包同级有个<code>cpp</code>的包就是存放c++代码的。</p><p>而里<code>native-lib.cpp</code>的代码很简单，就是打印出一句“Hello from C++”:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jstring</span><br><span class="line"></span><br><span class="line">JNICALL</span><br><span class="line">Java_sogrey_android_1jni_1md5_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行一下：<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803161827.jpg" alt=""></p><p>这就表示我们的C++环境正常，可以开始写我们自己的代码了。</p><h2 id="2-新建Jni工具类"><a href="#2-新建Jni工具类" class="headerlink" title="2 新建Jni工具类"></a>2 新建Jni工具类</h2><p>新建一个<code>JNIUtils.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sogrey.android_jni_md5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Sogrey on 2018/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNIUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Used to load the 'native-lib' library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A native method that is implemented by the 'native-lib' native library,</span></span><br><span class="line"><span class="comment">     * which is packaged with this application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把<code>MainActivity.java</code>中的相关代码删掉</p><blockquote><p>tv.setText(stringFromJNI());</p></blockquote><p>也改成</p><blockquote><p>tv.setText(new JNIUtils().stringFromJNI());</p></blockquote><h2 id="3-生成-h文件-编写cpp文件"><a href="#3-生成-h文件-编写cpp文件" class="headerlink" title="3 生成.h文件,编写cpp文件"></a>3 生成.h文件,编写cpp文件</h2><p>Android studio的Terminal中依次执行命令：</p><blockquote><p>cd app/src/main/java<br>javah -jni sogrey.android_jni_md5.JNIUtils</p></blockquote><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM—20180803164015.jpg" alt=""></p><p>将生成的<code>sogrey_android_jni_md5_JNIUtils.h</code>头文件剪贴到<code>cpp</code>包下，并复制一份重命名为<code>sogrey_android_jni_md5_JNIUtils.cpp</code>.<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803164408.jpg" alt=""></p><p>编辑复制的<code>.cpp</code>文件，删掉多余代码只留下需要我们实现的那个方法,加上返回方法体，并导入之前的<code>.h</code>文件<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803164549.jpg" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sogrey_android_jni_md5_JNIUtils.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    stringFromJNI</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_stringFromJNI</span><br><span class="line">        (JNIEnv *env, jobject obj)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法需要返回<code>jstring</code>,可以参照之前<code>native-lib.cpp</code>里的代码实现，引入提示需要导入<code>string</code>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM截图20180803165042.jpg" alt=""></p><p>则最终代码就是：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sogrey_android_jni_md5_JNIUtils.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    stringFromJNI</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_stringFromJNI</span><br><span class="line">        (JNIEnv *env, jobject obj)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-修改CMakeLists-txt文件"><a href="#4-修改CMakeLists-txt文件" class="headerlink" title="4 修改CMakeLists.txt文件"></a>4 修改<code>CMakeLists.txt</code>文件</h2><p>我们刚刚添加了一个新的c++文件，现将它加到CMakeLists中，刚才的<code>native-lib.cpp</code>已经没有用了，注掉它<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803165959.jpg" alt=""></p><p>重新编译运行看会不会得到和之前一样的结果。（结果是一样的）<br>在<code>build</code>&gt;<code>intermediates</code>&gt;<code>cmake</code>&gt;<code>debug</code>&gt;<code>obj</code>下就能找到生成的.so文件了<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803170704.jpg" alt=""></p><h2 id="5-添加getMd5-String-的native方法"><a href="#5-添加getMd5-String-的native方法" class="headerlink" title="5 添加getMd5(String)的native方法"></a>5 添加<code>getMd5(String)</code>的native方法</h2><p>在<code>JNIUtils.java</code>中添加下面native方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定字符串md5值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 要md5加密的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> md5加密串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getMd5</span><span class="params">(String content)</span></span>;</span><br></pre></td></tr></table></figure></p><p>重复第三步操作。或者熟练了直接在<code>sogrey_android_jni_md5_JNIUtils.h</code>文件中添加：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span><br><span class="line">        (JNIEnv *, jobject, jstring);</span><br></pre></td></tr></table></figure></p><p>同样，需要在<code>sogrey_android_jni_md5_JNIUtils.cpp</code>中去实现它：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span><br><span class="line">        (JNIEnv *env, jobject obj, jstring str)&#123;</span><br><span class="line">    <span class="comment">//TODO 实现方法逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6-实现MD5加密"><a href="#6-实现MD5加密" class="headerlink" title="6 实现MD5加密"></a>6 实现MD5加密</h2><p>md5的加密方法网上很多，这里给出一个c++实现的[<a href="https://github.com/Sogrey/AndroidJniMD5/blob/master/app/src/main/cpp/MD5.cpp" target="_blank" rel="noopener">MD5.cpp</a>,<a href="https://github.com/Sogrey/AndroidJniMD5/blob/master/app/src/main/cpp/MD5.h" target="_blank" rel="noopener">MD5.h</a>].直接将两个文件引入到cpp包下，<br>在<code>sogrey_android_jni_md5_JNIUtils.cpp</code>引入</p><blockquote><p>#include “MD5.h”</p></blockquote><p>则<code>getMD5</code>方法实现：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     sogrey_android_jni_md5_JNIUtils</span></span><br><span class="line"><span class="comment"> * Method:    getMd5</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_sogrey_android_1jni_1md5_JNIUtils_getMd5</span><br><span class="line">        (JNIEnv *env, jobject obj, jstring str) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *originStr;</span><br><span class="line">    <span class="comment">//将jstring转化成char *类型</span></span><br><span class="line">    originStr = env-&gt;GetStringUTFChars(str,JNI_FALSE);</span><br><span class="line">    MD5 md5 = MD5(originStr);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> md5Result = md5.hexdigest();</span><br><span class="line"><span class="comment">//    //将char *类型转化成jstring返回给Java层</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(md5Result.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中：JNI_FALSE 是个宏定义表示 jboolean false<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_TRUE 1</span></span><br></pre></td></tr></table></figure></p><p>运行一把，得到md5字符串<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180803225817.jpg" alt=""></p><h2 id="7-生成-so文件"><a href="#7-生成-so文件" class="headerlink" title="7 生成.so文件"></a>7 生成.so文件</h2><p>在cmake.txt中添加</p><pre><code>#设置生成的so动态库最后输出的路径set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../jniLibs/${ANDROID_ABI})</code></pre><p>用来指定生成的so文件存储路径，点击<code>build</code>&gt;<code>Make project</code>,看到在<code>jniLibs</code>文件夹下生成支持4中不同内核的so文件。<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804002050.jpg" alt=""></p><p>想要配置指定内核平台，修改<code>Module</code>下的<code>build.gradle</code>中的<code>android</code>&gt;<code>defaultConfig</code> 添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags &quot;&quot;</span><br><span class="line">                abiFilters &quot;arm64-v8a&quot;,&quot;armeabi-v7a&quot;,&quot;x86&quot;,&quot;x86_64&quot;</span><br><span class="line">//Error:ABIs [armeabi] are not supported for platform. Supported ABIs are [armeabi-v7a, arm64-v8a, x86, x86_64].</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h2 id="8-修改库名称"><a href="#8-修改库名称" class="headerlink" title="8 修改库名称"></a>8 修改库名称</h2><p>默认生成的so库名称是<code>native-lib</code>,怎么修改为自定义的名称呢。</p><p>首先，修改<code>CMakeLists.txt</code>内容：修改<code>add_library</code>和<code>target_link_libraries</code>第一个参数为我们想自定定义的名称，比如<code>md5Lib</code><br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804003217.jpg" alt=""></p><p>同样需要修改<code>JNIUtils.java</code>中<code>System.loadLibrary(String)</code>的参数为上面我们自定义的名称<code>md5Lib</code><br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804003613.jpg" alt=""></p><p>重新点击<code>build</code>&gt;<code>Make project</code>,看到在<code>jniLibs</code>文件夹下生成新的so文件。<br><img src="https://raw.githubusercontent.com/Sogrey/AndroidJniMD5/master/screenshot/TIM-20180804004506.jpg" alt=""></p><p>项目源码地址<a href="https://github.com/Sogrey/AndroidJniMD5" target="_blank" rel="noopener">github</a></p>]]></content>
      
      
      <categories>
          
          <category> JNI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JNI </tag>
            
            <tag> Md5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pe装机，开机设置启动项快捷键</title>
      <link href="/article/PE%E8%A3%85%E6%9C%BA%EF%BC%8C%E5%BC%80%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%90%AF%E5%8A%A8%E9%A1%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/article/PE%E8%A3%85%E6%9C%BA%EF%BC%8C%E5%BC%80%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%90%AF%E5%8A%A8%E9%A1%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>PE装机启动键来了。</p><table><thead><tr><th style="text-align:center">组装机主板</th><th style="text-align:center"></th><th style="text-align:center">品牌笔记本</th><th style="text-align:center"></th><th style="text-align:center">品牌台式机</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">主板品牌</td><td style="text-align:center">启动按键</td><td style="text-align:center">笔记本品牌</td><td style="text-align:center">启动按键</td><td style="text-align:center">台式机品牌</td><td style="text-align:center">启动按键</td></tr><tr><td style="text-align:center">华硕</td><td style="text-align:center">F8</td><td style="text-align:center">联想</td><td style="text-align:center">F12</td><td style="text-align:center">联想</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">技嘉</td><td style="text-align:center">F12</td><td style="text-align:center">宏基</td><td style="text-align:center">F12</td><td style="text-align:center">惠普</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">微星</td><td style="text-align:center">F11</td><td style="text-align:center">华硕</td><td style="text-align:center">ESC</td><td style="text-align:center">宏基</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">映泰</td><td style="text-align:center">F9</td><td style="text-align:center">惠普</td><td style="text-align:center">F9</td><td style="text-align:center">戴尔</td><td style="text-align:center">ESC</td></tr><tr><td style="text-align:center">梅捷</td><td style="text-align:center">ESC/F12</td><td style="text-align:center">联想ThinkPad</td><td style="text-align:center">F12</td><td style="text-align:center">神舟</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">七彩虹</td><td style="text-align:center">ESC/F11</td><td style="text-align:center">戴尔</td><td style="text-align:center">F12</td><td style="text-align:center">华硕</td><td style="text-align:center">F8</td></tr><tr><td style="text-align:center">华擎</td><td style="text-align:center">F11</td><td style="text-align:center">神舟</td><td style="text-align:center">F12</td><td style="text-align:center">方正</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">斯巴达克</td><td style="text-align:center">ESC</td><td style="text-align:center">东芝</td><td style="text-align:center">F12</td><td style="text-align:center">清华同方</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">昂达</td><td style="text-align:center">F11</td><td style="text-align:center">三星</td><td style="text-align:center">F12</td><td style="text-align:center">海尔</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">双敏</td><td style="text-align:center">ESC</td><td style="text-align:center">IBM</td><td style="text-align:center">F12</td><td style="text-align:center">明基</td><td style="text-align:center">F8</td></tr><tr><td style="text-align:center">翔升</td><td style="text-align:center">F10</td><td style="text-align:center">富士通</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">精英</td><td style="text-align:center">ESC/F11</td><td style="text-align:center">海尔</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">冠盟</td><td style="text-align:center">F11/F12</td><td style="text-align:center">方正</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">富士康</td><td style="text-align:center">ESC/F12</td><td style="text-align:center">清华同方</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">顶星</td><td style="text-align:center">F11/F12</td><td style="text-align:center">微星</td><td style="text-align:center">F11</td></tr><tr><td style="text-align:center">铭瑄</td><td style="text-align:center">ESC</td><td style="text-align:center">明基</td><td style="text-align:center">F9</td></tr><tr><td style="text-align:center">盈通</td><td style="text-align:center">F8</td><td style="text-align:center">技嘉</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">捷波</td><td style="text-align:center">ESC</td><td style="text-align:center">Gateway</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">Intel</td><td style="text-align:center">F12</td><td style="text-align:center">eMachines</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> VS code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VS code 插件</title>
      <link href="/article/VS-code-%E6%8F%92%E4%BB%B6/"/>
      <url>/article/VS-code-%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>VS CODE 插件收集<br><a id="more"></a></p><ul><li><ol><li>live-server 编辑浏览html网页</li></ol></li></ul><p><a href="https://github.com/tapio/live-server" target="_blank" rel="noopener">github</a></p><p>第一步： 安装Visual Studio Code + Node.JS</p><p>第二步：通过如下命令行安装live-server</p><p>在命令符中输入 <code>npm install -g live-server</code>进行安装</p><p>如果<code>npm install -g live-server</code>安装报错就用<code>npm install live-server -gf</code>安装</p><p>第三步：打开Visual Studio Code编写HTML代码，保存。</p><p>第四步：右击HTML文件所在的文件夹，选择“在命令提示符中打开”</p><p>第五步：输入<code>live-server</code>命令</p><p>第六步：选择HTML页面浏览即可</p><ul><li><ol><li>Markdown Preview Enhanced  作者：Yiyi Wang</li></ol></li></ul><p><a href="https://github.com/shd101wyy/vscode-markdown-preview-enhanced" target="_blank" rel="noopener">github</a></p><p>VS code 扩展直接搜索 <code>Markdown Preview Enhanced</code> 安装即可。</p><ul><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode" target="_blank" rel="noopener">Polacode</a>  可以把代码生成图片（有些地方发代码结构会乱也没有代码高亮，这时候就可以生成图片再发）。</li></ol></li></ul><ol><li>快捷键 <code>Ctrl + Shift + P</code> 呼出命令窗 输入 <code>Polacode</code> </li><li>将要生成图片的代码复制到 Polacode 窗口</li><li>点击最下面按钮保存图片</li></ol><ul><li><ol><li>另一个 <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank" rel="noopener">Live Server</a> ：可以一键在本地启动服务器。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint</a> ：检查 js 语法规范，你可以使用不同的规范，如 airbnb 、standard 、google。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="noopener">TSLint</a> ：检查 typescript 语法规范。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint" target="_blank" rel="noopener">Stylelint</a> ：检查 CSS/SCSS/Less 语法规范。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="noopener">Markdownlint</a> ：检查 markdown 语法规范。</li></ol></li><li><ol><li><a href="https://emmet.io/" target="_blank" rel="noopener">Emmet</a> ：大家应该很熟悉这个插件了（很好用），VS Code 已经内置了，很到位。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="noopener">Auto Close Tag</a> ：自动闭合 html 等标签 （&lt;/…&gt;）。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="noopener">Auto Rename Tag</a> ：修改 html 标签时，自动修改闭合标签。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense" target="_blank" rel="noopener">Path Intellisense</a> ：自动提示补全路径。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a> ：可以在编辑器里直接运行代码，查看结果。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color" target="_blank" rel="noopener">Color Picker</a> ：可以直接在编辑器里打开色板，选择各种模式的颜色。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=joelday.docthis" target="_blank" rel="noopener">Document This</a> ：可以给函数、类等自动的加上详细的注释。<br>快捷键 <code>Ctrl+Alt+D</code> and <code>again Ctrl+Alt+D</code></li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="noopener">Git History</a> ：方便的查看git版本管理的详细信息。</li></ol></li><li><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a> ：重点介绍下这个插件，如果你有两台电脑（比如，家里和公司）都使用 VS Code ，可是在公司或家里对 VS Code 安装了插件或者修改了配置，回到家或公司又要重新弄一次，这个插件就能解决问题，同步多台电脑设置。只需要把配置上传到GitHub，在另一个地方下载配置即可</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> VS code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>遍历Map的四种方法</title>
      <link href="/article/%E9%81%8D%E5%8E%86Map%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/article/%E9%81%8D%E5%8E%86Map%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>第一种：普遍使用，二次取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.keySet遍历key和value："</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line"> System.out.println(<span class="string">"key= "</span>+ key + <span class="string">" and value= "</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.entrySet使用iterator遍历key和value："</span>);</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"> Map.Entry entry = it.next();</span><br><span class="line"> System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三种：推荐，尤其是容量大时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.entrySet遍历key和value"</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry : map.entrySet()) &#123;</span><br><span class="line"> System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第四种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"通过Map.values()遍历所有的value，但不能遍历key"</span>);</span><br><span class="line"><span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line"> System.out.println(<span class="string">"value= "</span> + v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>15种CSS居中方式</title>
      <link href="/article/15%E7%A7%8DCSS%E5%B1%85%E4%B8%AD%E6%96%B9%E5%BC%8F/"/>
      <url>/article/15%E7%A7%8DCSS%E5%B1%85%E4%B8%AD%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h1><p>CSS居中是前端工程师经常要面对的问题，也是基本技能之一。今天有时间把CSS居中的方案汇编整理了一下，目前包括水平居中，垂直居中及水平垂直居中方案共15种。如有漏掉的，还会陆续的补充进来，算做是一个备忘录吧。</p><a id="more"></a><h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1 水平居中"></a>1 水平居中</h1><h2 id="1-1-内联元素水平居中"><a href="#1-1-内联元素水平居中" class="headerlink" title="1.1 内联元素水平居中"></a>1.1 内联元素水平居中</h2><p>利用 text-align: center 可以实现在块级元素内部的内联元素水平居中。此方法对内联元素(inline), 内联块(inline-block), 内联表(inline-table), inline-flex元素水平居中都有效。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/57" target="_blank" rel="noopener">演示代码</a></p><h2 id="1-2-块级元素水平居中"><a href="#1-2-块级元素水平居中" class="headerlink" title="1.2 块级元素水平居中"></a>1.2 块级元素水平居中</h2><p>通过把固定宽度块级元素的margin-left和margin-right设成auto，就可以使块级元素水平居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-block</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/58" target="_blank" rel="noopener">演示代码</a></p><h2 id="1-3-多块级元素水平居中"><a href="#1-3-多块级元素水平居中" class="headerlink" title="1.3 多块级元素水平居中"></a>1.3 多块级元素水平居中</h2><h3 id="1-3-1-利用inline-block"><a href="#1-3-1-利用inline-block" class="headerlink" title="1.3.1 利用inline-block"></a>1.3.1 利用inline-block</h3><p>如果一行中有两个或两个以上的块级元素，通过设置块级元素的显示类型为inline-block和父容器的text-align属性从而使多块级元素水平居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/59" target="_blank" rel="noopener">演示代码</a></p><h3 id="1-3-2-利用display-flex"><a href="#1-3-2-利用display-flex" class="headerlink" title="1.3.2 利用display: flex"></a>1.3.2 利用display: flex</h3><p>利用弹性布局(flex)，实现水平居中，其中justify-content 用于设置弹性盒子元素在主轴（横轴）方向上的对齐方式，本例中设置子元素水平居中显示。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/60" target="_blank" rel="noopener">演示代码</a></p><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2 垂直居中"></a>2 垂直居中</h1><h2 id="2-1-单行内联-inline-元素垂直居中"><a href="#2-1-单行内联-inline-元素垂直居中" class="headerlink" title="2.1 单行内联(inline-)元素垂直居中"></a>2.1 单行内联(inline-)元素垂直居中</h2><p>通过设置内联元素的高度(height)和行高(line-height)相等，从而使元素垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#v-box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/61" target="_blank" rel="noopener">演示代码</a></p><h2 id="2-2-多行元素垂直居中"><a href="#2-2-多行元素垂直居中" class="headerlink" title="2.2 多行元素垂直居中"></a>2.2 多行元素垂直居中</h2><h3 id="2-2-1-利用表布局（table）"><a href="#2-2-1-利用表布局（table）" class="headerlink" title="2.2.1 利用表布局（table）"></a>2.2.1 利用表布局（table）</h3><p>利用表布局的vertical-align: middle可以实现子元素的垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-table</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-cell</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/62" target="_blank" rel="noopener">演示代码</a></p><h3 id="2-2-2-利用flex布局（flex）"><a href="#2-2-2-利用flex布局（flex）" class="headerlink" title="2.2.2 利用flex布局（flex）"></a>2.2.2 利用flex布局（flex）</h3><p>利用flex布局实现垂直居中，其中flex-direction: column定义主轴方向为纵向。因为flex布局是CSS3中定义，在较老的浏览器存在兼容性问题。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-flex</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/63" target="_blank" rel="noopener">演示代码</a></p><h3 id="2-2-3-利用“精灵元素”"><a href="#2-2-3-利用“精灵元素”" class="headerlink" title="2.2.3 利用“精灵元素”"></a>2.2.3 利用“精灵元素”</h3><p>利用“精灵元素”(ghost element)技术实现垂直居中，即在父容器内放一个100%高度的伪元素，让文本和伪元素垂直对齐，从而达到垂直居中的目的。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ghost-center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ghost-center</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1%</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ghost-center</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/64" target="_blank" rel="noopener">演示代码</a></p><h2 id="2-3-块级元素垂直居中"><a href="#2-3-块级元素垂直居中" class="headerlink" title="2.3 块级元素垂直居中"></a>2.3 块级元素垂直居中</h2><h3 id="2-3-1-固定高度的块级元素"><a href="#2-3-1-固定高度的块级元素" class="headerlink" title="2.3.1 固定高度的块级元素"></a>2.3.1 固定高度的块级元素</h3><p>我们知道居中元素的高度和宽度，垂直居中问题就很简单。通过绝对定位元素距离顶部50%，并设置margin-top向上偏移元素高度的一半，就可以实现垂直居中了。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/65" target="_blank" rel="noopener">演示代码</a></p><h3 id="2-3-2-未知高度的块级元素"><a href="#2-3-2-未知高度的块级元素" class="headerlink" title="2.3.2 未知高度的块级元素"></a>2.3.2 未知高度的块级元素</h3><p>当垂直居中的元素的高度和宽度未知时，我们可以借助CSS3中的transform属性向Y轴反向偏移50%的方法实现垂直居中。但是部分浏览器存在兼容性的问题。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/66" target="_blank" rel="noopener">演示代码</a></p><h1 id="3-水平垂直居中"><a href="#3-水平垂直居中" class="headerlink" title="3 水平垂直居中"></a>3 水平垂直居中</h1><h2 id="3-1-固定宽高元素水平垂直居中"><a href="#3-1-固定宽高元素水平垂直居中" class="headerlink" title="3.1 固定宽高元素水平垂直居中"></a>3.1 固定宽高元素水平垂直居中</h2><p>通过margin平移元素整体宽度的一半，使元素水平垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">70px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">170px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/67" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-2-未知宽高元素水平垂直居中"><a href="#3-2-未知宽高元素水平垂直居中" class="headerlink" title="3.2 未知宽高元素水平垂直居中"></a>3.2 未知宽高元素水平垂直居中</h2><p>利用2D变换，在水平和垂直两个方向都向反向平移宽高的一半，从而使元素水平垂直居中。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/68" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-3-利用flex布局"><a href="#3-3-利用flex布局" class="headerlink" title="3.3 利用flex布局"></a>3.3 利用flex布局</h2><p>利用flex布局，其中justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；而align-items属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/69" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-4-利用grid布局"><a href="#3-4-利用grid布局" class="headerlink" title="3.4 利用grid布局"></a>3.4 利用grid布局</h2><p>利用grid实现水平垂直居中，兼容性较差，不推荐。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123; </span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/70" target="_blank" rel="noopener">演示代码</a></p><h2 id="3-5-屏幕上水平垂直居中"><a href="#3-5-屏幕上水平垂直居中" class="headerlink" title="3.5 屏幕上水平垂直居中"></a>3.5 屏幕上水平垂直居中</h2><p>屏幕上水平垂直居中十分常用，常规的登录及注册页面都需要用到。要保证较好的兼容性，还需要用到表布局。</p><p>核心代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.42du.cn/run/10" target="_blank" rel="noopener">演示代码</a></p><p>来源：<a href="https://segmentfault.com/a/1190000013966650?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013966650?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 居中 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用百度URL API实现地址与经纬度互相转换</title>
      <link href="/article/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6URL-API%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%9D%80-%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
      <url>/article/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6URL-API%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%9D%80-%E7%BB%8F%E7%BA%AC%E5%BA%A6%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>应用中有时我们需要经纬度与地址之间互相转化，为此引入sdk又太大材小用，百度提供了这样的API可直接调用。</p><a id="more"></a><h3 id="1、-地址查经纬度"><a href="#1、-地址查经纬度" class="headerlink" title="1、 地址查经纬度"></a>1、 地址查经纬度</h3><p>api:<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding</a></p><blockquote><p><a href="http://api.map.baidu.com/geocoder/v2/?address=[地址]&amp;output=json&amp;mcode=[mcode]&amp;ak=[你的AK" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?address=[地址]&amp;output=json&amp;mcode=[mcode]&amp;ak=[你的AK</a>]</p></blockquote><p>例如：</p><p><a href="http://api.map.baidu.com/geocoder/v2/?address=西安市&amp;output=json&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?address=西安市&amp;output=json&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G</a></p><ul><li>mcode 是安全码</li><li>ak 是你在百度申请的应用的key</li></ul><p><img src="https://sogrey.github.io/pics/百度应用ak.png" alt="百度应用ak.png"></p><p>返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"result"</span>: &#123;</span><br><span class="line"><span class="string">"location"</span>: &#123;</span><br><span class="line"><span class="string">"lng"</span>: <span class="number">108.95309827919623</span>,</span><br><span class="line"><span class="string">"lat"</span>: <span class="number">34.277799897830629</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"precise"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"confidence"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="string">"level"</span>: <span class="string">"城市"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、经纬度查地址"><a href="#2、经纬度查地址" class="headerlink" title="2、经纬度查地址"></a>2、经纬度查地址</h3><p>api:<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad</a></p><blockquote><p><a href="http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=[Latitude,Longitude]&amp;output=json&amp;pois=1&amp;mcode=[mcode]&amp;ak=[你的Ak" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=[Latitude,Longitude]&amp;output=json&amp;pois=1&amp;mcode=[mcode]&amp;ak=[你的Ak</a>]</p></blockquote><p>例如：</p><p><a href="http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=34.203034,108.891956&amp;output=json&amp;pois=1&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?callback=renderReverse&amp;location=34.203034,108.891956&amp;output=json&amp;pois=1&amp;mcode=70:FE:DF:8B:20:BA:98:2F:21:1B:67:06:F4:3D:62:B5:7A:A5:80:AD;com.baidu.baidulocationdemo&amp;ak=pVTtPBAsLq38z4Mm77azNU7G</a></p><p>返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">renderReverse&amp;&amp;renderReverse(&#123;</span><br><span class="line"><span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"result"</span>: &#123;</span><br><span class="line"><span class="string">"location"</span>: &#123;</span><br><span class="line"><span class="string">"lng"</span>: <span class="number">108.89195599999994</span>,</span><br><span class="line"><span class="string">"lat"</span>: <span class="number">34.20303403835331</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"formatted_address"</span>: <span class="string">"陕西省西安市雁塔区丈八一路"</span>,</span><br><span class="line"><span class="string">"business"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"addressComponent"</span>: &#123;</span><br><span class="line"><span class="string">"country"</span>: <span class="string">"中国"</span>,</span><br><span class="line"><span class="string">"country_code"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"country_code_iso"</span>: <span class="string">"CHN"</span>,</span><br><span class="line"><span class="string">"country_code_iso2"</span>: <span class="string">"CN"</span>,</span><br><span class="line"><span class="string">"province"</span>: <span class="string">"陕西省"</span>,</span><br><span class="line"><span class="string">"city"</span>: <span class="string">"西安市"</span>,</span><br><span class="line"><span class="string">"city_level"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"district"</span>: <span class="string">"雁塔区"</span>,</span><br><span class="line"><span class="string">"town"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"adcode"</span>: <span class="string">"610113"</span>,</span><br><span class="line"><span class="string">"street"</span>: <span class="string">"丈八一路"</span>,</span><br><span class="line"><span class="string">"street_number"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">""</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"pois"</span>: [&#123;</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">"丈八一路1号(跳水馆对面)"</span>,</span><br><span class="line"><span class="string">"cp"</span>: <span class="string">" "</span>,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">"附近"</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"汇鑫IBC"</span>,</span><br><span class="line"><span class="string">"poiType"</span>: <span class="string">"房地产"</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">108.89195610279563</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">34.20301956544281</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"房地产;写字楼"</span>,</span><br><span class="line"><span class="string">"tel"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">"b703e96b79f2fc878f1a89ce"</span>,</span><br><span class="line"><span class="string">"zip"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"parent_poi"</span>: &#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">0.0</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">0.0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">...,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">"汇鑫国际IBC国际商务中心A座"</span>,</span><br><span class="line"><span class="string">"cp"</span>: <span class="string">" "</span>,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">"南"</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">"59"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"汇鑫国际IBC国际商务中心A座"</span>,</span><br><span class="line"><span class="string">"poiType"</span>: <span class="string">"房地产"</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">108.89182135696913</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">34.20346740878921</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">"房地产;写字楼"</span>,</span><br><span class="line"><span class="string">"tel"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">"5b37443de29841febbbd63f4"</span>,</span><br><span class="line"><span class="string">"zip"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"parent_poi"</span>: &#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"tag"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"addr"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"point"</span>: &#123;</span><br><span class="line"><span class="string">"x"</span>: <span class="number">0.0</span>,</span><br><span class="line"><span class="string">"y"</span>: <span class="number">0.0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"direction"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"distance"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"uid"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="string">"roads"</span>: [],</span><br><span class="line"><span class="string">"poiRegions"</span>: [],</span><br><span class="line"><span class="string">"sematic_description"</span>: <span class="string">"汇鑫IBC附近1米"</span>,</span><br><span class="line"><span class="string">"cityCode"</span>: <span class="number">233</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="java-代码："><a href="#java-代码：" class="headerlink" title="java 代码："></a>java 代码：</h3><p><a href="https://github.com/Sogrey/JavaDemo/blob/master/src/org/sogrey/url/GeoUtils.java" target="_blank" rel="noopener">https://github.com/Sogrey/JavaDemo/blob/master/src/org/sogrey/url/GeoUtils.java</a></p><h3 id="写在最后，关于使用限制"><a href="#写在最后，关于使用限制" class="headerlink" title="写在最后，关于使用限制"></a>写在最后，关于使用限制</h3><p>API是免费的，但有使用上限。上面接口的使用指南可查看。</p><p><img src="https://sogrey.github.io/pics/百度api使用限制.png" alt="百度api使用限制.png"></p>]]></content>
      
      
      <categories>
          
          <category> api </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度 api </tag>
            
            <tag> 地址与经纬度 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android获取view宽高的三种方式</title>
      <link href="/article/Android%E8%8E%B7%E5%8F%96view%E5%AE%BD%E9%AB%98%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/article/Android%E8%8E%B7%E5%8F%96view%E5%AE%BD%E9%AB%98%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>getMeasuredHeight()与getHeight的区别</p></blockquote><p>实际上在当屏幕可以包裹内容的时候，他们的值相等，<br>只有当view超出屏幕后，才能看出他们的区别：<br>getMeasuredHeight()是实际View的大小，与屏幕无关，<br>而getHeight的大小此时则是屏幕的大小。<br>当超出屏幕后，getMeasuredHeight()等于getHeight()加上屏幕之外没有显示的大小</p><a id="more"></a><p>具体方法</p><p>我们知道在oncreate中View.getWidth和View.getHeight无法获得一个view的高度和宽度，这是因为View组件 布局要在onResume回调后完成。</p><p>下面说三种方式</p><ul><li>getViewTreeObserver</li></ul><p>使用 getViewTreeObserver().addOnGlobalLayoutListener()来获得宽度或者高度。</p><p>OnGlobalLayoutListener 是ViewTreeObserver的内部类，当一个视图树的布局发生改变时，可以被ViewTreeObserver监听到，这是一个注册监听视图树的观察者(observer)，在视图树的全局事件改变时得到通知。ViewTreeObserver不能直接实例化，而是通过getViewTreeObserver()获得。</p><p>除了OnGlobalLayoutListener ，ViewTreeObserver还有如下内部类：<br>interfaceViewTreeObserver.OnGlobalFocusChangeListener<br>当在一个视图树中的焦点状态发生改变时，所要调用的回调函数的接口类<br>interfaceViewTreeObserver.OnGlobalLayoutListener<br>当在一个视图树中全局布局发生改变或者视图树中的某个视图的可视状态发生改变时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnPreDrawListener</li></ul><p>当一个视图树将要绘制时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnScrollChangedListener</li></ul><p>当一个视图树中的一些组件发生滚动时，所要调用的回调函数的接口类</p><ul><li>interfaceViewTreeObserver.OnTouchModeChangeListener</li></ul><p>当一个视图树的触摸模式发生改变时，所要调用的回调函数的接口类</p><h3 id="利用OnGlobalLayoutListener来获得一个视图的真实高度。"><a href="#利用OnGlobalLayoutListener来获得一个视图的真实高度。" class="headerlink" title="利用OnGlobalLayoutListener来获得一个视图的真实高度。"></a>利用OnGlobalLayoutListener来获得一个视图的真实高度。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mHeaderViewHeight; </span><br><span class="line"><span class="keyword">private</span> View mHeaderView; </span><br><span class="line">  </span><br><span class="line">..... </span><br><span class="line">  </span><br><span class="line">mHeaderView.getViewTreeObserver().addOnGlobalLayoutListener( </span><br><span class="line"> <span class="keyword">new</span> OnGlobalLayoutListener() &#123; </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123; </span><br><span class="line">                                                          </span><br><span class="line">   mHeaderViewHeight = mHeaderView.getHeight(); </span><br><span class="line">   mHeaderView.getViewTreeObserver() </span><br><span class="line">     .removeGlobalOnLayoutListener(<span class="keyword">this</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>注意：但是需要注意的是OnGlobalLayoutListener可能会被多次触发，因此在得到了高度之后，要将OnGlobalLayoutListener注销掉。</p></blockquote></blockquote><h3 id="View-post事件中获取"><a href="#View-post事件中获取" class="headerlink" title="View post事件中获取"></a>View post事件中获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHeight</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123; </span><br><span class="line"> TextView tv; </span><br><span class="line">  </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState); </span><br><span class="line">  setContentView(R.layout.activity_activity_b); </span><br><span class="line">   tv = (TextView) findViewById(R.id.textView); </span><br><span class="line">  tv.post(<span class="keyword">new</span> Runnable() &#123; </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> height= tv.getHeight(); </span><br><span class="line">   &#125; </span><br><span class="line">  &#125;); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接测量计算"><a href="#直接测量计算" class="headerlink" title="直接测量计算"></a>直接测量计算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intw=View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>,View.MeasureSpec.UNSPECIFIED); </span><br><span class="line"><span class="keyword">int</span> inth=View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>,View.MeasureSpec.UNSPECIFIED); </span><br><span class="line">textView.measure(intw, inth); </span><br><span class="line"><span class="keyword">int</span> intwidth = textView.getMeasuredWidth(); </span><br><span class="line"><span class="keyword">int</span> intheight = textView.getMeasuredHeight();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android中TextView属性ellipsize=marquee不生效的解决办法</title>
      <link href="/article/Android-TextView%E5%B1%9E%E6%80%A7android-ellipsize-marquee%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/article/Android-TextView%E5%B1%9E%E6%80%A7android-ellipsize-marquee%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android TextView实现文字跑马灯效果有两种办法：</p><p>1、 TextView的Text值赋值后不更改，很多帖子上说如下写法就可以生效：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/music_name_tv"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span>   【必须】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:focusable</span>=<span class="string">"true"</span>      【必须】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span> 【必须】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:lines</span>=<span class="string">"1"</span>              【必须】</span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心我的中国心xxxx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"@color/colorAccent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"15sp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2、 TextView的文字动态赋值，这个时候直接写在布局Xml里面已经不生效了，需要先给TextView赋值，然后再在代码里面重新把属性设置一遍(亲试可行)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTextMarquee</span><span class="params">(TextView textView)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (textView != <span class="keyword">null</span>) &#123;</span><br><span class="line">          textView.setEllipsize(TextUtils.TruncateAt.MARQUEE);</span><br><span class="line">          textView.setSingleLine(<span class="keyword">true</span>);</span><br><span class="line">          textView.setSelected(<span class="keyword">true</span>);</span><br><span class="line">          textView.setFocusable(<span class="keyword">true</span>);</span><br><span class="line">          textView.setFocusableInTouchMode(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>建议第二种。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> marquee </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Android程序使用KSoap2调用Webservice运行不成功的问题</title>
      <link href="/article/%E5%85%B3%E4%BA%8EAndroid%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8KSoap2%E8%B0%83%E7%94%A8Webservice%E8%BF%90%E8%A1%8C%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/article/%E5%85%B3%E4%BA%8EAndroid%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8KSoap2%E8%B0%83%E7%94%A8Webservice%E8%BF%90%E8%A1%8C%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>公司的一个旧项目，用到了KSoap2访问Webservice，再编译运行时报<code>android.os.NetworkOnMainThreadException</code>异常。</p><a id="more"></a><p>原代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.ksoap2.SoapEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.PropertyInfo;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapObject;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapSerializationEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.transport.HttpTransportSE;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service_conn</span> </span>&#123;</span><br><span class="line">    String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAMESPACE = <span class="string">"WebService"</span>;</span><br><span class="line">    SoapObject soap_request;</span><br><span class="line">    HttpTransportSE ht;</span><br><span class="line">    SoapSerializationEnvelope envelope;</span><br><span class="line">    <span class="keyword">private</span> SoapObject soap_result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向服务器发送请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method_name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XmlPullParserException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SoapObject <span class="title">SEND_MESSAGE</span><span class="params">(<span class="keyword">final</span> String method_name, List&lt;NameValue&gt; param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        soap_request = <span class="keyword">new</span> SoapObject(NAMESPACE, method_name);</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.size(); i++) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"参数："</span> + param.get(i).getName() + <span class="string">"="</span> + param.get(i).getValue());</span><br><span class="line">                soap_request.addProperty(param.get(i).getName(), param.get(i).getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        envelope = <span class="keyword">new</span> SoapSerializationEnvelope(SoapEnvelope.VER11);</span><br><span class="line"><span class="comment">//envelope.bodyOut = soap_request;//此句导致参数发送不到服务器</span></span><br><span class="line">        envelope.dotNet = <span class="keyword">true</span>;<span class="comment">//webservice不指定rpc方式则用true否则要用false(也会导致参数发送不到服务器)</span></span><br><span class="line">        envelope.setOutputSoapObject(soap_request);</span><br><span class="line">        ht = <span class="keyword">new</span> HttpTransportSE(SocketService.URL);</span><br><span class="line">        ht.debug = <span class="keyword">true</span>;</span><br><span class="line">        Log.e(TAG, <span class="string">"URL:"</span> + SocketService.URL + <span class="string">"   NAMESPACE:"</span> + NAMESPACE + <span class="string">"    method_name:"</span> + method_name);</span><br><span class="line"></span><br><span class="line">        ht.call(NAMESPACE+<span class="string">"/"</span>+method_name, envelope);<span class="comment">// &lt;-- 问题出在这里</span></span><br><span class="line">        soap_result = (SoapObject) envelope.bodyIn;</span><br><span class="line">        <span class="keyword">return</span> soap_result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Honeycomb SDK（3.0）开始，google不再允许网络请求（HTTP、Socket）等相关操作直接在Main Thread类中。既然不允许放在主线程那就另开线程执行，但这样结果要跑回主线程就要通过 interface 回调跑回主线程，进而所有调用该方法的方法都要加一 interface 参数，这样改动太大了。</p><p>在Java中一般通过继承Thread类或者实现Runnable接口这两种方式来创建多线程，但是这两种方式都有个缺陷，就是不能在执行完成后获取执行的结果，因此Java 1.5之后提供了Callable和Future接口，通过它们就可以在任务执行完毕之后得到任务的执行结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">FutureTask&lt;SoapObject&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;SoapObject&gt;(</span><br><span class="line">        <span class="keyword">new</span> Callable&lt;SoapObject&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> SoapObject <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 调用WebService</span></span><br><span class="line">                    ht.call(NAMESPACE + <span class="string">"/"</span> + method_name, envelope);</span><br><span class="line">                    <span class="keyword">if</span> (envelope.getResponse() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 获取返回的数据</span></span><br><span class="line">                        SoapObject object = (SoapObject) envelope.bodyIn;</span><br><span class="line">                        <span class="comment">// 获取返回的结果</span></span><br><span class="line">                        String result = object.getProperty(<span class="number">0</span>)</span><br><span class="line">                                .toString();</span><br><span class="line">                        LogUtil.E(<span class="string">"Service_conn"</span>, result);</span><br><span class="line">                        <span class="keyword">return</span> object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    soap_result = futureTask.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样不需要在回调中获取结果。</p><p>最终代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.ksoap2.SoapEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.PropertyInfo;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapObject;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapSerializationEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.transport.HttpTransportSE;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service_conn</span> </span>&#123;</span><br><span class="line">    String TAG = <span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAMESPACE = <span class="string">"WebService"</span>;</span><br><span class="line">    SoapObject soap_request;</span><br><span class="line">    HttpTransportSE ht;</span><br><span class="line">    SoapSerializationEnvelope envelope;</span><br><span class="line">    <span class="keyword">private</span> SoapObject soap_result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向服务器发送请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method_name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XmlPullParserException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SoapObject <span class="title">SEND_MESSAGE</span><span class="params">(<span class="keyword">final</span> String method_name, List&lt;NameValue&gt; param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        soap_request = <span class="keyword">new</span> SoapObject(NAMESPACE, method_name);</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.size(); i++) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"参数："</span> + param.get(i).getName() + <span class="string">"="</span> + param.get(i).getValue());</span><br><span class="line">                soap_request.addProperty(param.get(i).getName(), param.get(i).getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        envelope = <span class="keyword">new</span> SoapSerializationEnvelope(SoapEnvelope.VER11);</span><br><span class="line"><span class="comment">//envelope.bodyOut = soap_request;//此句导致参数发送不到服务器</span></span><br><span class="line">        envelope.dotNet = <span class="keyword">true</span>;<span class="comment">//webservice不指定rpc方式则用true否则要用false(也会导致参数发送不到服务器)</span></span><br><span class="line">        envelope.setOutputSoapObject(soap_request);</span><br><span class="line">        ht = <span class="keyword">new</span> HttpTransportSE(SocketService.URL);</span><br><span class="line">        ht.debug = <span class="keyword">true</span>;</span><br><span class="line">        Log.e(TAG, <span class="string">"URL:"</span> + SocketService.URL + <span class="string">"   NAMESPACE:"</span> + NAMESPACE + <span class="string">"    method_name:"</span> + method_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ht.call(NAMESPACE+"/"+method_name, envelope);// &lt;-- 问题出在这里</span></span><br><span class="line"><span class="comment">//        soap_result = (SoapObject) envelope.bodyIn;</span></span><br><span class="line">        FutureTask&lt;SoapObject&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;SoapObject&gt;(</span><br><span class="line">                <span class="keyword">new</span> Callable&lt;SoapObject&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> SoapObject <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 调用WebService</span></span><br><span class="line">                            ht.call(NAMESPACE + <span class="string">"/"</span> + method_name, envelope);</span><br><span class="line">                            <span class="keyword">if</span> (envelope.getResponse() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// 获取返回的数据</span></span><br><span class="line">                                SoapObject object = (SoapObject) envelope.bodyIn;</span><br><span class="line">                                <span class="comment">// 获取返回的结果</span></span><br><span class="line">                                String result = object.getProperty(<span class="number">0</span>)</span><br><span class="line">                                        .toString();</span><br><span class="line">                                LogUtil.E(<span class="string">"Service_conn"</span>, result);</span><br><span class="line">                                <span class="keyword">return</span> object;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            soap_result = futureTask.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> soap_result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> KSoap2 </tag>
            
            <tag> Webservice </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 添加 Gitment 评论</title>
      <link href="/article/Hexo-%E6%B7%BB%E5%8A%A0-Gitment-%E8%AF%84%E8%AE%BA/"/>
      <url>/article/Hexo-%E6%B7%BB%E5%8A%A0-Gitment-%E8%AF%84%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于之前使用的多说停用了，不得不另找其他评论插件就看到了 Gitment,源码在这 <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">github</a>。</p><p>话不多说，直接开整。</p><a id="more"></a><h2 id="1-注册Gitment-OAuth-Application"><a href="#1-注册Gitment-OAuth-Application" class="headerlink" title="1 注册Gitment OAuth Application"></a>1 注册Gitment OAuth Application</h2><p><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">官方介绍</a></p><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，比如我的就是 <code>https://sogrey.github.io/</code>）。</p><p><img src="https://sogrey.github.io/pics/注册Gitment OAuth Application.png" alt="注册Gitment OAuth Application"></p><p>你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p><p><img src="https://sogrey.github.io/pics/Gitment ClientId.png" alt="Gitment ClientId"></p><p>后面如果想查找之前注册的Gitment ClientId，在GitHub点击<code>Settings</code>&gt;<code>Developer settings</code> 即<a href="https://github.com/settings/developers" target="_blank" rel="noopener">developers</a></p><p><img src="https://sogrey.github.io/pics/查找Gitment ClientId.png" alt="查找Gitment ClientId"></p><p><img src="https://sogrey.github.io/pics/查找Gitment ClientId2.png" alt="查找Gitment ClientId"></p><h2 id="2-安装Gitment插件"><a href="#2-安装Gitment插件" class="headerlink" title="2 安装Gitment插件"></a>2 安装Gitment插件</h2><p>如果你希望引用确定版本的 Gitment，则应该使用 npm 进行安装。</p><pre><code>$ npm install --save gitment</code></pre><p>关于构造函数中的更多可用参数请查看 <a href="https://github.com/imsun/gitment#options" target="_blank" rel="noopener">Gitment Options</a></p><h2 id="3-引入-Gitment-到-hexo-文章页面"><a href="#3-引入-Gitment-到-hexo-文章页面" class="headerlink" title="3 引入 Gitment 到 hexo 文章页面"></a>3 引入 Gitment 到 hexo 文章页面</h2><p>我的主题是 <code>yelog</code> 是基于 <code>yelee</code> 的，其他主题也可参考。</p><p>将下面代码添加到文章页面,我贴在 <code>themes\yelog\layout\_partial\article.ejs</code> 的末尾：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--gitment 评论--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--汉化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://billts.site/extra_css/gitment.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://billts.site/js/gitment.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--原型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js" type="text/javascript"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitmentContainer"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: -19px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.gitment-container</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">          border: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.comments</span> &#123;</span></span><br><span class="line"><span class="undefined">          margin: 60px 0 0;padding: 0 60px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span></span><br><span class="line"><span class="javascript">  id: <span class="string">'&lt;%= page.title %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">  title: <span class="string">'&lt;%= page.title %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">  owner: <span class="string">'Sogrey'</span>,</span></span><br><span class="line"><span class="javascript">  repo: <span class="string">'Sogrey.github.io'</span>,</span></span><br><span class="line"><span class="undefined">  oauth: &#123;</span></span><br><span class="line"><span class="javascript">client_id: <span class="string">'5826******a208c'</span>,</span></span><br><span class="line"><span class="javascript">client_secret: <span class="string">'95db82**************************d7f6be1'</span>,</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        gitment.render(<span class="string">'gitmentContainer'</span>)</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--gitment 评论 end--&gt;</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>id: ‘&lt;%= page.title %&gt;’,//页面标题作为issue的label,长度不超过50，否则会出现 Error：validation failed 错误提示</li><li>owner 你的GitHub用户名即可</li><li>repo 保存评论的GitHub仓库名</li><li>client_id 你注册的Gitment Client ID [可在<a href="https://github.com/settings/developers" target="_blank" rel="noopener">developers</a>找到你注册的Gitment查看]</li><li>client_secret 你注册的Gitment Client secret [可在<a href="https://github.com/settings/developers" target="_blank" rel="noopener">developers</a>找到你注册的Gitment查看]</li><li>汉化来自<a href="https://github.com/imsun/gitment/issues/104" target="_blank" rel="noopener">评论框汉化问题</a></li></ul><h2 id="4-主题配置"><a href="#4-主题配置" class="headerlink" title="4 主题配置"></a>4 主题配置</h2><p>在主题的 <code>_config.yml</code>文件添加（各参数解释如上）：</p><pre><code># Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment:  enable: true  githubID: Sogrey  repo: Sogrey.github.io  ClientID: 5826******a208c  ClientSecret: 95db82**************************d7f6be1  lazy: false</code></pre><p>其中：</p><ul><li>lazy: false true表示评论懒加载，即不直接显示评论，false则直接显示评论，懒加载可参考<a href="http://blog.csdn.net/yanzi1225627/article/details/77890414" target="_blank" rel="noopener">hexo next主题集成gitment评论系统</a>配置 <code>gitmentbutton</code> 的显示文字。</li></ul><h2 id="5-部署网站"><a href="#5-部署网站" class="headerlink" title="5 部署网站"></a>5 部署网站</h2><p>依次执行：</p><pre><code>hexo ghexo d</code></pre><p>查看站点。</p><h2 id="6-初始化评论"><a href="#6-初始化评论" class="headerlink" title="6 初始化评论"></a>6 初始化评论</h2><p>页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第一步所填 repo 的 owner），点击初始化按钮。</p><p>只有你自己先初始化后在会在对应的GitHub 仓库的issue中创建一条对应的issue，之后其他用户即可在该页面发表评论。</p><h2 id="Gitment坑点小结-部分出自iHTCboy"><a href="#Gitment坑点小结-部分出自iHTCboy" class="headerlink" title="Gitment坑点小结 部分出自iHTCboy"></a>Gitment坑点小结 部分出自<a href="https://www.jianshu.com/p/57afa4844aaa" target="_blank" rel="noopener">iHTCboy</a></h2><p>1 <code>owner: &#39;Your GitHub ID&#39;</code></p><pre><code>owner: &apos;你的 GitHub ID&apos;,可以是你的GitHub用户名，也可以是github id，建议直接用GitHub用户名就可以。</code></pre><p>2 <code>repo: &#39;The repo to store comments</code></p><pre><code>repo: &apos;存储评论的 github repo&apos;这个是你要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的。</code></pre><p>3 <code>Error: Not Found问题</code></p><pre><code>owner或者repo配置错误了，注意名字和仓库名字的大小写。</code></pre><p>4 <code>Error: Comments Not Initialized</code></p><pre><code>在注册OAuth Application这个步骤中，给Authorization callback URL指定的地址错了还没有在该页面的Gitment评论区登陆GitHub账号</code></pre><p>如果还是不行，可以参考另一个情况 <a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fimsun%2Fgitment%2Fissues%2F95" target="_blank" rel="noopener">Error: Comments Not Initialized · Issue #95 · imsun/gitment</a></p><p>5 <code>Error：validation failed</code></p><pre><code>issue的标签label有长度限制！labels的最大长度限制是50个字符。id: &apos;页面 ID&apos;, // 可选。默认为 location.href这个id的作用，就是针对一个文章有唯一的标识来判断这篇本章。在issues里面，可以发现是根据网页标题来新建issues的，然后每个issues有两个labels（标签），一个是gitment，另一个就是id。所以明白了原理后，就是因为id太长，导致初始化失败，现在就是要让id保证在50个字符内。对应配置的id为：id: &apos;&lt;%= page.title %&gt;&apos;如果用网页标题也不能保证在50个字符！最后，我用文章的时间，这样长度是保证在50个字符内，完美解决！（避免了文章每次更新标题或路径时，会重新创建一个issue评论的问题。）id: &apos;&lt;%= page.date %&gt;&apos;</code></pre><p>6 gitment的汉化</p><pre><code>只需到模板里将原来定义CSS和JS的那两行改成：&lt;link rel=&quot;stylesheet&quot; href=&quot;https://billts.site/extra_css/gitment.css&quot;&gt;&lt;script src=&quot;https://billts.site/js/gitment.js&quot;&gt;&lt;/script&gt;即可。来源：https://github.com/imsun/gitment/issues/104</code></pre><p>7 Gitment出现在文章列表上</p><p><img src="https://sogrey.github.io/pics/Gitment出现在文章列表上.png" alt="Gitment出现在文章列表上"></p><p>解决办法是为上面添加在文章页面上的那一大段代码 添加 下面代码将其包裹在内：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span>) &#123; %&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--原来的代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>即变成下面的样子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--gitment 评论--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span>) &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--汉化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://billts.site/extra_css/gitment.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://billts.site/js/gitment.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--原型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js" type="text/javascript"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitmentContainer"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: -19px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.gitment-container</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">          border: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.comments</span> &#123;</span></span><br><span class="line"><span class="undefined">          margin: 60px 0 0;padding: 0 60px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span></span><br><span class="line"><span class="javascript">  id: <span class="string">'&lt;%= page.title %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">  title: <span class="string">'&lt;%= page.title %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">  owner: <span class="string">'Sogrey'</span>,</span></span><br><span class="line"><span class="javascript">  repo: <span class="string">'Sogrey.github.io'</span>,</span></span><br><span class="line"><span class="undefined">  oauth: &#123;</span></span><br><span class="line"><span class="javascript">client_id: <span class="string">'5826******a208c'</span>,</span></span><br><span class="line"><span class="javascript">client_secret: <span class="string">'95db82**************************d7f6be1'</span>,</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        gitment.render(<span class="string">'gitmentContainer'</span>)</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="comment">&lt;!--gitment 评论 end--&gt;</span></span><br></pre></td></tr></table></figure><p>8 Error: Bad credentials</p><p>此类错误一般原因是填写授权<code>Client ID</code>或<code>Client Secret</code>时有误，请确认是否正确，我这里出现，之前是好的，因换了系统重新配置提交后就这样了。F12 查看到gitment.js 有两个 401.定位应该是授权问题。</p><p><a href="https://github.com/imsun/gitment/issues/145" target="_blank" rel="noopener">Error: Bad credentials#145</a></p><p><img src="https://sogrey.github.io/pics/Error%20Bad%20credentials.jpg" alt=""></p><p>解决：</p><p>我在<a href="https://github.com/settings/profile" target="_blank" rel="noopener">Settings</a>/<a href="https://github.com/settings/developers" target="_blank" rel="noopener">Developer settings</a>的<code>OAuth Apps</code>中找到我们授权的应用，重新生产秘钥，重新配置就好了。<br><img src="https://sogrey.github.io/pics/OAuth%20Apps.jpg" alt=""><br><img src="https://sogrey.github.io/pics/OAuth%20Apps2.jpg" alt=""><br>重新配置 theme 下的 _config.yml 文件<br><img src="https://sogrey.github.io/pics/gitment_config.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Gitment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Webview 内容自适应高度</title>
      <link href="/article/Android-Webview-%E5%86%85%E5%AE%B9%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6/"/>
      <url>/article/Android-Webview-%E5%86%85%E5%AE%B9%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        webview.loadUrl(<span class="string">"javascript:App.resize(document.getElementById('chatsDataList').scrollHeight)"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">webview.addJavascriptInterface(<span class="keyword">this</span>, <span class="string">"App"</span>);</span><br><span class="line">webview.loadUrl(<span class="string">"http://localhost:"</span> + Constant.port + <span class="string">"/pages/indexCharts.html"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JavascriptInterface</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">float</span> height)</span> </span>&#123;</span><br><span class="line">    getActivity().runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            TT.showToast(mContext, height + <span class="string">""</span>);</span><br><span class="line">            <span class="comment">//此处的 layoutParmas 需要根据父控件类型进行区分，这里为了简单就不这么做了</span></span><br><span class="line">            webview.setLayoutParams(<span class="keyword">new</span> LinearLayout.LayoutParams(getResources().getDisplayMetrics().widthPixels, (<span class="keyword">int</span>) (height * getResources().getDisplayMetrics().density)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>chatsDataList</code>要修改成自己的元素</li><li>要运行在UI线程</li><li>要设置LayoutParams <blockquote><p>webView.getLayoutParams().height =height;是没有用的</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Webview </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java实现定时任务的三种方法(收集)</title>
      <link href="/article/java%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/article/java%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>普通thread </li></ul><p>这是最常见的，创建一个thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskRunnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// run in a second  </span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> timeInterval = <span class="number">1000</span>;  </span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">                    <span class="comment">// ------- code for task to run  </span></span><br><span class="line">                    System.out.println(<span class="string">"Hello !!"</span>);  </span><br><span class="line">                    <span class="comment">// ------- ends here  </span></span><br><span class="line">                    <span class="keyword">try</span> &#123;  </span><br><span class="line">                        Thread.sleep(timeInterval);  </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                        e.printStackTrace();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);  </span><br><span class="line">        thread.start();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>TimerTask </li></ul><p> 于第一种方式相比，优势 1&gt;当启动和去取消任务时可以控制 2&gt;第一次执行任务时可以指定你想要的delay时间  在实现时，Timer类可以调度任务，imerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。</p><p> 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTimerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TimerTask task = <span class="keyword">new</span> TimerTask() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="comment">// task to run goes here  </span></span><br><span class="line">                System.out.println(<span class="string">"Hello !!!"</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();  </span><br><span class="line">        <span class="keyword">long</span> delay = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">long</span> intevalPeriod = <span class="number">1</span> * <span class="number">1000</span>;  </span><br><span class="line">        <span class="comment">// schedules the task to be run in an interval  </span></span><br><span class="line">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ScheduledExecutorService</li></ul><p>ScheduledExecutorService是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p><p>相比于上两个方法，它有以下好处：</p><ul><li>1&gt;相比于Timer的单线程，它是通过线程池的方式来执行任务的  </li><li>2&gt;可以很灵活的去设定第一次执行任务delay时间 </li><li>3&gt;提供了良好的约定，以便设定执行的时间间隔 </li></ul><p>下面是实现代码，我们通过ScheduledExecutorService#scheduleAtFixedRate展示这个例子，通过代码里参数的控制，首次执行加了delay时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.sogrey.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskScheduledExecutorService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="comment">// task to run goes here  </span></span><br><span class="line">                System.out.println(<span class="string">"Hello !!"</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        ScheduledExecutorService service = Executors  </span><br><span class="line">                .newSingleThreadScheduledExecutor();  </span><br><span class="line">        <span class="comment">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></span><br><span class="line">        service.scheduleAtFixedRate(runnable, <span class="number">10</span>, <span class="number">1</span>, TimeUnit.SECONDS);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自：<a href="http://blog.csdn.net/haorengoodman/article/details/23281343/" target="_blank" rel="noopener">java实现定时任务的三种方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java读取文件夹大小的6种方法（收集）</title>
      <link href="/article/Java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F%E7%9A%846%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/"/>
      <url>/article/Java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F%E7%9A%846%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>说明：File.length()仅仅用于获得某个文件的大小，单位为bytes</p><p>以下提供六种方法遍历文件夹下子文件求其大小总和。</p></blockquote><a id="more"></a><h3 id="单线程递归方式"><a href="#单线程递归方式" class="headerlink" title="单线程递归方式"></a>单线程递归方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TotalFileSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归方式 计算文件的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile())</span><br><span class="line">            <span class="keyword">return</span> file.length();</span><br><span class="line">        <span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line">        <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (children != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> File child : children)</span><br><span class="line">                total += getTotalSizeOfFilesInDir(child);</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> TotalFileSize()</span><br><span class="line">                .getTotalSizeOfFilesInDir(<span class="keyword">new</span> File(fileName));</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">        System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.02347729</code></pre><h3 id="使用Executors-newFixedThreadPool和callable-多线程实现"><a href="#使用Executors-newFixedThreadPool和callable-多线程实现" class="headerlink" title="使用Executors.newFixedThreadPool和callable 多线程实现"></a>使用Executors.newFixedThreadPool和callable 多线程实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentTotalFileSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubDirectoriesAndSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">long</span> size;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> List&lt;File&gt; subDirectories;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubDirectoriesAndSize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> totalSize,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> List&lt;File&gt; theSubDirs)</span> </span>&#123;</span><br><span class="line">size = totalSize;</span><br><span class="line">subDirectories = Collections.unmodifiableList(theSubDirs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> SubDirectoriesAndSize <span class="title">getTotalAndSubDirs</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> List&lt;File&gt; subDirectories = <span class="keyword">new</span> ArrayList&lt;File&gt;();</span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile())</span><br><span class="line">total += child.length();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">subDirectories.add(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SubDirectoriesAndSize(total, subDirectories);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> File file)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ExecutorService service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> List&lt;File&gt; directories = <span class="keyword">new</span> ArrayList&lt;File&gt;();</span><br><span class="line">directories.add(file);</span><br><span class="line"><span class="keyword">while</span> (!directories.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">final</span> List&lt;Future&lt;SubDirectoriesAndSize&gt;&gt; partialResults = <span class="keyword">new</span> ArrayList&lt;Future&lt;SubDirectoriesAndSize&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File directory : directories) &#123;</span><br><span class="line">partialResults.add(service</span><br><span class="line">.submit(<span class="keyword">new</span> Callable&lt;SubDirectoriesAndSize&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> SubDirectoriesAndSize <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getTotalAndSubDirs(directory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br><span class="line">directories.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> Future&lt;SubDirectoriesAndSize&gt; partialResultFuture : partialResults) &#123;</span><br><span class="line"><span class="keyword">final</span> SubDirectoriesAndSize subDirectoriesAndSize = partialResultFuture</span><br><span class="line">.get(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line">directories.addAll(subDirectoriesAndSize.subDirectories);</span><br><span class="line">total += subDirectoriesAndSize.size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> ConcurrentTotalFileSize()</span><br><span class="line">.getTotalSizeOfFilesInDir(<span class="keyword">new</span> File(fileName));</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.102727254</code></pre><h3 id="使用Executors-newFixedThreadPool和callable-多线程的另外一种实现"><a href="#使用Executors-newFixedThreadPool和callable-多线程的另外一种实现" class="headerlink" title="使用Executors.newFixedThreadPool和callable 多线程的另外一种实现"></a>使用Executors.newFixedThreadPool和callable 多线程的另外一种实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NaivelyConcurrentTotalFileSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> ExecutorService service,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> File file)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException,</span></span><br><span class="line"><span class="function">TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (file.isFile())</span><br><span class="line"><span class="keyword">return</span> file.length();</span><br><span class="line"><span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> List&lt;Future&lt;Long&gt;&gt; partialTotalFutures = <span class="keyword">new</span> ArrayList&lt;Future&lt;Long&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line">partialTotalFutures.add(service.submit(<span class="keyword">new</span> Callable&lt;Long&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getTotalSizeOfFilesInDir(service, child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> Future&lt;Long&gt; partialTotalFuture : partialTotalFutures)</span><br><span class="line">total += partialTotalFuture.get(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFile</span><span class="params">(<span class="keyword">final</span> String fileName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ExecutorService service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getTotalSizeOfFilesInDir(service, <span class="keyword">new</span> File(fileName));</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">ExecutionException, TimeoutException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> NaivelyConcurrentTotalFileSize()</span><br><span class="line">.getTotalSizeOfFile(fileName);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.058243242</code></pre><h3 id="使用CountDownLatch和AtomicLong实现多线程下的并发控制"><a href="#使用CountDownLatch和AtomicLong实现多线程下的并发控制" class="headerlink" title="使用CountDownLatch和AtomicLong实现多线程下的并发控制"></a>使用CountDownLatch和AtomicLong实现多线程下的并发控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentTotalFileSizeWLatch</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ExecutorService service;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> AtomicLong pendingFileVisits = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> AtomicLong totalSize = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateTotalSizeOfFilesInDir</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> fileSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile())</span><br><span class="line">fileSize = file.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile())</span><br><span class="line">fileSize += child.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pendingFileVisits.incrementAndGet();</span><br><span class="line">service.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">updateTotalSizeOfFilesInDir(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">totalSize.addAndGet(fileSize);</span><br><span class="line"><span class="keyword">if</span> (pendingFileVisits.decrementAndGet() == <span class="number">0</span>)</span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFile</span><span class="params">(<span class="keyword">final</span> String fileName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line">pendingFileVisits.incrementAndGet();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">updateTotalSizeOfFilesInDir(<span class="keyword">new</span> File(fileName));</span><br><span class="line">latch.await(<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">return</span> totalSize.longValue();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> ConcurrentTotalFileSizeWLatch()</span><br><span class="line">.getTotalSizeOfFile(fileName);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.026633095</code></pre><h3 id="使用BlockingQueue和AtomicLong的实现"><a href="#使用BlockingQueue和AtomicLong的实现" class="headerlink" title="使用BlockingQueue和AtomicLong的实现"></a>使用BlockingQueue和AtomicLong的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentTotalFileSizeWQueue</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ExecutorService service;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> BlockingQueue&lt;Long&gt; fileSizes = <span class="keyword">new</span> ArrayBlockingQueue&lt;Long&gt;(</span><br><span class="line"><span class="number">500</span>);</span><br><span class="line"><span class="keyword">final</span> AtomicLong pendingFileVisits = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startExploreDir</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line">pendingFileVisits.incrementAndGet();</span><br><span class="line">service.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">exploreDir(file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exploreDir</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> fileSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile())</span><br><span class="line">fileSize = file.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile())</span><br><span class="line">fileSize += child.length();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">startExploreDir(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileSizes.put(fileSize);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line">pendingFileVisits.decrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTotalSizeOfFile</span><span class="params">(<span class="keyword">final</span> String fileName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">startExploreDir(<span class="keyword">new</span> File(fileName));</span><br><span class="line"><span class="keyword">long</span> totalSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pendingFileVisits.get() &gt; <span class="number">0</span> || fileSizes.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Long size = fileSizes.poll(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">totalSize += size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalSize;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = <span class="keyword">new</span> ConcurrentTotalFileSizeWQueue()</span><br><span class="line">.getTotalSizeOfFile(fileName);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.044469408</code></pre><h3 id="使用jdk7的ForkJoin来实现"><a href="#使用jdk7的ForkJoin来实现" class="headerlink" title="使用jdk7的ForkJoin来实现"></a>使用jdk7的ForkJoin来实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinTask;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String fileName = <span class="string">"C:\\Users\\Administrator\\Desktop\\1_11"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSizeFinder</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">final</span> File file;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileSizeFinder</span><span class="params">(<span class="keyword">final</span> File theFile)</span> </span>&#123;</span><br><span class="line">file = theFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">size = file.length();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">final</span> File[] children = file.listFiles();</span><br><span class="line"><span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</span><br><span class="line">List&lt;ForkJoinTask&lt;Long&gt;&gt; tasks = <span class="keyword">new</span> ArrayList&lt;ForkJoinTask&lt;Long&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> File child : children) &#123;</span><br><span class="line"><span class="keyword">if</span> (child.isFile()) &#123;</span><br><span class="line">size += child.length();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tasks.add(<span class="keyword">new</span> FileSizeFinder(child));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ForkJoinTask&lt;Long&gt; task : invokeAll(tasks)) &#123;</span><br><span class="line">size += task.join();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> total = forkJoinPool.invoke(<span class="keyword">new</span> FileSizeFinder(<span class="keyword">new</span> File(fileName)));</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">"Total Size: "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"Time taken: "</span> + (end - start) / <span class="number">1.0e9</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果：</p><pre><code>Total Size: 59597673Time taken: 0.015022339</code></pre><p>来自<a href="http://blog.csdn.net/u011277123/article/details/52980247" target="_blank" rel="noopener">http://blog.csdn.net/u011277123/article/details/52980247</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>json转树状结构（收集）</title>
      <link href="/article/json%E8%BD%AC%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/"/>
      <url>/article/json%E8%BD%AC%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一切都源于项目需求。近期web项目中需要这样的功能：将json数据转为树级结构，json的数据结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"pId"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"水电站项目"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="string">"pId"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"项目一标段"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="string">"pId"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"项目二标段"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><p>于是开始百度，找到如下解决方案：</p><ul><li>方案一</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toTree</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删除 所有 children,以防止多次调用</span></span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> item.children;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将数据存储为 以 id 为 KEY 的 map 索引数据列</span></span><br><span class="line">  <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    map[item.id] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> val = [];</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 以当前遍历项，的pid,去map对象中找到索引的id</span></span><br><span class="line">    <span class="keyword">var</span> parent = map[item.pId];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中</span></span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent.children || (parent.children = [])).push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级</span></span><br><span class="line">      val.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方案却也适合，只是他只能适用于 <code>id-pId</code> 这种，要适配 其他 像 <code>dataId-parentId</code> 这种就需要将上面代码中的 <code>id</code>改为<code>dataId</code>，<code>pId</code>改为<code>parentId</code>。</p><p>之后又发现了另一种方案。</p><ul><li>方案二</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * json格式转树状结构 </span></span><br><span class="line"><span class="comment"> * @param   &#123;json&#125;      json数据 </span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    id的字符串 </span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    父id的字符串 </span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    children的字符串 </span></span><br><span class="line"><span class="comment"> * @return  &#123;Array&#125;     数组 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transData</span>(<span class="params">a, idStr, pidStr, chindrenStr</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> r = [], hash = &#123;&#125;, id = idStr, pid = pidStr, children = chindrenStr, i = <span class="number">0</span>, j = <span class="number">0</span>, len = a.length;  </span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++)&#123;  </span><br><span class="line">        hash[a[i][id]] = a[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(; j &lt; len; j++)&#123;  </span><br><span class="line">        <span class="keyword">var</span> aVal = a[j], hashVP = hash[aVal[pid]];  </span><br><span class="line">        <span class="keyword">if</span>(hashVP)&#123;  </span><br><span class="line">            !hashVP[children] &amp;&amp; (hashVP[children] = []);  </span><br><span class="line">            hashVP[children].push(aVal);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            r.push(aVal);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> r;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来自：<a href="http://rockyuse.iteye.com/blog/1541308" target="_blank" rel="noopener">json转树状结构（js）</a></p><p>这样使用：<code>var jsonDataTree = transData(jsonData, &#39;id&#39;, &#39;pid&#39;, &#39;chindren&#39;);</code>,其中 参数一是json数据对象，后三个参数分别指明了 <code>id</code>、 <code>pId</code> 以及其子集 <code>chindren</code>，很好解决了方案一的不足.</p><p>借于方案二的启发，何不将方案一改造改造，于是就有了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * json格式转树状结构 </span></span><br><span class="line"><span class="comment"> * @param   &#123;json&#125;      json数据 </span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    id的字符串 默认值"id"</span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    父id的字符串 默认值"pId"</span></span><br><span class="line"><span class="comment"> * @param   &#123;String&#125;    children的字符串 默认值"children"</span></span><br><span class="line"><span class="comment"> * @return  &#123;Array&#125;     数组 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toTree</span>(<span class="params">data,idStr=<span class="string">"id"</span>,pIdStr=<span class="string">"pId"</span>,chindrenStr=<span class="string">"children"</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删除 所有 children,以防止多次调用</span></span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> item[chindrenStr];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将数据存储为 以 id 为 KEY 的 map 索引数据列</span></span><br><span class="line">  <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    map[item[idStr]] = item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> val = [];</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 以当前遍历项，的pid,去map对象中找到索引的id</span></span><br><span class="line">    <span class="keyword">var</span> parent = map[item[pIdStr]];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中</span></span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent[chindrenStr] || (parent[chindrenStr] = [])).push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级</span></span><br><span class="line">      val.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中后三个参数设置默认值分别是 <code>id-pId-children</code>，像开题的那段json刚好满足就省略后三个参数可以这样调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">eval</span>(<span class="string">'[&#123;"id":"1","pId":"0","value":"水电站项目"&#125;,&#123;"id":"2","pId":"1","value":"项目一标段"&#125;,&#123;"id":"3","pId":"1","value":"项目二标段"&#125;]'</span>); </span><br><span class="line"><span class="keyword">var</span> jsonDataTree = toTree(jsonData); </span><br><span class="line"><span class="built_in">console</span>.log(jsonDataTree);</span><br></pre></td></tr></table></figure><p>输出如下：</p><pre><code class="javascript">[    {        <span class="string">"id"</span>: <span class="string">"1"</span>,         <span class="string">"pId"</span>: <span class="string">"0"</span>,         <span class="string">"value"</span>: <span class="string">"水电站项目"</span>,         <span class="string">"children"</span>: [            {                <span class="string">"id"</span>: <span class="string">"2"</span>,                 <span class="string">"pId"</span>: <span class="string">"1"</span>,                 <span class="string">"value"</span>: <span class="string">"项目一标段"</span>            },             {                <span class="string">"id"</span>: <span class="string">"3"</span>,                 <span class="string">"pId"</span>: <span class="string">"1"</span>,                 <span class="string">"value"</span>: <span class="string">"项目二标段"</span>            }        ]    }]</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cnblogs.com/azhqiang/p/4169534.html" target="_blank" rel="noopener">java、js中实现无限层级的树形结构（类似递归）</a></li><li><a href="http://rockyuse.iteye.com/blog/1541308" target="_blank" rel="noopener">json转树状结构（js）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一行  JavaScript 代码（收集）</title>
      <link href="/article/%E4%B8%80%E8%A1%8C%20%20JavaScript%20%E4%BB%A3%E7%A0%81%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/"/>
      <url>/article/%E4%B8%80%E8%A1%8C%20%20JavaScript%20%E4%BB%A3%E7%A0%81%EF%BC%88%E6%94%B6%E9%9B%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>资料来源于网络</p><blockquote><p>var rate =1;”★★★★★☆☆☆☆☆”.slice(5 - rate, 10 - rate);</p></blockquote><p>  “★☆☆☆☆”</p><a id="more"></a><blockquote><p>(!(~+[])+{})[–[~+””][+[]]<em>[~+[]] + ~~!+[]]+({}+[])[[~!+[]]</em>~+[]]</p></blockquote><p> (!(~+[])+{})[–[~+””][+[]]<em>[~+[]] + ~~!+[]]+({}+[])[[~!+[]]</em>~+[]]</p><blockquote><p>([][[]]+[])[+!![]]+([]+{})[!+[]+!![]]</p></blockquote><p> nb</p><blockquote><p>在stackoverflow查询有关<code>js</code>、<code>something</code>的信息<br>     try {<br>            something<br>    } catch (e) {<br>            window.location.href =<br>                “<a href="http://stackoverflow.com/search?q=[js]+" target="_blank" rel="noopener">http://stackoverflow.com/search?q=[js]+</a>“ + e.message;<br>    }</p><p>将页面上所有元素用线框框起来</p></blockquote><pre><code>[].forEach.call($$(&quot;*&quot;),function(a){a.style.outline=&quot;1px solid #&quot;+(~~(Math.random()*(1&lt;&lt;24))).toString(16)})</code></pre><p>翻译成正常语言就是这样的</p><pre><code>Array.prototype.forEach.call(document.querySelectorAll(&apos;*&apos;), dom =&gt; dom.style.outline = `1px solid #${parseInt(Math.random() * Math.pow(2,24)).toString(16)}`)</code></pre><blockquote><p>论如何优雅的取随机字符串</p></blockquote><pre><code>Math.random().toString(16).substring(2) Math.random().toString(36).substring(2) </code></pre><blockquote><p>(10)<a href="">“toString”</a> === “10”  </p></blockquote><p>true</p><blockquote><p>论如何优雅的取整</p></blockquote><pre><code>var a = ~~2.33var b= 2.33 | 0var c= 2.33 &gt;&gt; 0</code></pre><blockquote><p> 如何优雅的实现金钱格式化：1234567890 –&gt; 1,234,567,890</p></blockquote><pre><code>用正则魔法实现：var test1 = &apos;1234567890&apos;var format = test1.replace(/\B(?=(\d{3})+(?!\d))/g, &apos;,&apos;)console.log(format) // 1,234,567,890非正则的优雅实现： function formatCash(str) {       return str.split(&apos;&apos;).reverse().reduce((prev, next, index) =&gt; {            return ((index % 3) ? next : (next + &apos;,&apos;)) + prev       })}console.log(formatCash(&apos;1234567890&apos;)) // 1,234,567,890</code></pre><blockquote><p>论如何最佳的让两个整数交换数值</p></blockquote><pre><code>常规办法：var a=1,b=2;a += b;b = a - b;a -= b;缺点也很明显，整型数据溢出，对于32位字符最大表示数字是2147483647，如果是2147483645和2147483646交换就失败了。黑科技办法：a ^= b;b ^= a;a ^= b;var a = 2147483647,b = 2147483646a ^= b;b ^= a;a ^= b;</code></pre><blockquote><p>实现标准JSON的深拷贝</p></blockquote><pre><code>var a = {    a: 1,    b: { c: 1, d: 2 }}var b=JSON.parse(JSON.stringify(a))</code></pre><blockquote><p>不用Number、parseInt和parseFloat和方法把”1”字符串转换成数字</p></blockquote><pre><code>哈哈，不准用强制类型转换，那么就想到了强大了隐式转换var a =&apos;1&apos; +a1</code></pre><blockquote><p> hello world!  &gt;</p></blockquote><pre><code>([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[+[]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+{})[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[]))+([]+{})[+!![]]+(!![]+[])[+!![]]+(![]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+{})[+[]])[+[]]+(!+[]+!![]+[])+(+!![]+[]))</code></pre><blockquote><p> ++[[]][+[]]+[+[]] == 10 </p></blockquote><p> true</p><blockquote><p> 最短的代码实现数组去重</p></blockquote><pre><code>[...new Set([1, &quot;1&quot;, 2, 1, 1, 3])]</code></pre><blockquote><p>用最短的代码实现一个长度为m(6)且值都n(8)的数组</p></blockquote><pre><code>Array(6).fill(8)</code></pre><blockquote><p>短路表达式</p></blockquote><pre><code>条件判断var a = b &amp;&amp; 1    // 相当于if (b) {    a = 1} else {    a = b}var a = b || 1    // 相当于if (b) {    a = b} else {    a = 1}</code></pre><blockquote><p> 取出一个数组中的最大值和最小值</p></blockquote><pre><code>var numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411]; var maxInNumbers = Math.max.apply(Math, numbers); var minInNumbers = Math.min.apply(Math, numbers);</code></pre><blockquote><p> 将argruments对象转换成数组</p></blockquote><pre><code>var argArray = Array.prototype.slice.call(arguments);或者ES6：var argArray = Array.from(arguments)</code></pre><blockquote><p>javascript高逼格之Function构造函数</p></blockquote><pre><code>很多JavaScript教程都告诉我们，不要直接用内置对象的构造函数来创建基本变量，例如var arr = new Array(2); 的写法就应该用var arr = [1, 2];的写法来取代。但是，Function构造函数（注意是大写的Function）有点特别。Function构造函数接受的参数中，第一个是要传入的参数名，第二个是函数内的代码（用字符串来表示）。var f = new Function(&apos;a&apos;, &apos;alert(a)&apos;);f(&apos;jawil&apos;); // 将会弹出窗口显示jawil</code></pre><blockquote><p>从一个数组中找到一个数，O(n)的算法，找不到就返回 null。</p></blockquote><pre><code>正常的版本:function find (x, y) {  for ( let i = 0; i &lt; x.length; i++ ) {    if ( x[i] == y ) return i;  }  return null;}let arr = [0,1,2,3,4,5]console.log(find(arr, 2))console.log(find(arr, 8))结果到了函数式成了下面这个样子（好像上面的那些代码在下面若影若现，不过又有点不太一样，为了消掉if语言，让其看上去更像一个表达式，动用了 ? 号表达式）：//函数式的版本const find = ( f =&gt; f(f) ) ( f =&gt;  (next =&gt; (x, y, i = 0) =&gt;    ( i &gt;= x.length) ?  null :      ( x[i] == y ) ? i :        next(x, y, i+1))((...args) =&gt;          (f(f))(...args)))let arr = [0,1,2,3,4,5]console.log(find(arr, 2))console.log(find(arr, 8))</code></pre><blockquote><p>object 2 json</p></blockquote><pre><code>let foo = { a: 2, b: {c:1,d:2} };JSON.stringify(foo);&quot;{&quot;a&quot;:2,&quot;b&quot;:{&quot;c&quot;:1,&quot;d&quot;:2}}&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo建站过程中遇到的问题（填坑篇）</title>
      <link href="/article/Hexo%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%A1%AB%E5%9D%91%EF%BC%89/"/>
      <url>/article/Hexo%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%A1%AB%E5%9D%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在此收集Hexo建站过程中遇到的问题（填坑）</p></blockquote><p>1 执行 <code>hexo d</code> 报 <code>ERROR Deployer not found: git</code></p><p><img src="https://sogrey.github.io/pics/hexo_d_not_fount_git.png" alt=""></p><p>解决方法： 执行 <code>npm install hexo-deployer-git --save</code></p><p>2 local search 失效（换电脑后）</p><p>更换电脑后，源文件打包拷过来，却发现本地搜索失效：</p><p><img src="https://sogrey.github.io/pics/本地搜索失效.png" alt=""></p><p>解决方法： 重新安装 search 插件 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">github</a></p><p>执行 <code>npm install hexo-generator-search --save</code></p><p><img src="https://sogrey.github.io/pics/hexo-generator-search.png" alt=""></p><p>重新编译发布正常：</p><p><img src="https://sogrey.github.io/pics/本地搜索正常.png" alt=""></p><p><em>会持续更新…</em></p>]]></content>
      
      
      <categories>
          
          <category> Hexo建站填坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo建站填坑 </tag>
            
            <tag> 手记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android library 发布到 JCenter</title>
      <link href="/article/Android-library-%E5%8F%91%E5%B8%83%E5%88%B0-JCenter/"/>
      <url>/article/Android-library-%E5%8F%91%E5%B8%83%E5%88%B0-JCenter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从来都是从中央仓库下载jar,这次需要向中央仓库提交jar。网上也有很多文章都是以gradle-bintray-plugin这个插件做上传，本篇是参照<a href="http://blog.csdn.net/lmj623565791/article/details/51148825" target="_blank" rel="noopener">鸿洋大神</a>的博文亲身采用bintray-release这个插件操作的。特此记录，贡献大家，为方便以后再次发布。</p><p>上传到  JitPack 可参考<a href="http://www.jianshu.com/p/1fecc80cbd59?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">这篇</a></p></blockquote><a id="more"></a><h2 id="注册bintray账号"><a href="#注册bintray账号" class="headerlink" title="注册bintray账号"></a>注册bintray账号</h2><p>JCenter是bintray旗下中央仓库，先在<a href="https://bintray.com/" title="bintray官网" target="_blank" rel="noopener">bintray的官网</a>注册一个账号，为方便起见也可以使用github账号登录。</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_011207.jpg" alt="bintray的官网注册登录"></p><p>用于开源分发可点击For Open Source Distribution <a href="https://bintray.com/signup/oss" target="_blank" rel="noopener">Sign Up Here</a>注册/登录。</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_012113.jpg" alt="bintray的官网注册登录"></p><p>注册/登录成功后进入个人中心：</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_012509.jpg" alt="bintray个人中心"></p><p>到此注册bintray账号的准备工作就做完了，下面我们准备一个将要发布的库项目Android Studio项目。</p><p>另：顺便做点准备工作，在bintray个人中心获取API KEY（地址是：<a href="https://bintray.com/profile/edit" title="https://bintray.com/profile/edit" target="_blank" rel="noopener">https://bintray.com/profile/edit</a>），也可以在个人中心点击<code>Edit</code>或鼠标移到右上角你的用户名出弹出菜单点击<code>Edit Profile</code>,跳到下面页面：</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_015247_1.jpg" alt="Edit Profile"></p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_015849.jpg" alt="查看API Key"></p><p>点击① API KEY –&gt; ② 复制API KEY，以备后用。</p><h2 id="准备要发布的库"><a href="#准备要发布的库" class="headerlink" title="准备要发布的库"></a>准备要发布的库</h2><p>我准备的android项目是九宫手势图案的自定义View。先来看下项目整体结构：</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_013513.jpg" alt="项目整体结构"></p><p>其中，lock9viewlib 这个库Module就是我们将要发布的开源库。下面就准备发布前的一系列设置吧。</p><h2 id="准备发布"><a href="#准备发布" class="headerlink" title="准备发布"></a>准备发布</h2><h3 id="1-引入bintray-release"><a href="#1-引入bintray-release" class="headerlink" title="1.引入bintray-release"></a>1.引入bintray-release</h3><p>在项目的build.gradle添加bintray-release的classpath，注意是项目根目录下的的build.gradle。</p><pre><code>buildscript {    repositories {        jcenter()    }    dependencies {        classpath &apos;com.android.tools.build:gradle:1.2.3&apos;        classpath &apos;com.novoda:bintray-release:0.3.4&apos; //添加    }}</code></pre><h3 id="2-设置moudle的build-gralde"><a href="#2-设置moudle的build-gralde" class="headerlink" title="2.设置moudle的build.gralde"></a>2.设置moudle的build.gralde</h3><p>在库Module的build.gradle里设置如下：</p><pre><code>apply plugin: &apos;com.android.library&apos;apply plugin: &apos;com.novoda.bintray-release&apos;//添加//添加publish {    userOrg = &apos;sogrey&apos;//bintray.com用户名    groupId = &apos;org.sogrey&apos;//jcenter上的路径    artifactId = &apos;lock9view&apos;//项目名称    publishVersion = &apos;0.0.1&apos;//版本号    desc = &apos;This is a view for Android to lock screen.&apos;//描述    website = &apos;https://github.com/Sogrey/Lock9View&apos;//网站}</code></pre><p>设置完毕最终引入的方式为：</p><blockquote><p>compile ‘{groupId}:{artifactId}:{publishVersion}’</p></blockquote><p>对于本例即就是如下：</p><p>compile ‘org.sogrey:lock9view:0.0.1’</p><p>完成上面的配置后，就准备上传了。</p><h3 id="3-在添加新的Maven库（已有请路过）"><a href="#3-在添加新的Maven库（已有请路过）" class="headerlink" title="3.在添加新的Maven库（已有请路过）"></a>3.在添加新的Maven库（已有请路过）</h3><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-09_111642.jpg" alt="添加新的Maven库"></p><p>点击 <code>Add New Repository</code> 添加，</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_022138.jpg" alt="Add New Repository"></p><p>添加成功，进入如下页面：</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_022524.jpg" alt="添加仓库成功"></p><p>点击 <code>Add New Package</code>,添加一个新的包</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_022802.jpg" alt="添加一个新的包"></p><h3 id="4-上传"><a href="#4-上传" class="headerlink" title="4.上传"></a>4.上传</h3><p>上传很简单，执行下面命令：</p><p>Mac os:</p><pre><code>./gradlew clean build bintrayUpload -PbintrayUser=username -PbintrayKey=xxxxxxxxxxxxxxxxxxxxxx -PdryRun=false</code></pre><p>win OS:则没有前面的 <code>./</code> ：</p><pre><code>gradlew clean build bintrayUpload -PbintrayUser=username -PbintrayKey=xxxxxxxxxxxxxxxxxxxxxx -PdryRun=false</code></pre><p>其中<code>username</code>用你的bintray用户名替换，<code>xxxxxxxxxxxxxxxxxxxxxx</code>用之前拿到的 API KEY 来替换。<br>该命令可在Android studio自带的 <code>Terminal</code> 执行：</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-09_113608_1.jpg" alt="Terminal执行命令"></p><p>第一次执行时会下载一堆 .pom 和 .jar,耐心等待。直到出现 <code>BUILD SUCCESSFUL</code> 就ok了。</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-09_211916.jpg" alt="BUILD SUCCESSFUL"></p><h3 id="5-添加到JCenter"><a href="#5-添加到JCenter" class="headerlink" title="5.添加到JCenter"></a>5.添加到JCenter</h3><p>进入maven库中的我们新建的lock9view，点击 <code>Add to JCenter</code>,下面等待审核，通过后便可在我们的项目中引用了，Gradle 的引用方式：</p><p>compile ‘org.sogrey:lock9view:0.0.1’</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_023802.jpg" alt="Add to JCenter"></p><p>审核通过后，上图中的  <code>Add to JCenter</code> 的按钮就消失了。</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_093202.jpg" alt=""></p><p>点击 <code>Jcenter</code> 可查看到以项目名称artifactId <code>lock9view</code> 过滤查到的项目，目前有两个，左边是咱们自己上传的。</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_093356.jpg" alt="查看JCenter项目"></p><h3 id="6-在Android项目中compile"><a href="#6-在Android项目中compile" class="headerlink" title="6.在Android项目中compile"></a>6.在Android项目中compile</h3><p>在实例项目的build.gradle文件编辑：</p><pre><code>//  compile project(&apos;:lock9viewlib&apos;) //注释Module引用    compile &apos;org.sogrey:lock9view:0.0.1&apos; //添加compile引用JCenter中央仓库的库文件</code></pre><p>重新运行示例项目，成功。</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_094240.jpg" alt="运行示例项目"></p><h2 id="更新已发布的库"><a href="#更新已发布的库" class="headerlink" title="更新已发布的库"></a>更新已发布的库</h2><h3 id="1-更新版本"><a href="#1-更新版本" class="headerlink" title="1. 更新版本"></a>1. 更新版本</h3><p>更新代码后记得更新版本号，修改 module 的 build.gradle 文件里 android -&gt; defaultConfig 下版本信息 :</p><pre><code>versionCode 2versionName &quot;0.0.2&quot;</code></pre><p>另外，publish下的版本号莫忘了修改：</p><pre><code>publish {    userOrg = &apos;sogrey&apos;    groupId = &apos;org.sogrey&apos;    artifactId = &apos;lock9view&apos;    publishVersion = &apos;0.0.2&apos;//修改版本号    desc = &apos;Oh hi, this is a view for Android to lock screen.&apos;    website = &apos;https://github.com/Sogrey/Lock9View&apos;}</code></pre><h3 id="2-提交更新"><a href="#2-提交更新" class="headerlink" title="2. 提交更新"></a>2. 提交更新</h3><p>提交更新跟之前提交JCenter一样，执行命令：</p><p>Mac os:</p><pre><code>./gradlew clean build bintrayUpload -PbintrayUser=username -PbintrayKey=xxxxxxxxxxxxxxxxxxxxxx -PdryRun=false</code></pre><p>win OS:则没有前面的 <code>./</code> ：</p><pre><code>gradlew clean build bintrayUpload -PbintrayUser=username -PbintrayKey=xxxxxxxxxxxxxxxxxxxxxx -PdryRun=false</code></pre><h2 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h2><h3 id="坑1-错误：编码GBK的不可映射字符"><a href="#坑1-错误：编码GBK的不可映射字符" class="headerlink" title="坑1. 错误：编码GBK的不可映射字符"></a>坑1. 错误：编码GBK的不可映射字符</h3><p>如下图:</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-09_125938.jpg" alt="错误：编码GBK的不可映射字符"></p><p>很明显是因为我们项目中有中文注释编码是 GBK，在生成 javadoc 时出错，需要改为 “utf-8” ,android  studio中 File -&gt; settings -&gt; Editor -&gt; File Encodings</p><p><img src="https://sogrey.github.io/pics/sogrey_2017-03-10_095102.jpg" alt="android  studio中 File -&gt; settings -&gt; Editor -&gt; File Encodings"></p><p>同时可设置项目的build.gradle:</p><pre><code>//添加allprojects {    tasks.withType(Javadoc) {        options{ encoding &quot;UTF-8&quot; charSet &apos;UTF-8&apos; links &quot;http://docs.oracle.com/javase/7/docs/api&quot; }    }}</code></pre><p>设置module的build.gradle:</p><pre><code>tasks.withType(JavaCompile) {    options.encoding = &quot;utf-8&quot;}task sourcesJar(type: Jar) {    from android.sourceSets.main.java.srcDirs    classifier = &apos;sources&apos;}task javadoc(type: Javadoc) {    source = android.sourceSets.main.java.srcDirs    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))    options.encoding = &quot;UTF-8&quot;}task javadocJar(type: Jar, dependsOn: javadoc) {    classifier = &apos;javadoc&apos;    from javadoc.destinationDir}artifacts {    archives javadocJar    archives sourcesJar}</code></pre><h3 id="坑2-后续遇到新的问题在此记录…"><a href="#坑2-后续遇到新的问题在此记录…" class="headerlink" title="坑2. 后续遇到新的问题在此记录…"></a>坑2. 后续遇到新的问题在此记录…</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://blog.csdn.net/lmj623565791/article/details/51148825" target="_blank" rel="noopener">Android 快速发布开源项目到jcenter</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> JCenter </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则表达式匹配汇集</title>
      <link href="/article/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E6%B1%87%E9%9B%86/"/>
      <url>/article/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E6%B1%87%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在此收集遇到的用过的有用的正则表达式匹配规则</p></blockquote><p>正则表达式验证：</p><ol><li><a href="http://regexr.com/" title="http://regexr.com/" target="_blank" rel="noopener">http://regexr.com/</a></li><li><a href="http://tool.lu/regex/" title="http://tool.lu/regex/" target="_blank" rel="noopener">http://tool.lu/regex/</a></li></ol><a id="more"></a><ol><li>只能输入数字：”<code>^[0-9]*$</code>“。</li><li>只能输入n位的数字：”<code>^/d{n}$</code>“。</li><li>只能输入至少n位的数字：”<code>^/d{n,}$</code>“。</li><li>只能输入m~n位的数字：。”<code>^/d{m,n}$</code>“</li><li>只能输入零和非零开头的数字：”<code>^(0|[1-9][0-9]*)$</code>“。</li><li>只能输入有两位小数的正实数：”<code>^[0-9]+(.[0-9]{2})?$</code>“。</li><li>只能输入有1~3位小数的正实数：”<code>^[0-9]+(.[0-9]{1,3})?$</code>“。</li><li>只能输入非零的正整数：”<code>^/+?[1-9][0-9]*$</code>“。</li><li>只能输入非零的负整数：”<code>^/-[1-9][]0-9&quot;*$</code>“。</li><li>正数（包括小数）:<code>/&lt;sup&gt;[+]{0,1}(\d+)$|&lt;/sup&gt;[+]{0,1}(\d+\.\d+)$/</code></li><li>正整数(不包括小数)：<code>/^[+]{0,1}(\d+)$/</code></li><li>只能输入长度为3的字符：”<code>^.{3}$</code>“。</li><li>只能输入由26个英文字母组成的字符串：”<code>^[A-Za-z]+$</code>“。</li><li>只能输入由26个大写英文字母组成的字符串：”<code>^[A-Z]+$</code>“。</li><li>只能输入由26个小写英文字母组成的字符串：”<code>^[a-z]+$</code>“。</li><li>只能输入由数字和26个英文字母组成的字符串：”<code>^[A-Za-z0-9]+$</code>“。</li><li>只能输入由数字、26个英文字母或者下划线组成的字符串：”<code>^/w+$</code>“。</li><li>验证用户密码：”<code>^[a-zA-Z]/w{5,17}$</code>“正确格式为：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。</li><li>验证是否含有<sup>%&amp;’,;=?$/“等字符：”<code>[&lt;/sup&gt;%&amp;&#39;,;=?$/x22]+</code>“。</sup></li><li>只能输入汉字：”<code>^[/u4e00-/u9fa5]{0,}$</code>“</li><li>验证Email地址：”<code>^/w+([-+.]/w+)*@/w+([-.]/w+)*/./w+([-.]/w+)*$</code>“。</li><li>验证InternetURL：”<code>^http://([/w-]+/.)+[/w-]+(/[/w-./?%&amp;=]*)?$</code>“。</li><li>验证电话号码：”<code>^(/(/d{3,4}-)|/d{3.4}-)?/d{7,8}$</code>“正确格式为：”XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX”。</li><li>验证身份证号（15位或18位数字）：”<code>^/d{15}|/d{18}$</code>“。</li><li>验证一年的12个月：”<code>^(0?[1-9]|1[0-2])$</code>“正确格式为：”01”～”09”和”1”～”12”。</li><li>验证一个月的31天：”<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code>“正确格式为；”01”～”09”和”1”～”31”。</li></ol><p>另：</p><ol><li>8位及以上，必须包含字母数字：”<code>&lt;sup&gt;(?![&lt;/sup&gt;a-zA-Z]+$)(?!\\D+$).{8,}$</code>“</li><li>8位及以上，必须包含字符（所有字符均可）数字：”<code>^(?=.*[a-zA-Z])(?=.*[0-9]).{8,}$</code>“</li></ol><p><em>会持续更新…</em></p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手记 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术文章之Html（CSS，JS）</title>
      <link href="/article/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E4%B9%8BHtml%EF%BC%88CSS-JS%EF%BC%89/"/>
      <url>/article/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E4%B9%8BHtml%EF%BC%88CSS-JS%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><ol><li><a href="http://www.ctolib.com/topics-107352.html" target="_blank" rel="noopener">总结一些JavaScript开发的著名开源项目</a></li><li><a href="https://github.com/hustcc/JS-Sorting-Algorithm" target="_blank" rel="noopener">十大经典排序算法</a></li><li><a href="http://mp.weixin.qq.com/s/CuIvDjUsZ_2Xvr-WYRsqzw" target="_blank" rel="noopener">必须知道的十大程序员开发用到的基本算法</a></li><li><a href="https://segmentfault.com/a/1190000008649988?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly" target="_blank" rel="noopener">黑科技：CSS定制多行省略</a></li><li><a href="https://www.h5jun.com/post/sixty-lines-of-code-animation.html" target="_blank" rel="noopener">用65行代码实现JavaScript动画序列播放</a></li></ol><p><em>会持续更新…</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文章 </tag>
            
            <tag> Html </tag>
            
            <tag> CSS </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术文章之Android</title>
      <link href="/article/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E4%B9%8BAndroid/"/>
      <url>/article/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E4%B9%8BAndroid/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在此收集看过的有用的有趣的Android技术知识，以备重阅。</p><a id="more"></a><ol><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822025&amp;idx=1&amp;sn=c01dbe2a685b6919a7029b822347fa61&amp;chksm=80b78117b7c00801b74405beb6431ac7039b6d0dac724466bbb317f2b1294cbdd75edfdfd906&amp;mpshare=1&amp;scene=23&amp;srcid=0210LJTe593ujVJxnpSAYrBY#rd" target="_blank" rel="noopener">Android Camera使用总结与那些坑</a></li><li><a href="http://m.blog.csdn.net/article/details?id=54694260" target="_blank" rel="noopener">微信Android热更新Tinker使用详解（by 星空武哥)</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434612&amp;idx=1&amp;sn=ae6678d8a14d3a9359e9251aeb051db4&amp;chksm=f128870fc65f0e192424e33716021c4cc1efa2e83ccaf3e7a89f485c84e945af87a00961c34f&amp;mpshare=1&amp;scene=23&amp;srcid=0208k9ZqJq9mC2xUiubNDNNM#rd" target="_blank" rel="noopener">【精品】仿网易云音乐播放界面</a></li><li><a href="https://github.com/aa112901/remusic" target="_blank" rel="noopener">仿网易云音乐 安卓版</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247483928&amp;idx=1&amp;sn=7859e0057d4f484c5598341d6d1bae9b&amp;chksm=e95b9b8ede2c129893512aa7c9abcb964ccc7252f250d5983d1b9d26a604de040636ed2ac3e1&amp;mpshare=1&amp;scene=23&amp;srcid=0208MdlVaNt4CsqTBTfAqoQO#rd" target="_blank" rel="noopener">实践！业余时间做的一款阅读类App （MVP + RxJava + Retrofit）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822023&amp;idx=1&amp;sn=252e5053e9ad949638b98fc53b99b091&amp;chksm=80b78119b7c0080f7b1f12f54ccfaf344a9f89b32fde7e16a5bf166b11d5faadde21880b893d&amp;mpshare=1&amp;scene=23&amp;srcid=0208WcZEfaGjR6M7yiRoYtCi#rd" target="_blank" rel="noopener">Android 提高代码质量 之 多种检测方案</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650821994&amp;idx=1&amp;sn=265ea44d9db97a18c334d948fc0846aa&amp;chksm=80b781f4b7c008e2bfcdde084f74e8e6ff8cb70b21b641fafccb7b5fb330cb5752adb1a802b3&amp;mpshare=1&amp;scene=23&amp;srcid=0207nptfmHEZp4TCraikagZP#rd" target="_blank" rel="noopener">Android 使用WindowManager实现悬浮窗及源码解析</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434523&amp;idx=1&amp;sn=234b79fe60af1d564d806dc2356c554b&amp;chksm=f1288760c65f0e768b4604914c87a0fe21b1836b5fd0b7827a90e2c12251245384ad81a00686&amp;mpshare=1&amp;scene=23&amp;srcid=0124nmSx66kXM9I47T7HAoRR#rd" target="_blank" rel="noopener">【重磅】支付宝使用的开源组件总结！</a></li><li><a href="http://mp.weixin.qq.com/s/d9KYCnccwR4EqSWGzNpgaQ" target="_blank" rel="noopener">Android View相关核心知识问答</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434652&amp;idx=1&amp;sn=da0ceda73595e5cb931abad7e51dbe62&amp;chksm=f12887e7c65f0ef1c086784e9ae77a7d9bd82daa6ba0302cebf307577ebd06fd3e0d9e37e87a&amp;mpshare=1&amp;scene=23&amp;srcid=0214krfLUHbvJekl3snlIYUG#rd" target="_blank" rel="noopener">2017年,身为Android开发的你必须要掌握的热门开源框架</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247483943&amp;idx=1&amp;sn=513e35f410a80b65d476d8e0740989be&amp;chksm=e95b9bb1de2c12a7e1d823407e5e52c8725a30139c3eff35423f4e755de0ed84e69b7aee62ec&amp;mpshare=1&amp;scene=23&amp;srcid=02139FATY6IN8m20sSgXL3IN#rd" target="_blank" rel="noopener">Android冷启动实现APP秒开</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247483947&amp;idx=1&amp;sn=8c78d6d59503588c1244db8a87f3cb62&amp;chksm=e95b9bbdde2c12ab852485fe39a6c595edb199edef44b0057520c4697f1d5ccf26a7bc197e72&amp;mpshare=1&amp;scene=23&amp;srcid=0215gfKQ1v0KnyIyxICz4HCY#rd" target="_blank" rel="noopener">高仿钉钉和小米的日历控件，很实用</a></li><li><a href="http://www.android100.org/html/201406/08/21147.html" target="_blank" rel="noopener">Android相对布局属性全集</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247483974&amp;idx=1&amp;sn=c88299b9c458521db9e7ba4863f90d52&amp;chksm=e95b9bd0de2c12c6f8270a4fcc8185ec2dbef320410a0e11c81bea965166c9802d10e6247d68&amp;mpshare=1&amp;scene=23&amp;srcid=0217d3Q9uP53NlhF3dOqCYU6#rd" target="_blank" rel="noopener">编译时间从33.8秒降到4.5秒我只多做了一件事</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434682&amp;idx=1&amp;sn=5b277d151a18a6bd1521c1af452e3e3f&amp;chksm=f12887c1c65f0ed70cee86fbde5c1f63ffe292fec72225225d070c0a14ecb3c3855e91f29f07&amp;mpshare=1&amp;scene=23&amp;srcid=02196O2Lh5ZhtH28pduwF9kf#rd" target="_blank" rel="noopener">全面了解Android Notification</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822072&amp;idx=1&amp;sn=82e36025a1e37b8cbb68e6f86dd08698&amp;chksm=80b78126b7c008300d2d1ce0300adf008e53b278f24da4ea3a4b90fafa74b174e91a8ffb7964&amp;mpshare=1&amp;scene=23&amp;srcid=0219HbeYoHrNTclXl5GhxjWK#rd" target="_blank" rel="noopener">Android 6.0 自定义文本选择操作 咕咚翻译的体验优化</a></li><li><a href="http://mp.weixin.qq.com/s/EGM6SLe_5VthIrzMzkVPqg" target="_blank" rel="noopener">什么？IOS的专利？Android也能流畅实现毛玻璃效果(高斯模糊)效果</a></li><li><a href="http://mp.weixin.qq.com/s/H9v0YeXoZ5YAmmraEA9aaQ" target="_blank" rel="noopener">一种快速毛玻璃虚化效果实现</a></li><li><a href="http://wetest.qq.com/lab/view/288.html?from=adsout_qqtips_past2_288&amp;sessionUserType=BFT.PARAMS.211332.TASKID&amp;ADUIN=408270653&amp;ADSESSION=1487902007&amp;ADTAG=CLIENT.QQ.5515_.0&amp;ADPUBNO=26657" target="_blank" rel="noopener">深度了解Android 7.0 ，你准备好了吗？</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822149&amp;idx=1&amp;sn=170f91c7a8f3142e5e0753edeef6ba77&amp;chksm=80b7829bb7c00b8d866e6d622df7fea71ef435baf23e0809dd573aaa08ebd849b87e6b000796&amp;mpshare=1&amp;scene=23&amp;srcid=022678v7owLVNhctiGQnwGi7#rd" target="_blank" rel="noopener">Android 广播相关的都在这儿</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247484019&amp;idx=1&amp;sn=dc0ebf85da6556b1f6703119be215fea&amp;chksm=e95b9be5de2c12f321b79f13841d4f1f86a7e5a878ba895f85c83d21735823d4f7c4f98dbb19&amp;mpshare=1&amp;scene=23&amp;srcid=0227hRB6ZnIY0blZltECJFAu#rd" target="_blank" rel="noopener">Android ADB命令?这一次我再也不死记了!</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822191&amp;idx=1&amp;sn=3a4280242d79af3df35501b397fedfa1&amp;chksm=80b782b1b7c00ba786c6a7bf09a1107e85bde35d3902b084457436ba46dd269b9f9ab99614ea&amp;mpshare=1&amp;scene=23&amp;srcid=0227Urwy034GuHMR70kKc1UF#rd" target="_blank" rel="noopener">Android 系统自带DownloadManager详解</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434751&amp;idx=1&amp;sn=4154b06e059e17a983053a2c4806c24c&amp;chksm=f1288784c65f0e92a443a4112c1f808db72a8595b8ba0cae9d36c661e9bb830e554b0ff87664&amp;mpshare=1&amp;scene=23&amp;srcid=02271fuPd78L1MUQFhlJugdG#rd" target="_blank" rel="noopener">Android Camera使用总结与那些坑</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NTcxNTg5Mg==&amp;mid=2247483968&amp;idx=1&amp;sn=b3ea4e058af219d8f9a8994c21569676&amp;chksm=e94b049bde3c8d8d52572a0a07ee0739b3a1df53f76871d8befa3589466579fbe27d0cd7feda&amp;mpshare=1&amp;scene=23&amp;srcid=0228IyWTXDV2f0l97TK2RUb2#rd" target="_blank" rel="noopener">开源许可协议了解这些就够了</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434795&amp;idx=1&amp;sn=fcbed3a22bce615e77b0945b0b54859a&amp;chksm=f1288650c65f0f4612dd770566d961430ff63dfe5b84ccf66393fa0719ceb422955532aab091&amp;mpshare=1&amp;scene=23&amp;srcid=0304wcDitruVFMCQYf4KSjLf#rd" target="_blank" rel="noopener">【高端】天猫 Android UI 框架项目Tangram</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247484054&amp;idx=1&amp;sn=febcfe56632f43a46f7a6d8e240b2123&amp;chksm=e95b9b00de2c12165be5bbb3c4811e47e15631bad84a336ac6f5f8558ff8941ba934a845331b&amp;mpshare=1&amp;scene=23&amp;srcid=0304cbEFWsCc3LU1whZl8aWz#rd" target="_blank" rel="noopener">通过这篇文章，我找到了工作！一款优雅的App开源项目-iDaily</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247484060&amp;idx=1&amp;sn=737571b872e0c90f26fd2f2990a872ee&amp;chksm=e95b9b0ade2c121c56ae3c60d80f03c4caf098f9a0abf374c065be01156091ad5b7bbdf50ee2&amp;mpshare=1&amp;scene=23&amp;srcid=0306XrVWaYnrXJZmyptsvxkJ#rd" target="_blank" rel="noopener">Android卸载监听之后访问后台或者弹出一个网页</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822215&amp;idx=1&amp;sn=964d9f9c951044e572cccb8846330d25&amp;chksm=80b782d9b7c00bcf9533d0ea5085d449083d014d6aa585817610e4d1b17fe89922eca7deb6c7&amp;mpshare=1&amp;scene=23&amp;srcid=0305DLBdpq9zXDPxMe54AHfY#rd" target="_blank" rel="noopener">Android插件化框架系列之类加载器</a></li><li><a href="http://www.jianshu.com/p/d17af84711a1?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">Android网络框架选择（Volley、OkHttp、Retrofit）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650238755&amp;idx=1&amp;sn=b4f3b351a3c8f440b538db58e67fb46d&amp;chksm=88639e4cbf14175af6f4c27549951d718938e7f874215e765a480a1b89a0dafc6dc47bdb3954&amp;mpshare=1&amp;scene=23&amp;srcid=0304DLO87Ua9ORpyRpssnnmB#rd" target="_blank" rel="noopener">如何用一周时间开发一款Android APP并在Google Play上线</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434801&amp;idx=1&amp;sn=b44f08dcba949cf0b78b5adc93bc8989&amp;chksm=f128864ac65f0f5c264a2ef7a202f3526fe7131ab2ec4f50f21f92076ea84e8ac0d9cbc9a3cc&amp;mpshare=1&amp;scene=23&amp;srcid=0305tDFmvzNh6f1Je9W7ODBT#rd" target="_blank" rel="noopener">安居客Android项目架构演进</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434590&amp;idx=1&amp;sn=61e8db6d4f732136764eb4e988a9276f&amp;chksm=f1288725c65f0e334175a43ac03166ff39efa14935e67ca9044d8b367c18cc777a23c02cfcaa&amp;mpshare=1&amp;scene=23&amp;srcid=0207WjJj6tVhQhmzAZajVHKO#rd" target="_blank" rel="noopener">android多图选择器 图片/视频 单选or多选，以及视频录制</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822225&amp;idx=1&amp;sn=09177524a9e51bd049b1d042339863ec&amp;chksm=80b782cfb7c00bd9ea3933f812c66770bd00af87c78691ad45650cd017d5d35347af30781e85&amp;mpshare=1&amp;scene=23&amp;srcid=0305uuFF1GyOVIPJwYy34JKh#rd" target="_blank" rel="noopener">【源码】 Android 不要错过的7个完整项目学习</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650238794&amp;idx=1&amp;sn=f105f8100d62a202f5695f9496425063&amp;chksm=88639e25bf1417330f0ffb1cf6c10ea07359ff25774313fac5addfb25541f7969d1d178e17cc&amp;mpshare=1&amp;scene=23&amp;srcid=0307BnnrQkjyfXWtDKaSKey9#rd" target="_blank" rel="noopener">LitePal 1.5.0版本发布，你想要的都在这里</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247484068&amp;idx=1&amp;sn=b77a4e7be6ee2d6aede46c07fa737022&amp;chksm=e95b9b32de2c1224116281ab3877f3ab0c36d3c220315d5eec2a85cd01d20a0e6ac218cc3944&amp;mpshare=1&amp;scene=23&amp;srcid=0307ndVEUZCfBiJnTzU3JBg3#rd" target="_blank" rel="noopener">比QQ更炫酷的’选项弹窗’动画</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434805&amp;idx=1&amp;sn=c1eaf9d6be0259c1cb9eb632e981e61f&amp;chksm=f128864ec65f0f580eb49217bb5703401f0fbb42b5accec992d3b71a6eed570a2962f0ef1e94&amp;mpshare=1&amp;scene=23&amp;srcid=0307oCu1pFbVmXM5ndunyITW#rd" target="_blank" rel="noopener">【推荐】Android APK 瘦身实践</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822272&amp;idx=1&amp;sn=a1d7956dd8437d4bb28e47fab814a7ed&amp;chksm=80b7821eb7c00b08eb8de256529a7cbd153ca1064612eef88fe912ba9ecb11763baacc279ccb&amp;mpshare=1&amp;scene=23&amp;srcid=0307yjSaM4ItKqIYSfO5CJo6#rd" target="_blank" rel="noopener">Android性能优化系列之内存优化</a></li><li><a href="https://github.com/m511386374/PopWin_MeiTuan" target="_blank" rel="noopener">仿美团做的一个下拉选择页，类似于电商app中筛选距离的下拉菜单</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247484070&amp;idx=1&amp;sn=483e54aa85354e05dc7a8d441d9232f0&amp;chksm=e95b9b30de2c12260cf2b87d5a13fa43609c1f6be5a2898f31f14b40e2113b8df136ba1ee6dc&amp;mpshare=1&amp;scene=23&amp;srcid=0308J2PpZ44c8mIKXUyOYilp#rd" target="_blank" rel="noopener">让我们聊一聊安卓应用角标那些事儿</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650238800&amp;idx=1&amp;sn=edf37925bc998ccb9d69912bb1f2cd2d&amp;chksm=88639e3fbf141729a6a02d8feda0e12bea97aa17e6482d22e1d8b7b6cf0ed92889239549acee&amp;mpshare=1&amp;scene=23&amp;srcid=0308iEgd2AIR7rE3o2UuT9zh#rd" target="_blank" rel="noopener">使用OKHttp3实现下载(断点续传、显示进度)</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650821993&amp;idx=1&amp;sn=550a90e30a398bbb652ecd65209b62e2&amp;chksm=80b781f7b7c008e17d9f5a59542f46329d28cbcd2ec075d4c2d44784f789135166a4e1949303&amp;mpshare=1&amp;scene=23&amp;srcid=0309ud57QhmmrCPBrhPxoRQh#rd" target="_blank" rel="noopener">Android 热修复 Tinker接入及源码浅析</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822276&amp;idx=1&amp;sn=b19704a9d25b266d108de13cba5b5cfe&amp;chksm=80b7821ab7c00b0cfe2c2da31fdfffede56f9aef82b85254083ec4db3e8f6aa445c96ab01de5&amp;mpshare=1&amp;scene=23&amp;srcid=0309NLJ1O9vIzz9yMzUguTPx#rd" target="_blank" rel="noopener">Android 热修复 Tinker 源码分析之DexDiff / DexPatch</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650238826&amp;idx=1&amp;sn=294d91d9a190ea56822696994f8a04b0&amp;chksm=88639e05bf1417137f364037bb35a8fcc120679c92b924cfabffa7011199d8ac8bba69a25194&amp;mpshare=1&amp;scene=23&amp;srcid=0309gYGHZFr1g8ICrQkRhStN#rd" target="_blank" rel="noopener">一看你就懂，Java中的ClassLoader详解</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822284&amp;idx=1&amp;sn=d6b30ab442f417cbd992e784945c7799&amp;chksm=80b78212b7c00b049243a474933e7a3f356c8b6fca1e8d67a9fcf654cef095c0c28f6a51e31c&amp;mpshare=1&amp;scene=23&amp;srcid=0310u9IxkQdQ6ESusrp1BHEY#rd" target="_blank" rel="noopener">Android性能优化系列之App启动优化</a></li><li><a href="http://www.jianshu.com/p/2cbf5bf3842e?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">Android自定义dialog</a></li><li><a href="http://www.jianshu.com/p/a7e58fab4ff1?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">优雅的使用MVP+RxJava+Retrofit框架</a></li><li><a href="http://www.jianshu.com/p/bc68e763c7a2?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">Android数据库框架 - LitePal学习笔记</a></li><li><a href="http://www.jianshu.com/p/5eac94143bd6?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">插件式换肤框架搭建 - 资源加载源码分析</a></li><li><a href="http://www.jianshu.com/p/af7c0585dd5b?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">Android主题换肤 无缝切换</a></li><li><a href="http://www.jianshu.com/p/a9b86b792c8c?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">Android知识点之悬浮通知栏</a></li><li><a href="http://www.jianshu.com/p/57c454e126a3?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">基于Rxjava+Retrofit+Okhttp+LeanCloud的完整项目（段子手），供大家学习与交流</a></li><li><a href="http://ms.csdn.net/geek/185623" target="_blank" rel="noopener">Android开发时，那些相见恨晚的工具或网站！</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650238877&amp;idx=1&amp;sn=fe65084035413c0c730c0f34b0781287&amp;chksm=88639ef2bf1417e44203de6887fc1607b2ccf4d00e79ce8775b5c375e846a223ac270f14558e&amp;mpshare=1&amp;scene=23&amp;srcid=0315ElX9ZknRnJoSVPHBzXeR#rd" target="_blank" rel="noopener">Android Design Support Library使用详解</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822312&amp;idx=1&amp;sn=b93cbf8185d9bc696e59d2b8187fb94d&amp;chksm=80b78236b7c00b20cbc226dfcb507e8c4f08350de2e86ecf773b505fdc1bf74837b422c86ad1&amp;mpshare=1&amp;scene=23&amp;srcid=0315GGaZpsO2ZNdkjc7vXFn9#rd" target="_blank" rel="noopener">Android进阶系列之Support Annotation Library使用详解</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434848&amp;idx=1&amp;sn=4c6ff5ffcda212d65dfa92174be4cc79&amp;chksm=f128861bc65f0f0dc1ab7f1a25ff9e6d6e72acb7e057a6fb3b9be83c3bb08881f3ec0b03604c&amp;mpshare=1&amp;scene=23&amp;srcid=0315oQ0Gwuf9mXVYmn5kRNbl#rd" target="_blank" rel="noopener">【满满干货】android阿里面试题锦集</a></li><li><a href="https://segmentfault.com/a/1190000008608758" target="_blank" rel="noopener">最全面的 Material Design 学习资料</a></li><li><a href="http://blog.csdn.net/briblue/article/details/54973413" target="_blank" rel="noopener">一看你就懂，超详细java中的ClassLoader详解</a></li><li><a href="http://www.jianshu.com/p/1fecc80cbd59?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">如何做个依赖库让别人依赖使用</a></li><li><a href="http://www.jianshu.com/p/e1d2cc82e756?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">Android实现底部对话框BottomDialog</a></li><li><a href="http://www.jianshu.com/p/0b4854aae105?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">Android中图片压缩方案详解</a></li><li><a href="http://www.jianshu.com/p/932568ed31af?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">Android修改状态栏颜色全方位教程</a></li><li><a href="http://www.jianshu.com/p/3dc0d1291374?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">github 开源库</a></li><li><a href="http://www.jianshu.com/p/023098e98695?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qq" target="_blank" rel="noopener">Toolbar 结合 SearchView实现搜索功能(具备历史记录)</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434858&amp;idx=1&amp;sn=d39e50b16b600d0269cfb8162f17cbc7&amp;chksm=f1288611c65f0f07ac5fdd31a41618ef4cc9ad27193a8caeb464ba1065a73830c989f2b2601d&amp;mpshare=1&amp;scene=23&amp;srcid=0320Q6yLuwAztSFAycB1q9d4#rd" target="_blank" rel="noopener">一种快速毛玻璃虚化效果实现</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822338&amp;idx=1&amp;sn=ee45104f78f00101545ea7b0bba56723&amp;chksm=80b7825cb7c00b4aa37d8ef244745600edba4ab3308d7e4a39f2a2476058affde850db3ccf79&amp;mpshare=1&amp;scene=23&amp;srcid=0320Lo0ecvzwMUuSdpKPyXiK#rd" target="_blank" rel="noopener">Android进阶系列之源码分析AlertDialog建造者模式</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650238917&amp;idx=1&amp;sn=d13fceb5aab551258c64f6aa9e03b9ff&amp;chksm=88639eaabf1417bc470ef3c4240b6b78388959dfb2911f4e4b7e341798a42bdc33151a83dedc&amp;mpshare=1&amp;scene=23&amp;srcid=03204AulbIxfz4IKrX1kQOBO#rd" target="_blank" rel="noopener">onConfigurationChanged方法介绍及问题解决</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822379&amp;idx=1&amp;sn=8dce68bad2a32ebd001e99fcc3a18290" target="_blank" rel="noopener">Android自定义键盘之汉字键盘</a></li><li><a href="http://mp.weixin.qq.com/s/rJ3TawFf6ww_7lfmQzxu5w" target="_blank" rel="noopener">Android 自己动手生成 Apk 了解Apk生成的种种细节</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247484101&amp;idx=1&amp;sn=76c0ec3cc5a59ef915f48567c652119d&amp;chksm=e95b9b53de2c1245b4bafe92838c3149a1727b5e618bcd130a6ecbff2cb0c08afcb39ba3a0bc&amp;mpshare=1&amp;scene=23&amp;srcid=0322eu6kQou0f9CPlvifthTU#rd" target="_blank" rel="noopener">Android可伸缩布局－FlexboxLayout(支持RecyclerView集成)</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDYzMzg0OQ==&amp;mid=2247484095&amp;idx=1&amp;sn=6b067abe805ef665a072480b74aedb04&amp;chksm=e95b9b29de2c123fa33ea267b33a303322fbc645dbbe2014af3e4cc75c33128f9a457583ff76&amp;mpshare=1&amp;scene=23&amp;srcid=03228zmCyFG3jQRoISkAdlQI#rd" target="_blank" rel="noopener">Android鬼点子-又来了一个LoadingBar</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650239018&amp;idx=1&amp;sn=0c81c2ea6a75ca3a4565df750ad8b2e6&amp;chksm=88638145bf1408530bc5722871b6a6d44a1da0175642cc2ce834b6c6b203bfaa3d42fb6b851a&amp;mpshare=1&amp;scene=23&amp;srcid=0329uXeCBJMtEF8WjAIFlllz#rd" target="_blank" rel="noopener">Android通过蓝牙获取通讯录</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650238967&amp;idx=1&amp;sn=0b6bdee06eb94672c2924ac7ad8f2cb2&amp;chksm=88639e98bf14178edce676d2130279ce6db22a16f5f82a569be11a6d7ab6b901c5ee3d927dd5&amp;mpshare=1&amp;scene=23&amp;srcid=0329lTadyUoqpLO68rGcfH6b#rd" target="_blank" rel="noopener">一篇文章带你搞懂DEX文件的结构</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822456&amp;idx=1&amp;sn=10c554676ce9cd0efb35bfda8e70c10f&amp;chksm=80b783a6b7c00ab049e2e38b4913f54d672c3e74cda01ec79b1afa1c0ff6d618222a62f90b93&amp;mpshare=1&amp;scene=23&amp;srcid=0329WofZiPagJsXq3O513hiC#rd" target="_blank" rel="noopener">Android 加快apk的构建速度，如何把编译时间从130秒降到17秒</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434963&amp;idx=1&amp;sn=b52ecf27ce25ac4c0c4509fd96dd98cc&amp;chksm=f12886a8c65f0fbe824134fa59b04da8a2d945c051ae800f8b44eddeb6487cff81434d2da58d&amp;mpshare=1&amp;scene=23&amp;srcid=0329QNcaH7J2e9o1ehpth6To#rd" target="_blank" rel="noopener">【深度总结】一个APP从启动到主页面显示经历了哪些过程？</a></li><li><a href="http://www.jianshu.com/p/0555b8c1d26a" target="_blank" rel="noopener">Android使用矢量图（SVG, VectorDrawable）实践篇</a></li><li><a href="http://www.jianshu.com/p/72494773aace" target="_blank" rel="noopener">Android开发人员不得不收集的代码(持续更新中)</a></li><li><a href="http://www.jianshu.com/p/b806d014162c" target="_blank" rel="noopener">重撸工具类之LogUtils</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650239012&amp;idx=1&amp;sn=b811e0eec443d5d3f8e9863d95be0cea&amp;chksm=8863814bbf14085ddad6c6beae2293ccd5be8e38ccf926b958953361a0f34071a1e9c8b63183&amp;mpshare=1&amp;scene=23&amp;srcid=03297EZLFKWDr2xTeNrHk7y1#rd" target="_blank" rel="noopener">Android使用记录访问权限</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650239036&amp;idx=1&amp;sn=cdde2a1f6125c8f3d780eff8c8e36076&amp;chksm=88638153bf1408455d5c56f0778d40ba9d4448a1e68ef0bf889c4a99699353e3e4ad99f95398&amp;mpshare=1&amp;scene=23&amp;srcid=0329f83Rxux9IvwfrBODq1h9#rd" target="_blank" rel="noopener">Android7.0适配</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650822398&amp;idx=1&amp;sn=736d183aa5b95d2222e502bc9dc33ba5&amp;chksm=80b78260b7c00b76f3d30a17ded3e30c26993832173c42192d205250a21789011bf4da0cb29b&amp;mpshare=1&amp;scene=23&amp;srcid=0329qoB2w0IgSlGSIWV7mX5F#rd" target="_blank" rel="noopener">Android实战自定义控件 仿华为天气预报UI</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650238931&amp;idx=1&amp;sn=ff6d7701f342f0ef455193f8dca1a5e8&amp;chksm=88639ebcbf1417aa266ea74bfeb63a2a72975eee6cd6cea81ed92094eee716850cede4b0abb7&amp;mpshare=1&amp;scene=23&amp;srcid=0329bcamATCy4gFCNi2RA8pX#rd" target="_blank" rel="noopener">开始新的系列，Glide的基本用法</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434956&amp;idx=1&amp;sn=73192dbef2b117cf5a66432ac9d8b23e&amp;chksm=f12886b7c65f0fa103b8aa4757fc60d3692bb62f6234c2e47b6c4e8c4d488b9a1f2f47a53960&amp;mpshare=1&amp;scene=23&amp;srcid=0329kTsFO8aK85CNYRi2g7Dn#rd" target="_blank" rel="noopener">【MIUI动效】Android：会呼吸的悬浮气泡</a></li><li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/61618945" target="_blank" rel="noopener">Android安全防护之旅—带你把Apk混淆成中文语言代码</a></li><li><a href="http://www.open-open.com/lib/view/open1411443332703.html" target="_blank" rel="noopener">收集android上开源的酷炫的交互动画和视觉效果</a></li><li><a href="http://www.open-open.com/doc/view/bc7ac26ff24b491492d2698807c6dc86" target="_blank" rel="noopener">animation动画详解 - v1.0.pdf</a></li><li><a href="http://www.open-open.com/lib/view/open1328063267889.html" target="_blank" rel="noopener">上百个Android开源项目分享</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650823035&amp;idx=1&amp;sn=2db4eea9eb569bf375f847f36b1229fa" target="_blank" rel="noopener">学习Kotlin吗？</a></li><li><a href="https://www.kotlincn.net/" target="_blank" rel="noopener">kotlin中文站-有学习文档</a></li><li><a href="https://kymjs.com/column/kotlin.html" target="_blank" rel="noopener">Kotlin 一门强大的语言</a></li><li><a href="https://github.com/enbandari/Kotlin-Tutorials" target="_blank" rel="noopener">Kotlin从入门到『放弃』系列 视频教程</a></li><li><a href="https://github.com/githubwing/GankClient-Kotlin" target="_blank" rel="noopener">一个Kotlin实战项目GankClient-Kotlin</a></li></ol><p><em>会持续更新…</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 技术文章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web app相关整理</title>
      <link href="/article/web-app%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86/"/>
      <url>/article/web-app%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Webapp说白了就是一个针对Iphone、Android优化后的web站点，它使用的技术无非就是HTML或HTML5、CSS3、JavaScript，服务端技术JAVA、PHP、ASP。</p></blockquote><h1 id="WebApp与Native-App有何区别呢？"><a href="#WebApp与Native-App有何区别呢？" class="headerlink" title="WebApp与Native App有何区别呢？"></a>WebApp与Native App有何区别呢？</h1><p>Native App：</p><ol><li>开发成本非常大。一般使用的开发语言为JAVA、C++、Objective-C。</li><li>更新体验较差、同时也比较麻烦。每一次发布新的版本，都需要做版本打包，且需要用户手动更新（有些应用程序即使不需要用户手动更新，但是也需要有一个恶心的提示）。</li><li>非常酷。因为native app可以调用IOS中的UI控件以UI方法，它可以实现WebApp无法实现的一些非常酷的交互效果。</li><li>Native app是被Apple认可的。Native app可以被Apple认可为一款可信任的独立软件，可以放在Apple Stroe出售，但是Web app却不行。</li></ol><p>Web App：</p><ol><li><p>开发成本较低。使用web开发技术就可以轻松的完成web app的开发。</p></li><li><p>升级较简单。升级不需要通知用户，在服务端更新文件即可，用户完全没有感觉。</p></li><li><p>维护比较轻松。和一般的web一样，维护比较简单，它其实就是一个站点。</p></li></ol><a id="more"></a><p>另附ppt:<a href="https://github.com/Sogrey/WebApp-ppt" target="_blank" rel="noopener">github</a>，<a href="https://git.coding.net/sogrey/webapp-ppt.git" target="_blank" rel="noopener">coding</a></p><p><a href="http://sogrey.coding.me/webapp-ppt" target="_blank" rel="noopener">coding预览</a>，<a href="http://sogrey.coding.me/webapp-ppt/example/WebApp" target="_blank" rel="noopener">coding示例预览</a></p><p><a href="https://sogrey.github.io/WebApp-ppt/">github预览</a>，<a href="https://sogrey.github.io/WebApp-ppt/example/WebApp">github示例预览</a></p><h1 id="web-app-开发经验"><a href="#web-app-开发经验" class="headerlink" title="web app 开发经验"></a>web app 开发经验</h1><h2 id="1-viewport："><a href="#1-viewport：" class="headerlink" title="1. viewport："></a>1. viewport：</h2><p>也就是可视区域。对于桌面浏览器，我们都很清楚viewport是什么，就是出去了所有工具栏、状态栏、滚动条等等之后用于看网页的区域，<br>这是真正有效的区域。由于移动设备屏幕宽度不同于传统web,因此我们需要改变viewport;<br>实际上我们可以操作的属性有4 个：</p><pre><code>width -             //  viewport 的宽度 （范围从200 到10,000，默认为980 像素）height -            //  viewport 的高度 （范围从223 到10,000）initial-scale -     //  初始的缩放比例 （范围从&gt;0 到10）minimum-scale -    //   允许用户缩放到的最小比例maximum-scale -    //   允许用户缩放到的最大比例user-scalable -    //   用户是否可以手动缩 (no,yes)</code></pre><p>那么到底这些设置如何让Safari 知道？其实很简单，就一个meta，形如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;   //编码</span><br><span class="line">&lt;meta id=&quot;viewport&quot; name=&quot;viewport&quot; content=&quot;width=320; initial-scale=1.0;maximum-scale=1.0; user-scalable=no;&quot;/&gt;</span><br><span class="line">&lt;meta name=”apple-mobile-web-app-capable” content=”yes” /&gt;  // 离线应用的另一个技巧    </span><br><span class="line">&lt;meta name=”apple-mobile-web-app-status-bar-style” content=black” /&gt;  // 隐藏状态栏       </span><br><span class="line">&lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot; /&gt; //指定的iphone中safari顶端的状态条的样式       </span><br><span class="line">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;       //告诉设备忽略将页面中的数字识别为电话号码     </span><br><span class="line">&lt;meta name=&quot;Author&quot; contect=&quot;Mr.He&quot;/ &gt;</span><br></pre></td></tr></table></figure></p><p>在设置了<code>initial-scale=1</code> 之后，我们终于可以以1:1 的比例进行页面设计了。关于viewport，还有一个很重要的概念是：iphone 的safari 浏览器完全没有滚动条，而且不是简单的“隐藏滚动条”，是根本没有这个功能。iphone 的safari 浏览器实际上从一开始就完整显示了这个网页，然后用viewport 查看其中的一部分。当你用手指拖动时，其实拖的不是页面，而是viewport。浏览器行为的改变不止是滚动条，交互事件也跟普通桌面不一样。<br>(请参考：指尖的下JS 系列文章)</p><h2 id="2-link"><a href="#2-link" class="headerlink" title="2. link:"></a>2. link:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=”apple-touch-startup-image” href=”startup.png” /&gt; // 设置开始页面图片</span><br><span class="line">&lt;link rel=”apple-touch-icon” href=”iphon_tetris_icon.png”/&gt; // 在设置书签的时候可以显示好看的图标</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:portrait)&quot; href=&quot;portrait.css&quot;&gt;    // 肖像模式样式      </span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:landscape)&quot; href=&quot;landscape.css&quot;   // 风景模式样式</span><br><span class="line">//竖屏时使用的样式</span><br><span class="line">&lt;style media=&quot;all and (orientation:portrait)&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">#landscape &#123; display: none; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">//横屏时使用的样式</span><br><span class="line">&lt;style media=&quot;all and (orientation:landscape)&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">#portrait &#123; display: none; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-事件-："><a href="#3-事件-：" class="headerlink" title="3. 事件 ："></a>3. 事件 ：</h2><p> (请参考：指尖的下JS 系列文章)<br>    // 手势事件<br>    touchstart            //当手指接触屏幕时触发<br>    touchmove           //当已经接触屏幕的手指开始移动后触发<br>    touchend             //当手指离开屏幕时触发<br>    touchcancel    // 触摸事件<br>    gesturestart          //当两个手指接触屏幕时触发<br>    gesturechange      //当两个手指接触屏幕后开始移动时触发<br>    gestureend    // 屏幕旋转事件<br>    onorientationchange        // 检测触摸屏幕的手指何时改变方向<br>    orientationchange          // touch事件支持的相关属性<br>    touches<br>    targetTouches<br>    changedTouches<br>    clientX　　　　// X coordinate of touch relative to the viewport (excludes scroll offset)<br>    clientY　　　　// Y coordinate of touch relative to the viewport (excludes scroll offset)<br>    screenX　　　 // Relative to the screen<br>    screenY 　　  // Relative to the screen<br>    pageX　　 　　// Relative to the full page (includes scrolling)<br>    pageY　　　　 // Relative to the full page (includes scrolling)<br>    target　　　　 // Node the touch event originated from<br>    identifier　　   // An identifying number, unique to each touch event</p><h2 id="4-屏幕旋转事件：onorientationchange"><a href="#4-屏幕旋转事件：onorientationchange" class="headerlink" title="4. 屏幕旋转事件：onorientationchange"></a>4. 屏幕旋转事件：onorientationchange</h2><p>添加屏幕旋转事件侦听，可随时发现屏幕旋转状态（左旋、右旋还是没旋）。例子：<br>// 判断屏幕是否旋转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function orientationChange() &#123;</span><br><span class="line">    switch(window.orientation) &#123;</span><br><span class="line">    　　case 0: </span><br><span class="line">            alert(&quot;肖像模式 0,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">    　　case -90: </span><br><span class="line">            alert(&quot;左旋 -90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">    　　case 90:   </span><br><span class="line">            alert(&quot;右旋 90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">    　　case 180:   </span><br><span class="line">        　　alert(&quot;风景模式 180,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">        　　break;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>// 添加事件监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&apos;load&apos;, function()&#123;</span><br><span class="line">    orientationChange();</span><br><span class="line">    window.onorientationchange = orientationChange;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="5-隐藏地址栏-amp-处理事件的时候，防止滚动条出现："><a href="#5-隐藏地址栏-amp-处理事件的时候，防止滚动条出现：" class="headerlink" title="5. 隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现："></a>5. 隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&apos;load&apos;, function()&#123;</span><br><span class="line">        setTimeout(function()&#123; window.scrollTo(0, 1); &#125;, 100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-双手指滑动事件："><a href="#6-双手指滑动事件：" class="headerlink" title="6. 双手指滑动事件："></a>6. 双手指滑动事件：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&apos;load&apos;,　　function()&#123; window.onmousewheel = twoFingerScroll;&#125;,</span><br><span class="line">     false   // 兼容各浏览器，表示在冒泡阶段调用事件处理程序 (true 捕获阶段)</span><br><span class="line">);</span><br><span class="line">function twoFingerScroll(ev) &#123;</span><br><span class="line">    var delta =ev.wheelDelta/120;              //对 delta 值进行判断(比如正负) ，而后执行相应操作</span><br><span class="line">    return true;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-判断是否为iPhone："><a href="#7-判断是否为iPhone：" class="headerlink" title="7. 判断是否为iPhone："></a>7. 判断是否为iPhone：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isAppleMobile() &#123;</span><br><span class="line">    return (navigator.platform.indexOf(&apos;iPad&apos;) != -1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-localStorage"><a href="#8-localStorage" class="headerlink" title="8. localStorage:"></a>8. localStorage:</h2><p>例子 ：（注意数据名称  n  要用引号引起来）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var v = localStorage.getItem(&apos;n&apos;) ? localStorage.getItem(&apos;n&apos;) : &quot;&quot;;   // 如果名称是  n 的数据存在 ，则将其读出 ，赋予变量  v  。</span><br><span class="line">localStorage.setItem(&apos;n&apos;, v);                                           // 写入名称为 n、值为  v  的数据</span><br><span class="line">localStorage.removeItem(&apos;n&apos;);                                           // 删除名称为  n  的数据</span><br></pre></td></tr></table></figure></p><h2 id="9-使用特殊链接："><a href="#9-使用特殊链接：" class="headerlink" title="9. 使用特殊链接："></a>9. 使用特殊链接：</h2><p>如果你关闭自动识别后 ，又希望某些电话号码能够链接到 iPhone 的拨号功能 ，那么可以通过这样来声明电话链接 ,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;tel:12345654321&quot;&gt;打电话给我&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;sms:12345654321&quot;&gt;发短信&lt;/a&gt;</span><br><span class="line">或用于单元格：</span><br><span class="line">&lt;td onclick=&quot;location.href=&apos;tel:122&apos;&quot;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="10-自动大写与自动修正"><a href="#10-自动大写与自动修正" class="headerlink" title="10. 自动大写与自动修正"></a>10. 自动大写与自动修正</h2><p>要关闭这两项功能，可以通过<code>autocapitalize</code> 与<code>autocorrect</code> 这两个选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h2 id="11-WebKit-CSS"><a href="#11-WebKit-CSS" class="headerlink" title="11. WebKit CSS:"></a>11. WebKit CSS:</h2><p>①“盒模型”的具体描述性质的包围盒块内容，包括边界，填充等等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-webkit-border-bottom-left-radius: radius;</span><br><span class="line">-webkit-border-top-left-radius: horizontal_radius vertical_radius;</span><br><span class="line">-webkit-border-radius: radius;      //容器圆角</span><br><span class="line">-webkit-box-sizing: sizing_model; 边框常量值：border-box/content-box</span><br><span class="line">-webkit-box-shadow: hoff voff blur color; //容器阴影（参数分别为：水平X 方向偏移量；垂直Y 方向偏移量；高斯模糊半径值；阴影颜色值）</span><br><span class="line">-webkit-margin-bottom-collapse: collapse_behavior; 常量值：collapse/discard/separate</span><br><span class="line">-webkit-margin-start: width;</span><br><span class="line">-webkit-padding-start: width;</span><br><span class="line">-webkit-border-image: url(borderimg.gif) 25 25 25 25 round/stretch round/stretch;</span><br><span class="line">-webkit-appearance: push-button;   //内置的CSS 表现，暂时只支持push-button</span><br></pre></td></tr></table></figure></p><p>②“视觉格式化模型”描述性质，确定了位置和大小的块元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">direction: rtl</span><br><span class="line">unicode-bidi: bidi-override; 常量：bidi-override/embed/normal</span><br></pre></td></tr></table></figure></p><p>③“视觉效果”描述属性，调整的视觉效果块内容，包括溢出行为，调整行为，能见度，动画，变换，和过渡。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">clip: rect(10px, 5px, 10px, 5px)</span><br><span class="line">resize: auto; 常量：auto/both/horizontal/none/vertical</span><br><span class="line">visibility: visible; 常量: collapse/hidden/visible</span><br><span class="line">-webkit-transition: opacity 1s linear; 动画效果 ease/linear/ease-in/ease-out/ease-in-out</span><br><span class="line">-webkit-backface-visibility: visibler; 常量：visible(默认值)/hidden</span><br><span class="line">-webkit-box-reflect: right 1px; 镜向反转</span><br><span class="line">-webkit-box-reflect: below 4px -webkit-gradient(linear, left top, left bottom,</span><br><span class="line">from(transparent), color-stop(0.5, transparent), to(white));</span><br><span class="line">-webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,1)), to(rgba(0,0,0,0)));;   //CSS 遮罩/蒙板效果</span><br><span class="line">-webkit-mask-attachment: fixed; 常量：fixed/scroll</span><br><span class="line">-webkit-perspective: value; 常量：none(默认)</span><br><span class="line">-webkit-perspective-origin: left top;</span><br><span class="line">-webkit-transform: rotate(5deg);</span><br><span class="line">-webkit-transform-style: preserve-3d; 常量：flat/preserve-3d; (2D 与3D)</span><br></pre></td></tr></table></figure></p><p>④“生成的内容，自动编号，并列出”描述属性，允许您更改内容的一个组成部分，创建自动编号的章节和标题，和操纵的风格清单的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">content: “Item” counter(section) ” “;</span><br><span class="line">This resets the counter.</span><br><span class="line">First section</span><br><span class="line">&gt;two section</span><br><span class="line">three section</span><br><span class="line">counter-increment: section 1;</span><br><span class="line">counter-reset: section;</span><br></pre></td></tr></table></figure></p><p>⑤“分页媒体”描述性能与外观的属性，控制印刷版本的网页，如分页符的行为。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page-break-after: auto; 常量：always/auto/avoid/left/right</span><br><span class="line">page-break-before: auto; 常量：always/auto/avoid/left/right</span><br><span class="line">page-break-inside: auto; 常量：auto/avoid</span><br></pre></td></tr></table></figure></p><p>⑥“颜色和背景”描述属性控制背景下的块级元素和颜色的文本内容的组成部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-webkit-background-clip: content; 常量：border/content/padding/text</span><br><span class="line">-webkit-background-origin: padding; 常量：border/content/padding/text</span><br><span class="line">-webkit-background-size: 55px; 常量：length/length_x/length_y</span><br></pre></td></tr></table></figure></p><p>⑦ “字型”的具体描述性质的文字字体的选择范围内的一个因素。报告还描述属性用于下载字体定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unicode-range: U+00-FF, U+980-9FF;</span><br></pre></td></tr></table></figure></p><p>⑧“文本”描述属性的特定文字样式，间距和自动滚屏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">text-shadow: #00FFFC 10px 10px 5px;</span><br><span class="line">text-transform: capitalize; 常量：capitalize/lowercase/none/uppercase</span><br><span class="line">word-wrap: break-word; 常量：break-word/normal</span><br><span class="line">-webkit-marquee: right large infinite normal 10s; 常量：direction(方向) increment(迭代次数) repetition(重复) style(样式) speed(速度);</span><br><span class="line">-webkit-marquee-direction: ahead/auto/backwards/down/forwards/left/reverse/right/up</span><br><span class="line">-webkit-marquee-incrementt: 1-n/infinite(无穷次)</span><br><span class="line">-webkit-marquee-speed: fast/normal/slow</span><br><span class="line">-webkit-marquee-style: alternate/none/scroll/slide</span><br><span class="line">-webkit-text-fill-color: #ff6600; 常量：capitalize, lowercase, none, uppercase</span><br><span class="line">-webkit-text-security: circle; 常量：circle/disc/none/square</span><br><span class="line">-webkit-text-size-adjust: none; 常量:auto/none;</span><br><span class="line">-webkit-text-stroke: 15px #fff;</span><br><span class="line">-webkit-line-break: after-white-space; 常量：normal/after-white-space</span><br><span class="line">-webkit-appearance: caps-lock-indicator;</span><br><span class="line">-webkit-nbsp-mode: space; 常量： normal/space</span><br><span class="line">-webkit-rtl-ordering: logical; 常量：visual/logical</span><br><span class="line">-webkit-user-drag: element; 常量：element/auto/none</span><br><span class="line">-webkit-user-modify: read- only; 常量：read-write-plaintext-only/read-write/read-only</span><br><span class="line">-webkit-user-select: text; 常量：text/auto/none</span><br></pre></td></tr></table></figure></p><p>⑨“表格”描述的布局和设计性能表的具体内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-webkit-border-horizontal-spacing: 2px;</span><br><span class="line">-webkit-border-vertical-spacing: 2px;</span><br><span class="line">-webkit-column-break-after: right; 常量：always/auto/avoid/left/right</span><br><span class="line">-webkit-column-break-before: right; 常量：always/auto/avoid/left/right</span><br><span class="line">–webkit-column-break-inside: logical; 常量：avoid/auto</span><br><span class="line">-webkit-column-count: 3; //分栏</span><br><span class="line">-webkit-column-rule: 1px solid #fff;</span><br><span class="line">style:dashed,dotted,double,groove,hidden,inset,none,outset,ridge,solid</span><br></pre></td></tr></table></figure></p><p>⑩“用户界面”描述属性，涉及到用户界面元素在浏览器中，如滚动文字区，滚动条，等等。报告还描述属性，范围以外的网页内容，如光标的标注样式和显示当您按住触摸触摸<br>目标，如在iPhone上的链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-webkit-box-align: baseline,center,end,start,stretch 常量：baseline/center/end/start/stretch</span><br><span class="line">-webkit-box-direction: normal;常量：normal/reverse</span><br><span class="line">-webkit-box-flex: flex_valuet</span><br><span class="line">-webkit-box-flex-group: group_number</span><br><span class="line">-webkit-box-lines: multiple; 常量：multiple/single</span><br><span class="line">-webkit-box-ordinal-group: group_number</span><br><span class="line">-webkit-box-orient: block-axis; 常量：block-axis/horizontal/inline-axis/vertical/orientation</span><br><span class="line">–webkit-box-pack: alignment; 常量：center/end/justify/start</span><br></pre></td></tr></table></figure></p><h2 id="12-动画过渡"><a href="#12-动画过渡" class="headerlink" title="12. 动画过渡"></a>12. 动画过渡</h2><p>这是 Webkit 中最具创新力的特性：使用过渡函数定义动画。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-webkit-animation: title infinite ease-in-out 3s;</span><br><span class="line">animation 有这几个属性：</span><br><span class="line">-webkit-animation-name： //属性名，就是我们定义的keyframes</span><br><span class="line">-webkit-animation-duration：3s //持续时间</span><br><span class="line">-webkit-animation-timing-function： //过渡类型：ease/ linear(线性) /ease-in(慢到快)/ease-out(快到慢) /ease-in-out(慢到快再到慢) /cubic-bezier</span><br><span class="line">-webkit-animation-delay：10ms //动画延迟(默认0)</span><br><span class="line">-webkit-animation-iteration-count： //循环次数(默认1)，infinite 为无限</span><br><span class="line">-webkit-animation-direction： //动画方式：normal(默认 正向播放)； alternate(交替方向，第偶数次正向播放，第奇数次反向播放)</span><br></pre></td></tr></table></figure></p><p>这些同样是可以简写的。但真正让我觉的很爽的是keyframes，它能定义一个动画的转变过程供调用，过程为0%到100%或from(0%)到to(100%)。简单点说，只要你有想法，你想让元素在这个过程中以什么样的方式改变都是很简单的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-webkit-transform: 类型（缩放scale/旋转rotate/倾斜skew/位移translate）</span><br><span class="line">scale(num,num) 放大倍率。scaleX 和 scaleY(3)，可以简写为：scale(* , *)</span><br><span class="line">rotate(*deg) 转动角度。rotateX 和 rotateY，可以简写为：rotate(* , *)</span><br><span class="line">Skew(*deg) 倾斜角度。skewX 和skewY，可简写为：skew(* , *)</span><br><span class="line">translate(*,*) 坐标移动。translateX 和translateY，可简写为：translate(* , *)。</span><br></pre></td></tr></table></figure></p><p>实现模拟弹出消息框（Alert）的例子：<br>①定义过渡（在<code>&lt;style type=&quot;text/css&quot;&gt;</code>段中描述keyframes）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@-webkit-keyframes DivZoom</span><br><span class="line">&#123;</span><br><span class="line">0% &#123; -webkit-transform: scale(0.01) &#125;</span><br><span class="line">60% &#123; -webkit-transform: scale(1.05) &#125;</span><br><span class="line">80% &#123; -webkit-transform: scale(0.95) &#125;</span><br><span class="line">100% &#123; -webkit-transform: scale(1.00) &#125;</span><br><span class="line">&#125;</span><br><span class="line">.sZoom &#123; -webkit-animation: DivZoom 0.5s ease-in-out &#125;</span><br></pre></td></tr></table></figure></p><p>(很容易看懂，将元素从缩小的0.01 倍–很小但不能为0 倍，放大到1.05 倍，再缩小到0.95倍，最后到1倍即正常大小。整个过渡过程事件为0.5 秒，动画方式为ease-in-out，即慢到快再到慢，默认只进行1次过渡。这正是大家经常看到的 iPhone 弹出的提示信息的动画效果！）<br>②定义元素（在<code>&lt;body&gt;</code>段中）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;layerH&quot; style=&quot;-webkit-border-radius:12px; border:2px solid #FFF;-webkit-box-shadow: 0px 2px 4px #888;position: absolute; left: 24px; top: 106px;&lt;br&gt;width: 256px; height: 268px; padding-left: 8px; padding-right: 8px;color: #FFFFFF; text-shadow: 1px 1px 1px #000; text-align: center;background-color: RGBA(32,48,96,0.9);</span><br><span class="line">background-image:url(&apos;BG-Msg.png&apos;); background-repeat:no-repeat;</span><br><span class="line">z-index: 1; visibility: hidden; &quot;&gt;</span><br><span class="line">&lt;p&gt;&lt;span style=&quot;font-size: 16pt; font-weight: bold&quot;&gt;使用说明&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">&lt;hr noshade size=&quot;1&quot;&gt;</span><br><span class="line">&lt;div id=&quot;HelpText&quot; style=&quot;height: 120px&quot;&gt;说明文字&lt;/div&gt;</span><br><span class="line">&lt;hr noshade size=&quot;1&quot;&gt;</span><br><span class="line">&lt;form name=&quot;formV&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;确认&quot; name=&quot;B1&quot;</span><br><span class="line">style=&quot;width: 100%; height: 40px; font-size: 14pt; ont-weight: bold;</span><br><span class="line">color: #FFFFFF; text-shadow: 0px -1px 1px #000;&quot;</span><br><span class="line">onclick=&quot; layerH.style.visibility=&apos;hidden&apos;&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>③启动动画（在 javascript 定义的函数中）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function pHelp()</span><br><span class="line">&#123;</span><br><span class="line">layerH.style.visibility = &apos;visible&apos;</span><br><span class="line">layerH.style.cssText = &quot;-webkit-animation-delay: &quot; + Math.random() + &quot;ms&quot;</span><br><span class="line">layerH.className = &apos;sZoom&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(这个启动函数就很好理解了。但是为什么要使用-webkit-animation-delay 这句呢？因为当一个元素过渡显示完成后，若其样式没有变化，下一次将无法进行过渡动画显示。我们巧妙的利用其动画延迟时间定义，使其有所变化，就避免了上述问题。其中使用随机数函数Math.random()，产生一个大于0 小于1 的随机数。当然，延迟零点几毫秒，用户是不会察觉的。)</p><p>补充：</p><p>1.锁定 viewport<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ontouchmove=&quot;event.preventDefault()&quot; //锁定viewport，任何屏幕操作不移动用户界面（弹出键盘除外）。</span><br></pre></td></tr></table></figure></p><p>2.被点击元素的外观变化，可以使用样式来设定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-tap-highlight-color: 颜色</span><br></pre></td></tr></table></figure></p><p>3.侦测iPhone/iPod<br>开发特定设备的移动网站，首先要做的就是设备侦测了。下面是使用Javascript侦测iPhone/iPod的UA，然后转向到专属的URL。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))) &#123;</span><br><span class="line">　　if (document.cookie.indexOf(&quot;iphone_redirect=false&quot;) == -1) &#123;</span><br><span class="line">　　　　window.location = &quot;http://m.example.com&quot;;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>虽然Javascript是可以在水果设备上运行的，但是用户还是可以禁用。它也会造成客户端刷新和额外的数据传输，所以下面是服务器端侦测和转向：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(strstr($_SERVER[&apos;HTTP_USER_AGENT&apos;],&apos;iPhone&apos;) || strstr($_SERVER[&apos;HTTP_USER_AGENT&apos;],&apos;iPod&apos;)) &#123;</span><br><span class="line">　　header(&apos;Location: http://yoursite.com/iphone&apos;);</span><br><span class="line">　　exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.阻止旋转屏幕时自动调整字体大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;-webkit-text-size-adjust:none;&#125;</span><br></pre></td></tr></table></figure></p><p>5.iPhone才识别的CSS<br>如果不想设备侦测，可以用CSS媒体查询来专为iPhone/iPod定义样式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-device-width: 480px) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>6.缩小图片<br>网站的大图通常宽度都超过480像素，如果用前面的代码限制了缩放，这些图片在iPhone版显示显然会超过屏幕。好在iPhone机能还够，我们可以用CSS让iPhone自动将大图片缩小显示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-device-width: 480px)&#123;</span><br><span class="line">　　img&#123;max-width:100%;height:auto;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7.模拟:hover伪类<br>因为iPhone并没有鼠标指针，所以没有hover事件。那么CSS :hover伪类就没用了。但是iPhone有Touch事件，onTouchStart 类似 onMouseOver，onTouchEnd 类似 onMouseOut。所以我们可以用它来模拟hover。使用Javascript：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var myLinks = document.getElementsByTagName(&apos;a&apos;);</span><br><span class="line">for(var i = 0; i &lt; myLinks.length; i++)&#123;</span><br><span class="line">　　myLinks[i].addEventListener(’touchstart’, function()&#123;this.className = “hover”;&#125;, false);</span><br><span class="line">　　myLinks[i].addEventListener(’touchend’, function()&#123;this.className = “”;&#125;, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后用CSS增加hover效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:hover, a.hover &#123; /* 你的hover效果 */ &#125;</span><br></pre></td></tr></table></figure></p><p>这样设计一个链接，感觉可以更像按钮。并且，这个模拟可以用在任何元素上。</p><h1 id="web-app-开发中垒砖"><a href="#web-app-开发中垒砖" class="headerlink" title="web app 开发中垒砖"></a>web app 开发中垒砖</h1><p>当然，因为这些高端智能手机（Iphone、Android）的内置浏览器都是基于webkit内核的，所以在开发WEBAPP时，多数都是使 用 HTML5和CSS3技术做UI布局。当使用HTML5和CSS3l做UI时，若还是遵循着一般web开发中使用HTML4和CSS2那样的开发方式 的 话，这也就失去了WEBAPP的本质意义了，且有些效果也无法实现的，所以在此又回到了我们的主题–webapp的布局方式和技术。</p><p>在此所说的移动平台前端开发是指针对高端智能手机（如Iphone、Android）做站点适配也就是WebApp，并非是针对普通手机开 发 Wap 2.0，所以在阅读本篇文章以前，你需要对webkit内核的浏览器有一定的了解，你需要对HTML5和CSS3有一定的了解。</p><h2 id="1-webkit内核的私有的meta标签"><a href="#1-webkit内核的私有的meta标签" class="headerlink" title="1.webkit内核的私有的meta标签"></a>1.webkit内核的私有的meta标签</h2><p>首先我们来看看webkit内核中的一些私有的meta标签，这些meta标签在开发webapp时起到非常重要的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=”width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;” name=”viewport” /&gt;</span><br><span class="line">&lt;meta content=”yes” name=”apple-mobile-web-app-capable” /&gt;</span><br><span class="line">&lt;meta content=”black” name=”apple-mobile-web-app-status-bar-style” /&gt;</span><br><span class="line">&lt;meta content=”telephone=no” name=”format-detection” /&gt;</span><br></pre></td></tr></table></figure><pre><code>第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览；第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式；第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码。</code></pre><h2 id="2-HTML5标签的使用"><a href="#2-HTML5标签的使用" class="headerlink" title="2.HTML5标签的使用"></a>2.HTML5标签的使用</h2><p>在 开始编写webapp时，哥建议前端工程师使用HTML5，而放弃HTML4，因为HTML5可以实现一些HTML4中无法实现的丰富的WEB应用程 序 的体验，可以减少开发者很多的工作量，当然了你决定使用HTML5前，一定要对此非常熟悉，要知道HTML5的新标签的作用。比如定义一块内容或文章 区域 可使用section标签，定义导航条或选项卡可以直接使用nav标签等等。</p><h2 id="3-放弃CSS-float属性"><a href="#3-放弃CSS-float属性" class="headerlink" title="3.放弃CSS float属性"></a>3.放弃CSS float属性</h2><p>在项目开发过程中可以会遇到内容排列排列显示的布局(见下图)，假如你遇见这样的视觉稿，哥建议你放弃float，可以直接使用display:block;</p><h2 id="4-利用CSS3边框背景属性"><a href="#4-利用CSS3边框背景属性" class="headerlink" title="4.利用CSS3边框背景属性"></a>4.利用CSS3边框背景属性</h2><p>这 个按钮有圆角效果，有内发光效果还有高光效果，这样的按钮使用CSS3写是无法写出来的，当然圆角可以使用CSS3来写，但高光和内发光却无法使 用 CSS3编写，这个时候你不妨使用-webkit-border-image来定义这个按钮的样式。-webkit-border-image就个很 复杂 的样式属性。</p><h2 id="5-块级化a标签"><a href="#5-块级化a标签" class="headerlink" title="5.块级化a标签"></a>5.块级化a标签</h2><p>请保证将每条数据都放在一个a标签中，为何这样做？因为在触控手机上，为提升用户体验，尽可能的保证用户的可点击区域较大。</p><h2 id="6-自适应布局模式"><a href="#6-自适应布局模式" class="headerlink" title="6.自适应布局模式"></a>6.自适应布局模式</h2><p>在 编写CSS时，我不建议前端工程师把容器（不管是外层容器还是内层）的宽度定死。为达到适配各种手持设备，我建议前端工程师使用自适应布局模式（支付 宝 采用了自适应布局模式），因为这样做可以让你的页面在ipad、itouch、ipod、iphone、android、 web safarik、 chrome都能够正常的显示，你无需再次考虑设备的分辨率。</p><h2 id="7-学会使用webkit-box"><a href="#7-学会使用webkit-box" class="headerlink" title="7.学会使用webkit-box"></a>7.学会使用webkit-box</h2><p>上一节，我们说过自适应布局模式，有些同学可能会问：如何在移动设备上做到完全自适应呢？很感谢webkit为display属性提供了一个webkit-box的值，它可以帮助前端工程师做到盒子模型灵活控制。</p><h2 id="8-如何去除Android平台中对邮箱地址的识别"><a href="#8-如何去除Android平台中对邮箱地址的识别" class="headerlink" title="8.如何去除Android平台中对邮箱地址的识别"></a>8.如何去除Android平台中对邮箱地址的识别</h2><p>看 过iOS webapp API的同学都知道iOS提供了一个meta标签:用于禁用iOS对页面中电话号码的自动识别。在iOS中是不自动识别邮件 地 址的，但在Android平台，它会自动检测邮件地址，当用户touch到这个邮件地址时，Android会弹出一个框提示用户发送邮件，如果你不 想 Android自动识别页面中的邮件地址，你不妨加上这样一句meta标签在head 中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=”email=no” name=”format-detection” /&gt;</span><br></pre></td></tr></table></figure></p><h2 id="9-如何去除iOS和Android中的输入URL的控件条"><a href="#9-如何去除iOS和Android中的输入URL的控件条" class="headerlink" title="9.如何去除iOS和Android中的输入URL的控件条"></a>9.如何去除iOS和Android中的输入URL的控件条</h2><p>你的老板或者PD或者交互设计师可能会要求你：能否让我们的webapp更加像nativeapp，我不想让用户看见那个输入url的控件条？</p><p>答案是可以做到的。我们可以利用一句简单的javascript代码来实现这个效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(scrollTo,0,0,0);</span><br></pre></td></tr></table></figure><p>请注意，这句代码必须放在<code>window.onload</code>里才能够正常的工作，而且你的当前文档的内容高度必须是高于窗口的高度时，这句代码才能有效的执行。</p><h2 id="10-如何禁止用户旋转设备"><a href="#10-如何禁止用户旋转设备" class="headerlink" title="10.如何禁止用户旋转设备"></a>10.如何禁止用户旋转设备</h2><p>我曾经也想禁止用户旋转设备，也想实现像某些客户端那样：只能在肖像模式或景观模式下才能正常运行。但现在我可以很负责任的告诉你：别想了!在移动版的webkit中做不到！</p><p>至 少Apple webapp API已经说到了：我们为了让用户在safari中正常的浏览网页，我们必须保证用户的设备处于任何一个方 位 时，safari都能够正常的显示网页内容（也就是自适应），所以我们禁止开发者阻止浏览器的<code>orientationchange</code>事件，看来苹果公司 的出 发点是正确的，苹果确实不是一般的苹果。</p><p>iOS已经禁止开发者阻止<code>orientationchange</code>事件，那Android呢？对不起，我没有找到任何资料说Android禁止开发者阻止浏览器<code>orientationchange</code>事件，但是在Android平台，确实也是阻止不了的。</p><h2 id="11-如何检测用户是通过主屏启动你的webapp"><a href="#11-如何检测用户是通过主屏启动你的webapp" class="headerlink" title="11.如何检测用户是通过主屏启动你的webapp"></a>11.如何检测用户是通过主屏启动你的webapp</h2><p>看过Apple webapp API的同学都知道iOS为safari提供了一个将当前页面添加主屏的功能，按下 iphoneipodipod touch底部工具中的小加号，或者ipad顶部左侧的小加号，就可以将当前的页面添加到设备的主屏，在设备的主屏会 自动 增加一个当前页面的启动图标，点击该启动图标就可以快速、便捷的启动你的webapp。从主屏启动的webapp和浏览器访问你的webapp最大 的区别 是它清除了浏览器上方和下方的工具条，这样你的webapp就更加像是nativeapp了，还有一个区别是window对像中的 <code>navigator</code>子对 象的一个<code>standalone</code>属性。iOS中浏览器直接访问站点时，<code>navigator.standalone</code>为<code>false</code>,从 主屏启动webapp 时，<code>navigator.standalone</code>为<code>true</code>， 我们可以通过<code>navigator.standalone</code>这个属性获知 用户当前是否是从主屏访 问我们的webapp的。在Android中从来没有添加到主屏这回事！</p><h2 id="12-如何关闭iOS中键盘自动大写"><a href="#12-如何关闭iOS中键盘自动大写" class="headerlink" title="12.如何关闭iOS中键盘自动大写"></a>12.如何关闭iOS中键盘自动大写</h2><p>我 们知道在iOS中，当虚拟键盘弹出时，默认情况下键盘是开启首字母大写的功能的，根据某些业务场景，可能我们需要关闭这个功能，移动版本webkit 为 input元素提供了<code>autocapitalize</code>属性，通过指定<code>autocapitalize=&quot;off&quot;</code>来关闭键盘默认首字母大写。</p><h2 id="13-iOS中如何彻底禁止用户在新窗口打开页面"><a href="#13-iOS中如何彻底禁止用户在新窗口打开页面" class="headerlink" title="13.iOS中如何彻底禁止用户在新窗口打开页面"></a>13.iOS中如何彻底禁止用户在新窗口打开页面</h2><p>有 时我们可能需要禁止用户在新窗口打开页面，我们可以使用a标签的<code>target=&quot;_self&quot;</code>来指定用户在新窗口打开，或者target属性保持空， 但 是你会发现iOS的用户在这个链接的上方长按3秒钟后，iOS会弹出一个列表按钮，用户通过这些按钮仍然可以在新窗口打开页面，这样的话，开发者指定 的 target属性就失效了，但是可以通过指定当前元素的<code>-webkit-touch-callout</code>样式属性为none来禁止iOS弹出这些按钮。这 个技 巧仅适用iOS对于Android平台则无效。</p><h2 id="14-iOS中如何禁止用户保存图片、复制图片"><a href="#14-iOS中如何禁止用户保存图片、复制图片" class="headerlink" title="14.iOS中如何禁止用户保存图片、复制图片"></a>14.iOS中如何禁止用户保存图片、复制图片</h2><p>我们在第13条技巧中提到元素的<code>-webkit-touch-callout</code>属性，同样为一个<code>img</code>标签指定<code>-webkit-touch-callout为none</code>也会禁止设备弹出列表按钮，这样用户就无法保存/复制你的图片了。</p><h2 id="15-iOS中如何禁止用户选中文字"><a href="#15-iOS中如何禁止用户选中文字" class="headerlink" title="15.iOS中如何禁止用户选中文字"></a>15.iOS中如何禁止用户选中文字</h2><p>我们通过指定文字标签的<code>-webkit-user-select</code>属性为<code>none</code>便可以禁止iOS用户选中文字。</p><h2 id="16-iOS中如何获取滚动条的值"><a href="#16-iOS中如何获取滚动条的值" class="headerlink" title="16.iOS中如何获取滚动条的值"></a>16.iOS中如何获取滚动条的值</h2><p>桌 面浏览器中想要获取滚动条的值是通过<code>document.scrollTop</code>和<code>document.scrollLeft</code>得到的，但在iOS中你会发现这 两 个属性是未定义的，为什么呢？因为在iOS中没有滚动条的概念，在Android中通过这两个属性可以正常获取到滚动条的值，那么在iOS中我们该如 何获 取滚动条的值呢？</p><p>通过<code>window.scrollY</code>和<code>window.scrollX</code>我们可以得到当前窗口的y轴和x轴滚动条的值。</p><h2 id="17-如何解决盒子边框溢出"><a href="#17-如何解决盒子边框溢出" class="headerlink" title="17.如何解决盒子边框溢出"></a>17.如何解决盒子边框溢出</h2><p>当 你指定了一个块级元素时，并且为其定义了边框，设置了其宽度为100％。在移动设备开发过程中我们通常会对文本框定义为宽度100％，将其定义为块级 元 素以实现全屏自适应的样式，但此时你会发现，该元素的边框(左右)各1个像素会溢了文档，导致出现横向滚动条，为解决这一问题，我们可以为其添加一个 特殊 的样式<code>-webkit-box-sizing:border-box;</code>用来指定该盒子的大小包括边框的宽度。</p><h2 id="18-如何解决Android-2-0以下平台中圆角的问题"><a href="#18-如何解决Android-2-0以下平台中圆角的问题" class="headerlink" title="18.如何解决Android 2.0以下平台中圆角的问题"></a>18.如何解决Android 2.0以下平台中圆角的问题</h2><p>如果大家够细心的话，在做wap站点开发时，大家应该会发现android 2.0以下的平台中问题特别的多，比如说边框圆角这个问题吧。</p><p>在对一个元素定义圆角时，为完全兼容android 2.0以下的平台，我们必须要按照以下技巧来定义边框圆角：</p><p><code>-webkit</code>这个前缀必须要加上（在iOS中，你可以不加，但android中一定要加）；<br>如果对针对边框做样式定义，比如<code>border:1px solid #000;</code>那么<code>-webkit-border-radius</code>这属性必须要出现在border属性后。<br>假如我们有这样的视觉元素，左上角和右上角是圆角时，我们必须要先定义全局的(4个角的圆角值)<code>-webkit-border- radius:5px;</code> 然后再依次的覆盖左下角和右下角，<code>-webkit-border-bottom-left-radius:0;-webkit- border- bottom-right-border:0;</code>否则在android 2.0以下的平台中将全部显示直角，还有记住！<code>-webkit</code>这个前缀一定要加上！</p><h2 id="19-如何解决android平台中页面无法自适应"><a href="#19-如何解决android平台中页面无法自适应" class="headerlink" title="19.如何解决android平台中页面无法自适应"></a>19.如何解决android平台中页面无法自适应</h2><p>虽然你的html和css都是完全自适应的，但有一天如果你发现你的页面在android中显示的并不是自适应的时候，首先请你确认你的head标签中是否包含以下meta标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=”viewport” content=”width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0;” /&gt;</span><br></pre></td></tr></table></figure></p><p>如果有的话，那请你再仔细的看清楚有没有这个属性的值<code>width=device-width</code>，如果没有请立即加上吧！</p><h2 id="20-如何解决iOS-4-3版本中safari对页面中5位数字的自动识别和自动添加样式"><a href="#20-如何解决iOS-4-3版本中safari对页面中5位数字的自动识别和自动添加样式" class="headerlink" title="20.如何解决iOS 4.3版本中safari对页面中5位数字的自动识别和自动添加样式"></a>20.如何解决iOS 4.3版本中safari对页面中5位数字的自动识别和自动添加样式</h2><p>新的iOS系统也就是4.3版本，升级后对safari造成了一个bug：即使你添加了如下的meta标签，safari仍然会对页面中的5位连续的数字进行自动识别，并且将其重新渲染样式，也就是说你的css对该标签是无效的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=”format-detection” content=”telphone=no” /&gt;</span><br></pre></td></tr></table></figure></p><p>我们可以用一个比较龌龊的办法来解决。比如说支付宝wap站点中显示金额的标签，我们都做了如下改写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class=”t-balance”style=”background:none;padding:0;border:0;”&gt;95009.00&lt;/button&gt;元</span><br></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.25xt.com/html5css3/10261.html/comment-page-1" target="_blank" rel="noopener">http://www.25xt.com/html5css3/10261.html/comment-page-1</a><br><a href="http://www.cnblogs.com/webapplee/p/3771716.html" target="_blank" rel="noopener">http://www.cnblogs.com/webapplee/p/3771716.html</a></p>]]></content>
      
      
      <categories>
          
          <category> WebApp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手记 </tag>
            
            <tag> PPT </tag>
            
            <tag> WebApp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序初印象【整理】</title>
      <link href="/article/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%8D%B0%E8%B1%A1%E3%80%90%E6%95%B4%E7%90%86%E3%80%91/"/>
      <url>/article/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%8D%B0%E8%B1%A1%E3%80%90%E6%95%B4%E7%90%86%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信小程序是什么"><a href="#微信小程序是什么" class="headerlink" title="微信小程序是什么"></a>微信小程序是什么</h1><p>『微信小程序』是微信即公众号之后推出的一项服务。</p><blockquote><p>我们提供了一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。    </p><p>—— 微信内测界面</p></blockquote><p>核心理念：</p><blockquote><p>小程序是一种不需要下载安装即可使用的应用，它实现了应用『触手可及』的梦想，用户扫一扫或搜一搜即可打开应用。也体现了『用完即走』的理念，用户不关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载。    </p><p>—— 张小龙</p></blockquote><a id="more"></a><p>另附ppt:<a href="https://sogrey.github.io/Wechat-app-ppt/index.html">github预览</a>，<a href="http://sogrey.coding.me/wechat-app-ppt" target="_blank" rel="noopener">coding预览</a></p><p><a href="https://raw.githubusercontent.com/Sogrey/Wechat-app-ppt/master/example/youdao.zip" target="_blank" rel="noopener">github下载实例demo</a>，<a href="https://coding.net/u/sogrey/p/wechat-app-ppt/git/raw/master/example/youdao.zip" target="_blank" rel="noopener">coding下载实例demo</a></p><h1 id="微信小程序优缺点"><a href="#微信小程序优缺点" class="headerlink" title="微信小程序优缺点"></a>微信小程序优缺点</h1><p>优点：</p><ol><li>比传统的 Hybird 应用在操作体验上，它具有更快、更流畅的应用体验，摆脱混合应用对浏览器性能的依赖且能够调用系统原生接口，有一定的数据缓存能力。</li><li>比 React Native 类应用，更轻量级。</li><li>比 Native App ，则胜在开发周期短、投入成本低、使用便捷，且依托微信庞大的用户基础和粘性，可以迅速引流，验证产品模式和用户需求。</li></ol><p>缺点：</p><p>因为一些安全和其它方面的考虑，小程序的能力被限制，禁锢了小程序的能力。</p><ol><li>目前限制应用包大小为 1024 kb 。</li><li>微信开放接口 API 较少。</li><li>仅限于小应用的能力，想要实现复杂应用能力上还不足。</li><li>在多层级使用场景以及需要跳转类的需求上劣势明显。</li></ol><p>具体限制：</p><ol><li>不支持 HTML。WXML 语法与 HTML 有差异，CSS 选择器不支持级联。框架并非运行在浏览器中，所以 JavaScript 在 web 中一些能力都无法使用，如 document，window 等。</li><li>源码包大小不能超过 1M，单次request 传输数据最大 1M。</li><li>MINA 实现的 TabBar 最多 5 个 tab，wx.navigateTo 可推入后台的页面最多 5 层，超过则不能打开新界面。</li><li>没有 WebView ，自带 View 暂不支持图文混排。</li><li>不支持 A 标签，无法打开普通网页。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html" target="_blank" rel="noopener">官方文档不可少</a></li><li><a href="http://www.jianshu.com/p/c9089483f761" target="_blank" rel="noopener">微信小程序分析</a></li><li><a href="http://www.jianshu.com/p/aaef5ceb3936" target="_blank" rel="noopener">微信小程序开发教程–从零开始</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手记 </tag>
            
            <tag> PPT </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Webp的探究之路</title>
      <link href="/article/Webp%E7%9A%84%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%B7%AF/"/>
      <url>/article/Webp%E7%9A%84%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developers.google.com/speed/webp/" target="_blank" rel="noopener">google官方</a>（需翻墙）</li><li><a href="https://en.wikipedia.org/wiki/WebP" target="_blank" rel="noopener">维基百科</a></li><li><a href="https://isux.tencent.com/introduction-of-webp.html" target="_blank" rel="noopener">WebP 探寻之路(腾讯)</a></li><li><a href="http://geek.csdn.net/news/detail/122393" target="_blank" rel="noopener">WebP 原理和 Android 支持现状介绍</a></li><li><a href="http://webm.greatdreamers.cn/tags/webp/" target="_blank" rel="noopener">WEBM 项目-开放的网络媒体项目</a></li><li><a href="http://www.csdn.net/tag/webp/download" target="_blank" rel="noopener">webp工具源码下载</a></li><li><a href="http://www.cnblogs.com/season-huang/p/5804884.html" target="_blank" rel="noopener">webp图片实践之路</a></li><li><a href="https://segmentfault.com/a/1190000005972143" target="_blank" rel="noopener">【译】 WebP 支持：超出你想象</a></li><li><a href="http://www.itnose.net/detail/6323858.html" target="_blank" rel="noopener">webp介绍与使用</a></li><li><a href="http://tech.qq.com/a/20140721/074637.htm" target="_blank" rel="noopener">【资讯】WebP的故事：谷歌要统一互联网图片格式</a></li><li><a href="http://slides.faso.me/2014/webp/" target="_blank" rel="noopener">faso</a></li></ul><p><a href="https://www.zhihu.com/question/27201061" target="_blank" rel="noopener">https://www.zhihu.com/question/27201061</a></p><p><a href="https://isparta.github.io/compare-webp/index.html#12345" target="_blank" rel="noopener">https://isparta.github.io/compare-webp/index.html#12345</a></p><p><a href="https://isparta.github.io/compare-webp/index_a.html#12" target="_blank" rel="noopener">https://isparta.github.io/compare-webp/index_a.html#12</a></p><p><a href="https://zhuanlan.zhihu.com/p/23648251" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/23648251</a></p><p><a href="https://tech.upyun.com/article/252/WebP%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html" target="_blank" rel="noopener">https://tech.upyun.com/article/252/WebP%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html</a></p><p><a href="http://pic.zhaoxi.net/" target="_blank" rel="noopener">http://pic.zhaoxi.net/</a></p>]]></content>
      
      
      <categories>
          
          <category> Webp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android中使用icon fonts字体图标</title>
      <link href="/article/android%E4%B8%AD%E4%BD%BF%E7%94%A8icon-fonts%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/"/>
      <url>/article/android%E4%B8%AD%E4%BD%BF%E7%94%A8icon-fonts%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>IconFont字体不仅仅流行于Web开发，在移动开发中也渐渐的使用的范围更广泛。这篇文章主要介绍了在Android开发中使用icon font的代码和方法。</p></blockquote><a id="more"></a><h1 id="1-Icon-fonts介绍"><a href="#1-Icon-fonts介绍" class="headerlink" title="1 Icon fonts介绍"></a>1 Icon fonts介绍</h1><p>对于可缩放的自适应设计来讲，Icon fonts是一种惊人的解决方案。</p><p>在开发native app时，你应该记住icon fonts技术有多项超过位图的高级特性，这些特性所带来的好处会影响你的设计工作流，以及产品的最终品质。</p><p><strong>可缩放性（Scalability）：</strong></p><p>基于字体的icon是与分辨率无关并能缩放到任何想要程度的技术。你的图标看起来毫不关心retina,HDPI,XHDPI等等屏幕，但渲染时会根据目标设备自动调整，你将有能力应对任何当下，未来，或大多数任意规格的设备</p><p><strong>尺寸（Size ）：</strong></p><p>裁剪到正确的比例，icon font的文件的大小要比起位图小到难以置信的程度，使用icon font时，你不需要根据不同设备准备不同的图片，你的APP只需要在启动时加载一次icon font文件即可。</p><p><strong>可维护性（ Maintainability ）：</strong></p><p>自你的icon打包进一个字体文件，在项目自始至终你仅需要维护这个单一的字体文件。</p><p>通过管理字体文件你可以很自然的组织你的icon集合，任意的进行修改或扩展</p><p><strong>可推广性（Adoption）：</strong></p><p>然而，应用这样的icon fonts可能会影响你和你同事之间的工作流程，但说服让他们采用这样的技术也非常简单，有数款免费或收费的工具帮你轻松达到目的并能看到很好的应用结果，在几乎任意（手机）移动平台、浏览器或操作系统</p><p><strong>灵活性（Flexibility）：</strong></p><p>应用icon fonts技术中最有意义的一项能力是可以操纵icon fonts， 改变颜色，大小，仅仅几行代码就可以在瞬间改变外观</p><p><strong>可交互性(Interactivity)：</strong></p><p>由于灵活性以及能够通过代码方便的操纵，icon fonts 是独一无二的在运行时被操纵，通过应用icon fonts技术， 你能轻松的在不同状态显示对应的不同效果，创建动画。</p><h1 id="2-Icon-fonts优缺点"><a href="#2-Icon-fonts优缺点" class="headerlink" title="2 Icon fonts优缺点"></a>2 Icon fonts优缺点</h1><p>字体图标是指将图标做成字体文件（.ttf），从而代替传统的png等图标资源。<br>使用字体图标的优点和缺点分别为：<br>优点： </p><pre><code>1. 可以高度自定义图标的样式（包括大小和颜色)，对于个人开发者尤其适用 2. 可以减少项目和安装包的大小（特别你的项目中有很多图片icon时，效果将是M级） 3. 几乎可以忽略屏幕大小和分辨率，做到更好的适配4. 使用简单 …… </code></pre><p>缺点： </p><pre><code>1. 只能是一些简单的icon，不能代替如背景图、9图等资源 2. 一些需要文字说明的icon，图片资源将会是更好的选择 3. 对设计的要求更高，不同icon可能拥有不同的边距，这时要切换icon时还要设置大小 4. 由于边距的存在可能存在无法填满控件的情况 5. 无法在Android studio中进行实时预览</code></pre><p>iconfont对于客户端应用来说有很多便捷：</p><pre><code>1. 自由变化大小2. 自由修改颜色3. 可以添加一些视觉效果如：阴影、旋转、透明度。4. 比单位的图片更节省资源</code></pre><h1 id="3-获取字体文件"><a href="#3-获取字体文件" class="headerlink" title="3 获取字体文件"></a>3 获取字体文件</h1><p>icon font字体文件来源很多，我这里列出两个（在文章尾<a href="#参考">参考#字体图标库</a>）。</p><p>这里以<a href="http://fontawesome.io/cheatsheet/" target="_blank" rel="noopener">http://fontawesome.io/cheatsheet/</a>为例，其github仓库是<a href="https://github.com/FortAwesome/Font-Awesome/" target="_blank" rel="noopener">https://github.com/FortAwesome/Font-Awesome/</a>,我们的字体文件就是从<a href="https://github.com/FortAwesome/Font-Awesome/blob/master/fonts/fontawesome-webfont.ttf" target="_blank" rel="noopener">这里获取</a>，获取到的字体文件是以<code>.ttf</code>为后缀的字体文件。</p><h1 id="4-在Android项目中使用"><a href="#4-在Android项目中使用" class="headerlink" title="4 在Android项目中使用"></a>4 在Android项目中使用</h1><h2 id="4-1-新建Android项目"><a href="#4-1-新建Android项目" class="headerlink" title="4.1 新建Android项目"></a>4.1 新建Android项目</h2><p>打开Android studio新建一个Android项目，我新建一个包名为<code>org.sogrey.iconfont.demo</code>的应用，具体新建步骤就不赘述了。另再新建一个Module包名为<code>org.sogrey.iconfont</code>的库应用，结构如下：<br><img src="https://sogrey.github.io/pics/2017-01-17_001301.jpg" alt="新建Android项目"></p><h2 id="4-2-在库应用中引入-ttf字体"><a href="#4-2-在库应用中引入-ttf字体" class="headerlink" title="4.2 在库应用中引入.ttf字体"></a>4.2 在库应用中引入<code>.ttf</code>字体</h2><p>在库应用中引入<code>.ttf</code>字体，放在<code>assets</code>文件夹下，新建java类<code>IconFontTextView</code>继承自<code>android.widget.TextView</code>,结构如下：</p><p><img src="https://sogrey.github.io/pics/2017-01-17_002541.jpg" alt="在库应用中引入`.ttf`字体"></p><p>IconFontTextView.java代码：</p><pre><code>package org.sogrey.iconfont;import android.content.Context;import android.graphics.Typeface;import android.util.AttributeSet;import android.widget.TextView;/** * 适用于fontawesome的字体TextView * Created by Sogrey on 2017/1/17. */public class IconFontTextView extends TextView {    public IconFontTextView(Context context) {        this(context,null);    }    public IconFontTextView(Context context, AttributeSet attrs) {        this(context, attrs,0);    }    public IconFontTextView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        init(context, attrs, defStyleAttr);    }    private void init(Context context, AttributeSet attrs, int defStyleAttr) {        Typeface iconfont = Typeface.createFromAsset(context.getAssets(), &quot;fontawesome-webfont.ttf&quot;);        this.setTypeface(iconfont);    }}</code></pre><h2 id="4-3-在Application中使用"><a href="#4-3-在Application中使用" class="headerlink" title="4.3 在Application中使用"></a>4.3 在Application中使用</h2><p>下面就正式来使用icon font了，在app的build.gradle中引用刚刚的IconFont库：</p><pre><code>compile project(&apos;:lib_iconfont&apos;)</code></pre><p>activity_main.xml布局中放几个<code>IconFontTextView</code>,其string属性设置为以<code>&amp;#</code>开头的字符串，以通讯录图标为例:</p><p><img src="https://sogrey.github.io/pics/2017-01-17_003852.jpg" alt="通讯录图标icon font"></p><p>前面的图标就是最终要实现的效果，<code>fa-address-book</code>用在html标签的class类属性中，而我们要用的是后面放括弧中的<code>&amp;#xf2b9;</code>。</p><p>xml布局文件：</p><pre><code>&lt;org.sogrey.iconfont.IconFontTextView    android:id=&quot;@+id/text1&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:text=&quot;&amp;#xf2b9; 通讯录&quot; /&gt;</code></pre><p>编译运行即可看到效果。</p><p><img src="https://sogrey.github.io/pics/2017-01-17_005941.jpg" alt="运行效果"></p><p>预览一下全部图标：</p><p><img src="https://sogrey.github.io/pics/2017-01-17_010816.jpg" alt="预览一下全部图标"></p><p>附：在<a href="https://icomoon.io/app" target="_blank" rel="noopener">https://icomoon.io/app</a>可定制你需要的图标打包成字体文件下载引用，具体方法可参考<a href="http://blog.csdn.net/ruihanchen/article/details/50032841" target="_blank" rel="noopener">如何在Android使用图标字体？</a>。</p><p>demo看<a href="https://github.com/Sogrey/IconFontTextView" target="_blank" rel="noopener">这里</a>，Good luck!</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>字体图标库</p><ul><li><a href="http://fontawesome.io/cheatsheet/" target="_blank" rel="noopener">http://fontawesome.io/cheatsheet/</a></li><li><a href="https://icomoon.io/app" target="_blank" rel="noopener">https://icomoon.io/app</a></li></ul><p>参考</p><ul><li><a href="http://www.tuicool.com/articles/Mn2ARv" target="_blank" rel="noopener">如何在移动端app中应用字体图标icon fonts</a></li><li><a href="http://www.jb51.net/article/94880.htm" target="_blank" rel="noopener">Android中正确使用字体图标(iconfont)的方法</a></li><li><a href="http://blog.csdn.net/ruihanchen/article/details/50032841" target="_blank" rel="noopener">如何在Android使用图标字体？</a></li><li><a href="http://www.weste.net/2013/12-13/94695.html" target="_blank" rel="noopener">在Android开发中使用icon font的代码和方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> icon font字体图标 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android混淆签名(上)</title>
      <link href="/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>代码混淆，是将计算机程序的代码转换成一种功能上等价，但是难于阅读和理解的形式的行为。代码混淆可以用于程序源代码，也可以用于程序编译而成的中间代码。执行代码混淆的程序被称作代码混淆器。目前已经存在许多种功能各异的代码混淆器。</p><p>代码混淆的主要目的是为了保护源代码，阻止反向工程。反向工程会带来许多问题，诸如知识产权泄露，程序弱点暴露易受攻击等。使用即时编译技术的语言，如Java、C#所编写的程序更容易受到反向工程的威胁。<a href="http://blog.csdn.net/hongshan50/article/details/22746703" target="_blank" rel="noopener">1</a></p><p>签名移步<a href="https://sogrey.github.io/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8B%EF%BC%89/">签名</a></p></blockquote><a id="more"></a><h1 id="1-混淆"><a href="#1-混淆" class="headerlink" title="1 混淆"></a>1 混淆</h1><h2 id="1-1-混淆介绍"><a href="#1-1-混淆介绍" class="headerlink" title="1.1 混淆介绍"></a>1.1 混淆介绍</h2><p>首先先简单说一下什么是混淆和混淆的作用，其实这个搜索下可以找到一堆官方的说法等等，这里简单口语叙述一下，混淆就是把代码替换成a、b、c基本字母组成的代码，比如一个方法名为：function()，混淆后可能会被替换成a()。</p><p>混淆的好处：</p><ul><li>代码混淆后阅读性降低，反编译后破译程序难度提高</li><li>混淆后字节数减少，减少了应用了体积</li></ul><p>前者只能说有一点作用，后者则需要看代码的数量。</p><p>当然不能忽视混淆的缺点：混淆后，测试不充分可能导致某些功能不能使用</p><h2 id="1-2-Eclipse混淆和Android-Studio混淆"><a href="#1-2-Eclipse混淆和Android-Studio混淆" class="headerlink" title="1.2 Eclipse混淆和Android Studio混淆"></a>1.2 Eclipse混淆和Android Studio混淆</h2><p><strong>Eclipse</strong></p><p>首先打开“project.properties”文件，然后在文件中添加一行：</p><pre><code>proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt</code></pre><p>文件中之前就有一行，不过是被注释掉了。</p><p>在release打包时就会按照我们的配置进行混淆，注意，在我们平时的debug时是不会进行混淆的。</p><p><strong>Android Studio</strong></p><p>在build.gradle中进行配置</p><pre><code>android {    buildTypes {        release {            minifyEnabled true //true 表示开启混淆            proguardFiles getDefaultProguardFile（&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;            //proguardFile &apos;some-other-rules.txt&apos;  配置单个文件这样        }    }}</code></pre><h2 id="1-3-混淆步骤"><a href="#1-3-混淆步骤" class="headerlink" title="1.3 混淆步骤"></a>1.3 混淆步骤</h2><ol><li>shrink： 去掉无用代码</li><li>optimize：优化代码（静态化，内联，无用参数去除等。。）</li><li>obfuscate：混淆，给类、变量、方法改名字</li><li>preverify：预效验</li></ol><h2 id="1-4-混淆规则"><a href="#1-4-混淆规则" class="headerlink" title="1.4 混淆规则"></a>1.4 混淆规则</h2><p><a href="https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html" target="_blank" rel="noopener">混淆规则文档</a></p><p><strong>优化控制</strong></p><p>这个是用于控制混淆是否开启优化代码，例如一些if/else语句可以被简化等这些操作：</p><pre><code># 不优化-dontoptimize # 代码循环优化次数，0-7，默认为5-optimizationpasses 5</code></pre><p><strong>优化进阶</strong></p><p>开启优化后可以设置下面的规则，assumenosideeffects表示指定的代码无效，可以优化，最终效果表现为不执行。    </p><pre><code># 混淆时所采用的优化规则-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*# 关闭log-assumenosideeffects class android.util.Log {    public static boolean isLoggable(java.lang.String, int);    public static int v(...);    public static int i(...);    public static int w(...);    public static int d(...);    public static int e(...);}</code></pre><p><strong>基本混淆规则</strong></p><p>下面这些一般混淆规则都要加入，其中前两个在默认文件中已经配置</p><pre><code># 包名不使用大小写混合 aA Aa-dontusemixedcaseclassnames # 不混淆第三方引用的库-dontskipnonpubliclibraryclasses # 不做预校验-dontpreverify # 忽略警告-ignorewarning</code></pre><p><strong>输出混淆记录</strong></p><p>混淆后由于阅读困难性提高，所以为了方便自己查阅，可以输出mapping对应文件，可以利用AndroidSDK\tools\proguard\bin中的proguardgui.bat打开混淆工具，利用retrace结合mapping和stacktrace调试遇到的错误</p><pre><code># 混淆后生产映射文件 map 类名-&gt;转化后类名的映射# 存放在app\build\outputs\mapping\release中-verbose # 混淆前后的映射-printmapping mapping.txt # apk 包内所有 class 的内部结构-dump class_files.txt # 未混淆的类和成员-printseeds seeds.txt # 列出从 apk 中删除的代码-printusage unused.txt</code></pre><p><strong>保留源代码行号</strong></p><p>即使使用retrace工具，还是很难定位到错误的时候，可以暂时先保留行号，观察错误修改后再关闭掉</p><pre><code># 抛出异常时保留代码行号# 这个最后release的时候关闭掉-keepattributes SourceFile,LineNumberTable</code></pre><p><strong>组件白名单”&gt;基本组件白名单</strong></p><p>Android中的基本组件不能混淆，为了方便，下面提供了兼容性比较高的规则：</p><pre><code>-keep public class * extends android.app.Fragment-keep public class * extends android.app.Activity-keep public class * extends android.app.Application-keep public class * extends android.app.Service-keep public class * extends android.content.BroadcastReceiver-keep public class * extends android.content.ContentProvider-keep public class * extends android.app.backup.BackupAgentHelper-keep public class * extends android.preference.Preference</code></pre><p><strong>Support包规则</strong></p><pre><code># 如果有引用v4包可以添加下面这行-keep public class * extends android.support.v4.app.Fragment# 如果引用了v4或者v7包-dontwarn android.support.**</code></pre><p><strong>不混淆本地方法</strong></p><p>本地方法不能混淆，这个规则在默认配置文件中有：</p><pre><code># 保持 native 方法不被混淆-keepclasseswithmembernames class * {    native &lt;methods&gt;;}</code></pre><p><strong>WebView混淆规则</strong></p><p>使用了WebView的JS功能则开启下面规则，这个规则在自定义规则文件中已经用注释说明了：</p><pre><code># WebView使用javascript功能则需要开启-keepclassmembers class fqcn.of.javascript.interface.for.webview {    public *;}</code></pre><p><strong>注解、泛型和反射混淆</strong></p><pre><code># 保护注解-keepattributes *Annotation*-keep class * extends java.lang.annotation.Annotation {*;}# 泛型与反射-keepattributes Signature-keepattributes EnclosingMethod&lt;/code&gt;</code></pre><p>有些注解可能不能被混淆，需要手动混淆一下</p><p><strong>内部类混淆</strong></p><pre><code># 不混淆内部类-keepattributes InnerClasses&lt;/code&gt;</code></pre><p><strong>部分第三方混淆参考规则</strong></p><p>Gson</p><pre><code># gson-dontwarn com.google.**-keep class com.google.gson.** {*;}</code></pre><p>otto</p><pre><code># otto混淆规则-keepattributes *Annotation*-keepclassmembers class ** {    @com.squareup.otto.Subscribe public *;    @com.squareup.otto.Produce public *;}</code></pre><p>universal-image-loader</p><pre><code>-dontwarn com.nostra13.universalimageloader.**-keep class com.nostra13.universalimageloader.** {*;}</code></pre><p>友盟统计</p><pre><code># 友盟统计-keepclassmembers class * {    public &lt;init&gt; (org.json.JSONObject);}# 友盟统计5.0.0以上SDK需要-keepclassmembers enum * {    public static **[] values();    public static ** valueOf(java.lang.String);}# 友盟统计R.java删除问题-keep public class com.gdhbgh.activity.R$*{    public static final int *;}</code></pre><p>OkHttp</p><pre><code># OkHttp-dontwarn com.squareup.okhttp.**-keep class com.squareup.okhttp.** {*;}-keep interface com.squareup.okhttp.** {*;}-dontwarn okio.**&lt;/code&gt;</code></pre><p>nineoldandroids</p><pre><code>-dontwarn com.nineoldandroids.*-keep class com.nineoldandroids.** {*;}</code></pre><p>支付宝</p><pre><code># 支付宝-keep class com.alipay.android.app.IAlixPay{*;}-keep class com.alipay.android.app.IAlixPay$Stub{*;}-keep class com.alipay.android.app.IRemoteServiceCallback{*;}-keep class com.alipay.android.app.IRemoteServiceCallback$Stub{*;}-keep class com.alipay.sdk.app.PayTask{    public *;}-keep class com.alipay.sdk.app.AuthTask{    public *;}</code></pre><p>Socket.io</p><pre><code># socket.io-keep class socket.io-client.-keepclasseswithmembers,allowshrinking class socket.io-client.* {*;}-keep class io.socket.-keepclasseswithmembers,allowshrinking class io.socket.* {*;}</code></pre><p>JPUSH</p><pre><code># jpush-dontwarn cn.jpush.**-keep class cn.jpush.** {*;}# protobuf（jpush依赖）-dontwarn com.google.**-keep class com.google.protobuf.** {*;}</code></pre><p>友盟分享</p><p>这个只有部分热门的SDK，具体可以参考分享文档：</p><pre><code># 友盟分享-dontwarn com.umeng.**-dontwarn com.tencent.weibo.sdk.**-keep public interface com.tencent.**-keep public interface com.umeng.socialize.**-keep public interface com.umeng.socialize.sensor.**-keep public interface com.umeng.scrshot.**-keep public class com.umeng.socialize.* {*;}-keep class com.umeng.scrshot.**-keep public class com.tencent.** {*;}-keep class com.umeng.socialize.sensor.**-keep class com.umeng.socialize.handler.**-keep class com.umeng.socialize.handler.*-keep class com.tencent.mm.sdk.modelmsg.WXMediaMessage {*;}-keep class com.tencent.mm.sdk.modelmsg.** implements com.tencent.mm.sdk.modelmsg.WXMediaMessage$IMediaObject {*;}-keep class im.yixin.sdk.api.YXMessage {*;}-keep class im.yixin.sdk.api.** implements im.yixin.sdk.api.YXMessage$YXMessageData{*;}-keep class com.tencent.** {*;}-dontwarn com.tencent.**-keep public class com.umeng.soexample.R$*{    public static final int *;}-keep class com.tencent.open.TDialog$*-keep class com.tencent.open.TDialog$* {*;}-keep class com.tencent.open.PKDialog-keep class com.tencent.open.PKDialog {*;}-keep class com.tencent.open.PKDialog$*-keep class com.tencent.open.PKDialog$* {*;}-keep class com.sina.** {*;}-dontwarn com.sina.**-keep class  com.alipay.share.sdk.** {*;}</code></pre><h2 id="1-5-混淆模板"><a href="#1-5-混淆模板" class="headerlink" title="1.5 混淆模板"></a>1.5 混淆模板</h2><p>参见<a href="https://github.com/Sogrey/notes/blob/master/%E6%B7%B7%E6%B7%86%E6%A8%A1%E6%9D%BF.md" target="_blank" rel="noopener">这里</a></p><h2 id="1-6-填混淆的坑"><a href="#1-6-填混淆的坑" class="headerlink" title="1.6 填混淆的坑"></a>1.6 填混淆的坑</h2><p><strong>网络层混淆</strong></p><p>混淆要注意，一般网络层都不进行混淆，可以经过划分包后直接不混淆网络层的包：</p><pre><code>-keep class com.xxx.xxx.http.** {*;}&lt;/code&gt;</code></pre><p><strong>数据模型混淆</strong></p><p>所有bean都不要混淆，可以使用下面的：</p><pre><code>-keep class * implements java.io.Serializable {*;}-keepclassmembers class * implements java.io.Serializable {*;}</code></pre><p>但是有时候上述代码可能导致应用卡住，没用任何错误提示，所以我建议采用分包模式，把所有bean放在一个包中，直接对该包加白名单：</p><pre><code>-keep class com.xxx.xxx.domain.** {*;}</code></pre><p><strong>XML映射问题</strong></p><p>如果你遇到一些控件无法Inflate，报NullPointException，比如ListView，NavigationView等等，这个问题花了我几个小时自己研究出了规则：</p><pre><code>-keep class org.xmlpull.v1.** {*;}</code></pre><p><strong>混淆规则编写方法</strong></p><p>如果混淆后报错，通过retrace后找到错误的问题后可以直接编写规则来去掉混淆，但是如果报的错误莫名其妙，而且报错的类没有混淆，那么你可以采用极端的方法，加入下面规则：</p><pre><code>-keep class *.** {*;}</code></pre><p>这条规则表示不混淆所有类及其中所有代码，加了这条规则之后，<br>还不能运行表示是其他问题，例如注解，内部类等等，<br>可以运行后，可以通过反编译，寻找所有包名，记录下来，把上述规则改为：</p><pre><code>-keep class android.** {*;}-keep class com.** {*;}-keep class io.** {*;}-keep class org.** {*;}...</code></pre><p>一个个去掉检查是否有报错，例如查到</p><pre><code>-keep class com.** {*;}</code></pre><p>加了就不报错，则可以继续一级级往下检查。</p><blockquote><p>签名移步<a href="https://sogrey.github.io/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8B%EF%BC%89/">签名</a></p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html" target="_blank" rel="noopener">混淆规则文档</a></li><li><a href="http://www.2cto.com/kf/201607/530170.html" target="_blank" rel="noopener">Android混淆心得</a></li><li><a href="http://www.cnblogs.com/cr330326/p/5534915.html" target="_blank" rel="noopener">ProGuard代码混淆技术详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> apk混淆 </tag>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android混淆签名(下)</title>
      <link href="/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>混淆移步<a href="https://sogrey.github.io/article/Android%E6%B7%B7%E6%B7%86%E7%AD%BE%E5%90%8D%EF%BC%88%E4%B8%8A%EF%BC%89/">混淆</a></p><p>每个发布的应用都有自己的一个唯一合法的ID，这个就是应用自身的签名，签名可以保证你软件升级的一致性，使用相同签名的应用可以实现覆盖安装，而不一致的签名将无法共享使用数据，也即是无法覆盖安装，这样可以防止别人篡改，盗用开发者的应用，造成对开发者利益的损害。那么如何为自己的应用进行签名呢？<a href="http://blog.sina.com.cn/s/blog_694394d30102vp3i.html" target="_blank" rel="noopener">1</a></p></blockquote><a id="more"></a><h1 id="2-apk签名"><a href="#2-apk签名" class="headerlink" title="2 apk签名"></a>2 apk签名</h1><p>APK签名之两步走：</p><ol><li>创建一个key</li><li>使用步骤1中产生的key对apk签名</li></ol><h2 id="2-1-签名文件生成"><a href="#2-1-签名文件生成" class="headerlink" title="2.1 签名文件生成"></a>2.1 签名文件生成</h2><h3 id="2-1-1-命令行生成签名文件"><a href="#2-1-1-命令行生成签名文件" class="headerlink" title="2.1.1 命令行生成签名文件"></a>2.1.1 命令行生成签名文件</h3><p>创建key，需要用到java的keytool.exe工具(该工具位于java环境的安装目录下jdk1.6.0_24jrebin，不同jdk版本可能略有差异)，使用产生的key对apk签名用到的是jarsigner.exe (位于安装目录下的jdk1.6.0_24bin)，如果你正确安装了java环境，并配置了正解的环境变量，那么你可以直接打开运行命令窗口输入</p><pre><code>C:\Users\Sogrey&gt;keytool -genkey -alias demo.keystore -keyalg RSA -validity 40000 -keystore demo.keystore</code></pre><p>说明： <code>-genkey</code> 产生密钥<br><code>-alias demo.keystore</code> key的别名 demo.keystore<br><code>-keyalg RSA</code> 使用RSA算法对签名加密<br><code>-validity 40000</code> 证书有效期限4000天<br><code>-keystore demo.keystore</code> 生成key的存放路径，你可以生成到指定路径（例如：D:\demo.keystore 在D盘根目录生成key文件，文件名为demo.keystor，如果不指定绝对路径将在当前cmd所在目录生成key文件）,当前我的签名文件就保存在 <code>C:\Users\Sogrey</code> 目录下。</p><p><img src="https://sogrey.github.io/pics/2017-01-13_221026.jpg" alt="命令行生成签名文件"></p><h3 id="2-1-2-Eclipse生成签名文件"><a href="#2-1-2-Eclipse生成签名文件" class="headerlink" title="2.1.2 Eclipse生成签名文件"></a>2.1.2 Eclipse生成签名文件</h3><p>参见我早期的<a href="http://blog.sina.com.cn/s/blog_694394d30102w4i9.html" target="_blank" rel="noopener">另一篇</a>。</p><h3 id="2-1-3-Android-studio生成签名文件"><a href="#2-1-3-Android-studio生成签名文件" class="headerlink" title="2.1.3 Android studio生成签名文件"></a>2.1.3 Android studio生成签名文件</h3><p>Android studio 生成签名文件与Eclipse类似，菜单Build-&gt;Generate Signed APK ，<br><img src="https://sogrey.github.io/pics/%E5%9B%BE%E7%89%871.jpg" alt="Android studio生成签名文件"></p><p>弹出下面对话框：</p><p><img src="https://sogrey.github.io/pics/2017-01-13_223909.jpg" alt="Android studio生成签名文件"></p><p>点击<code>Create new...</code>,弹出下面对话框：</p><p><img src="https://sogrey.github.io/pics/2017-01-13_224524.jpg" alt="Android studio生成签名文件"></p><p>其中：</p><pre><code>Key store path：密钥库文件的地址 Password/Confirm：密钥库的密码 Key：   Alias：密钥名称   Password/Confirm：密钥密码   Validity(years)：密钥有效时间   First and Last Name：密钥颁发者姓名   Organizational Unit：密钥颁发组织   City or Locality：城市   Country Code(XX)：国家 </code></pre><p>点击<code>ok</code>,便可生成签名文件，文件路径为上面填写的<code>Key store path</code>。</p><h2 id="2-2-签名apk"><a href="#2-2-签名apk" class="headerlink" title="2.2 签名apk"></a>2.2 签名apk</h2><h3 id="2-2-1-命令行签名apk文件"><a href="#2-2-1-命令行签名apk文件" class="headerlink" title="2.2.1 命令行签名apk文件"></a>2.2.1 命令行签名apk文件</h3><pre><code>C:\Users\Sogrey&gt; jarsigner -verbose -keystore demo.keystore -signedjar demo_signed.apk demo.apk demo.keystore</code></pre><p>说明： <code>-verbose</code> 输出签名的详细信息<br><code>-keystore demo.keystore</code> 使用key的绝对路径，就是在第一步中生成的key<br><code>-signedjar demor_signed.apk demo.apk demo.keystore</code> 正式签名，三个参数中依次为签名后产生的文件demo_signed，要签名的文件demo.apk和密钥库demo.keystore<br><img src="https://sogrey.github.io/pics/2017-01-13_222555.jpg" alt="命令行签名apk文件"><br><img src="https://sogrey.github.io/pics/2017-01-13_222730.jpg" alt="命令行签名apk文件"></p><h3 id="2-2-2-Eclipse签名apk文件"><a href="#2-2-2-Eclipse签名apk文件" class="headerlink" title="2.2.2 Eclipse签名apk文件"></a>2.2.2 Eclipse签名apk文件</h3><p>参见<a href="http://blog.sina.com.cn/s/blog_694394d30102w4i9.html" target="_blank" rel="noopener">早期文章</a></p><h3 id="2-2-3-Android-studio签名apk文件"><a href="#2-2-3-Android-studio签名apk文件" class="headerlink" title="2.2.3 Android studio签名apk文件"></a>2.2.3 Android studio签名apk文件</h3><p>菜单Build-&gt;Generate Signed APK,弹出框中选择<code>Choose existing...</code>,选择以创建好的签名文件。</p><p><img src="https://sogrey.github.io/pics/2017-01-13_223909.jpg" alt="Android studio生成签名文件"></p><p>输入<code>Key store password</code>,点击<code>Key alias</code>后面的<code>...</code>选择别名，再次输入别名密码，点击<code>next</code>,选择签名为debug还是release.点击<code>finish</code>即可签名完成。</p><p><img src="https://sogrey.github.io/pics/2017-01-13_225717.jpg" alt=""><br><img src="https://sogrey.github.io/pics/2017-01-13_230129.jpg" alt=""></p><h1 id="3-查看签名"><a href="#3-查看签名" class="headerlink" title="3 查看签名"></a>3 查看签名</h1><h2 id="3-1-查看签名文件信息"><a href="#3-1-查看签名文件信息" class="headerlink" title="3.1 查看签名文件信息"></a>3.1 查看签名文件信息</h2><pre><code>$ keytool -list -keystore debug.keystore </code></pre><p>结果：<br>    C:\Users\Sogrey\Desktop&gt;keytool -list -keystore demo.jks<br>    输入密钥库口令:</p><pre><code>密钥库类型: JKS密钥库提供方: SUN您的密钥库包含 1 个条目demo, 2017-1-13, PrivateKeyEntry,证书指纹 (SHA1): 5D:2B:A2:05:8F:36:74:9C:F7:B4:A7:48:32:54:9B:6D:6C:9C:D7:9C</code></pre><p><img src="https://sogrey.github.io/pics/2017-01-13_230705.jpg" alt=""></p><h2 id="3-2-查看apk签名信息"><a href="#3-2-查看apk签名信息" class="headerlink" title="3.2 查看apk签名信息"></a>3.2 查看apk签名信息</h2><p>用winrar打开待查看的apk，将其中<code>META-INF</code>文件夹解压出来，得到其中的<code>CERT.RSA</code>文件</p><pre><code>$ keytool -printcert -file META-INF/CERT.RSA</code></pre><p>结果：</p><p><img src="https://sogrey.github.io/pics/2017-01-13_231453.jpg" alt=""></p><h1 id="4-签名apk压缩"><a href="#4-签名apk压缩" class="headerlink" title="4 签名apk压缩"></a>4 签名apk压缩</h1><p>签名之后，用zipalign(压缩对齐)优化你的APK文件。未签名的apk不能使用，也不能优化。签名之后的apk谷歌推荐使用zipalign.exe(位于android-sdk-windowstools目录下)工具对其优化：</p><pre><code>C:\Users\Sogrey&gt; zipalign -v 4 demo_signed.apk final.apk</code></pre><p>这样，zipalign能够使apk文件中未压缩的数据在4个字节边界上对齐（一般4个字节是一个性能很好的值），这样android系统就可以使用mmap()(请自行查阅这个函数的用途)函数读取文件，可以在读取资源上获得较高的性能，</p><p>PS:</p><ol><li>在4个字节边界上对齐的意思就是指编译器把4个字节作为一个单位来进行读取的数据资源，因此，CPU能够对变量进行较之前不对齐更高效、快速的访问。</li><li>对齐的根源：android系统中的Davlik虚拟机使用自己专有的格式DEX，DEX的结构是紧凑的，为了让运行时的性能更好，可以进一步用”对齐”进一步优化，但是大小一般会有所增加。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.sina.com.cn/s/blog_694394d30102vp3i.html" target="_blank" rel="noopener">android应用之——为自己的apk签名 </a></li><li><a href="http://blog.csdn.net/wed110/article/details/38303637" target="_blank" rel="noopener">查看APK的签名的方法</a></li><li><a href="http://www.360doc.com/content/14/0908/05/9200790_407757027.shtml" target="_blank" rel="noopener">Android如何查看应用签名信息–微信平台开发应用的签名</a></li><li><a href="http://janrone.com/2015/12/29/%E6%9F%A5%E7%9C%8Bapk%E7%AD%BE%E5%90%8D-%E5%92%8C-keystore-%E7%9A%84%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener">查看apk签名 和 keystore 的信息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> apk混淆 </tag>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我收集的一些开源项目</title>
      <link href="/article/%E6%88%91%E6%94%B6%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
      <url>/article/%E6%88%91%E6%94%B6%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这交互炸了:一分钟让你拥有微信拖拽透明返回PhotoView<br><a href="http://mp.weixin.qq.com/s/dW6t1hoVl_mqPx6mO_Tssg" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/dW6t1hoVl_mqPx6mO_Tssg</a><br>高仿微信可拖拽返回PhotoView<br><a href="https://github.com/githubwing/DragPhotoView" target="_blank" rel="noopener">https://github.com/githubwing/DragPhotoView</a><br><a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="noopener">https://github.com/chrisbanes/PhotoView</a></p><p>《云阅》一个仿网易云音乐UI，使用Gank.Io及豆瓣Api开发的开源项目<br><a href="http://mp.weixin.qq.com/s/jsDov5TFGO2DBywZ8QHlYQ" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/jsDov5TFGO2DBywZ8QHlYQ</a><br><a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="noopener">https://github.com/youlookwhat/CloudReader</a></p><p>Android如何实现茄子快传<br><a href="https://mp.weixin.qq.com/s/V_KH5hlRXMP1WKLsw7uMww" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/V_KH5hlRXMP1WKLsw7uMww</a><br><a href="https://github.com/mayubao/KuaiChuan" target="_blank" rel="noopener">https://github.com/mayubao/KuaiChuan</a></p><a id="more"></a><p>==========================</p><p>//Android 开源项目分类<br><a href="https://github.com/Trinea/android-open-project/tree/master/%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="noopener">https://github.com/Trinea/android-open-project/tree/master/%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E7%89%88</a></p><p>//GitHub 优秀的 Android 开源项目<br><a href="http://www.open-open.com/lib/view/open1416808977430.html#articleHeader11" target="_blank" rel="noopener">http://www.open-open.com/lib/view/open1416808977430.html#articleHeader11</a></p><p>2016Android开源项目及库汇总<br><a href="http://www.jianshu.com/p/f498179798b5" target="_blank" rel="noopener">http://www.jianshu.com/p/f498179798b5</a></p><p>//泡在网上的日子<br><a href="http://www.jcodecraeer.com/a/opensource/2016/0121/3903.html" target="_blank" rel="noopener">http://www.jcodecraeer.com/a/opensource/2016/0121/3903.html</a></p><p>//MVP例子集锦<br><a href="https://github.com/wenzhihao123/Android-rxjava-retrofit-okhttp-app" target="_blank" rel="noopener">https://github.com/wenzhihao123/Android-rxjava-retrofit-okhttp-app</a></p><p><a href="https://gold.xitu.io/entry/585ba05561ff4b0058041f6b/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/585ba05561ff4b0058041f6b/view</a></p><p><a href="https://github.com/saiwu-bigkoo/Android-PickerView" target="_blank" rel="noopener">https://github.com/saiwu-bigkoo/Android-PickerView</a><br>//模仿微信图片点击全屏效果<br><a href="http://www.apkbus.com/thread-267329-1-1.html" target="_blank" rel="noopener">http://www.apkbus.com/thread-267329-1-1.html</a></p><p>//第三方刷新库<br><a href="http://gold.xitu.io/entry/570f716a1ea493006b5ecfbb" target="_blank" rel="noopener">http://gold.xitu.io/entry/570f716a1ea493006b5ecfbb</a></p><p>GitHub地址：<a href="https://github.com/Aspsine/SwipeToLoadLayout" target="_blank" rel="noopener">https://github.com/Aspsine/SwipeToLoadLayout</a><br>GitHub地址：<a href="https://github.com/cymcsg/UltimateRecyclerView" target="_blank" rel="noopener">https://github.com/cymcsg/UltimateRecyclerView</a><br>GitHub地址：<a href="https://github.com/Aspsine/IRecyclerView" target="_blank" rel="noopener">https://github.com/Aspsine/IRecyclerView</a><br>GitHub地址：<a href="https://github.com/WuXiaolong/PullLoadMoreRecyclerView" target="_blank" rel="noopener">https://github.com/WuXiaolong/PullLoadMoreRecyclerView</a><br>GitHub地址：<a href="https://github.com/cundong/HeaderAndFooterRecyclerView" target="_blank" rel="noopener">https://github.com/cundong/HeaderAndFooterRecyclerView</a></p><p><a href="https://github.com/tuesda/CircleRefreshLayout" target="_blank" rel="noopener">https://github.com/tuesda/CircleRefreshLayout</a></p><p><a href="https://github.com/imallan/JellyRefreshLayout" target="_blank" rel="noopener">https://github.com/imallan/JellyRefreshLayout</a></p><p>PullableLayout可以很容易地拉至加载功能添加到您的应用程序的顶部，左侧，底部和右侧<br><a href="https://github.com/zongren/PullableLayout" target="_blank" rel="noopener">https://github.com/zongren/PullableLayout</a></p><p>一个牛逼的刷新控件TwinklingRefreshLayout<br><a href="https://github.com/lcodecorex/TwinklingRefreshLayout" target="_blank" rel="noopener">https://github.com/lcodecorex/TwinklingRefreshLayout</a></p><p>//XRecyclerView<br><a href="http://www.see-source.com/androidwidget/detail.html?wid=587" target="_blank" rel="noopener">http://www.see-source.com/androidwidget/detail.html?wid=587</a></p><p>//Added Load More to Ultra Pull to Refresh for Android. Support all the views.<br><a href="https://github.com/captainbupt/android-Ultra-Pull-To-Refresh-With-Load-More" target="_blank" rel="noopener">https://github.com/captainbupt/android-Ultra-Pull-To-Refresh-With-Load-More</a></p><p>//BGARefreshLayout-Android可以对所有控件实现下拉刷新和上拉加载更多功能<br><a href="http://www.23code.com/bgarefreshlayout-android/" target="_blank" rel="noopener">http://www.23code.com/bgarefreshlayout-android/</a></p><p>//LoadingLayout<br><a href="https://gold.xitu.io/post/583c242061ff4b006b59c7fb" target="_blank" rel="noopener">https://gold.xitu.io/post/583c242061ff4b006b59c7fb</a></p><p>//可适配所有视图的下拉刷新上拉加载，并支持各种风格。<br><a href="https://github.com/canyinghao/CanRefresh" target="_blank" rel="noopener">https://github.com/canyinghao/CanRefresh</a></p><p>//掘金安卓社区<br><a href="http://gold.xitu.io/welcome/android" target="_blank" rel="noopener">http://gold.xitu.io/welcome/android</a></p><p>/** 自定义view<br><a href="http://www.gcssloop.com/customview/Canvas_BasicGraphics" target="_blank" rel="noopener">http://www.gcssloop.com/customview/Canvas_BasicGraphics</a></p><p>//视频播放器<br><a href="https://github.com/jjdxmashl/jjdxm_ijkplayer" target="_blank" rel="noopener">https://github.com/jjdxmashl/jjdxm_ijkplayer</a></p><p><a href="https://github.com/curtis2/SuperVideoPlayer" target="_blank" rel="noopener">https://github.com/curtis2/SuperVideoPlayer</a></p><p><a href="https://github.com/supercwn/SuperPlayer" target="_blank" rel="noopener">https://github.com/supercwn/SuperPlayer</a></p><p>基于 ijkplayer 的视频播放器，仿 Bilibili 客户端，集成沉浸式全屏、弹幕、触屏控制、视频源切换等功能<br><a href="https://gold.xitu.io/entry/583d2d8ca22b9d006a9241f8" target="_blank" rel="noopener">https://gold.xitu.io/entry/583d2d8ca22b9d006a9241f8</a></p><p>//开关<br><a href="https://github.com/kyleduo/SwitchButton" target="_blank" rel="noopener">https://github.com/kyleduo/SwitchButton</a></p><p>//数据库<br><a href="https://github.com/requery/requery" target="_blank" rel="noopener">https://github.com/requery/requery</a></p><p>圆弧刻度温度进度条<br><a href="https://gold.xitu.io/entry/582ecede67f35600633eb136" target="_blank" rel="noopener">https://gold.xitu.io/entry/582ecede67f35600633eb136</a></p><p>通用PopupWindow，几行代码搞定PopupWindow弹窗<br><a href="https://gold.xitu.io/entry/583fee8d61ff4b006c1b07de" target="_blank" rel="noopener">https://gold.xitu.io/entry/583fee8d61ff4b006c1b07de</a></p><p>自定义对话框应该这样写<br><a href="https://gold.xitu.io/entry/58451816128fe10058aee0ca" target="_blank" rel="noopener">https://gold.xitu.io/entry/58451816128fe10058aee0ca</a></p><p>Android Studio 快速开发之道<br><a href="https://gold.xitu.io/entry/583bd4a2c59e0d006b419b0d" target="_blank" rel="noopener">https://gold.xitu.io/entry/583bd4a2c59e0d006b419b0d</a></p><p>引导界面滑动导航 + 大于等于1页时无限轮播 + 各种切换动画轮播效果<br><a href="https://github.com/bingoogolapple/BGABanner-Android" target="_blank" rel="noopener">https://github.com/bingoogolapple/BGABanner-Android</a></p><p>MVP 开发框架再试 - 程序员如何更优雅的看直播<br>App based on Material Design + MVP + Rxjava + Retrofit + Okhttp + Glide + Cache + theme + others<br><a href="https://gold.xitu.io/entry/58456f14a22b9d007aa1e3f7" target="_blank" rel="noopener">https://gold.xitu.io/entry/58456f14a22b9d007aa1e3f7</a></p><p> AndroidIOS风格底部选择器（支持时间，日期，自定义）<br><a href="http://blog.csdn.net/androidmsky/article/details/53302959" target="_blank" rel="noopener">http://blog.csdn.net/androidmsky/article/details/53302959</a></p><p>MaterialEditText<br><a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="noopener">https://github.com/rengwuxian/MaterialEditText</a></p><p>ExpandableTextView<br><a href="https://github.com/Carbs0126/ExpandableTextView" target="_blank" rel="noopener">https://github.com/Carbs0126/ExpandableTextView</a></p><p>//通用的adapter<br><a href="https://github.com/hongyangAndroid/baseAdapter" target="_blank" rel="noopener">https://github.com/hongyangAndroid/baseAdapter</a></p><p>CalendarListview是一个高度定制的日期选择器，可以满足多选日期的需求<br><a href="https://github.com/henry-newbie/CalendarView" target="_blank" rel="noopener">https://github.com/henry-newbie/CalendarView</a></p><p>Android酷炫实用的开源框架（UI框架）<br><a href="http://www.runoob.com/w3cnote/android-ui-framework.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/android-ui-framework.html</a></p><p> Android自定义控件三部曲文章索引<br><a href="http://blog.csdn.net/harvic880925/article/details/50995268" target="_blank" rel="noopener">http://blog.csdn.net/harvic880925/article/details/50995268</a></p><p>一个绚丽的loading动效分析与实现！<br><a href="http://blog.csdn.net/tianjian4592/article/details/44538605" target="_blank" rel="noopener">http://blog.csdn.net/tianjian4592/article/details/44538605</a></p><p>基于RxJava的下载工具。支持多线程下载和断点下载，智能判断是否支持多线程下载和断点下载。基于RxJava和改造打造的下载工具，支持多线程下载和断点续传，智能判断是否支持断点续传等功能<br><a href="https://github.com/ssseasonnn/RxDownload" target="_blank" rel="noopener">https://github.com/ssseasonnn/RxDownload</a></p><p>一个蛮酷的加载进度条<br><a href="https://github.com/zhangyuChen1991/ZYDownloading" target="_blank" rel="noopener">https://github.com/zhangyuChen1991/ZYDownloading</a></p><p>一个Android定制的ListView和滚动型上拉放大项。<br><a href="https://github.com/Frank-Zhu/PullZoomView" target="_blank" rel="noopener">https://github.com/Frank-Zhu/PullZoomView</a></p><p>Swipebacklayout及Activity启动的动画<br><a href="http://blog.csdn.net/xiechengfa/article/details/45317503" target="_blank" rel="noopener">http://blog.csdn.net/xiechengfa/article/details/45317503</a></p><p>SwipeBackHelper及Activity启动的动画<br> <a href="https://github.com/Jude95/SwipeBackHelper" target="_blank" rel="noopener">https://github.com/Jude95/SwipeBackHelper</a></p><p>Android6.0 权限适配及兼容库的实现<br><a href="https://gold.xitu.io/entry/585cdeec61ff4b0063ef3ba7/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/585cdeec61ff4b0063ef3ba7/view</a></p><p>球形水波百分比控件<br><a href="https://gold.xitu.io/entry/585cdda1128fe1006de45502/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/585cdda1128fe1006de45502/view</a></p><p>Android 自定义 ClearEditTextView<br><a href="https://gold.xitu.io/entry/585c8bab61ff4b00688bb0cb/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/585c8bab61ff4b00688bb0cb/view</a></p><p>Android 自定义价格日历控件<br><a href="https://gold.xitu.io/entry/583414a2570c35006c24c581" target="_blank" rel="noopener">https://gold.xitu.io/entry/583414a2570c35006c24c581</a></p><p>Android时间选择器<br>下载地址<br><a href="http://www.apkbus.com/thread-257790-1-1.html" target="_blank" rel="noopener">http://www.apkbus.com/thread-257790-1-1.html</a><br>compile ‘com.jzxiang.pickerview:TimePickerDialog:0.9.2’</p><p> Android自定义弹窗——右上角悬浮关闭<br><a href="http://blog.csdn.net/qqyanjiang/article/details/51556618" target="_blank" rel="noopener">http://blog.csdn.net/qqyanjiang/article/details/51556618</a></p><p>歌词显示控件<br> LyricView<a href="https://gold.xitu.io/entry/5861cb798d6d810065f78635/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/5861cb798d6d810065f78635/view</a></p><p><a href="https://github.com/WuLiFei/LyricViewDemo" target="_blank" rel="noopener">https://github.com/WuLiFei/LyricViewDemo</a></p><p>RxRetrofit - 终极封装 - 深入浅出 &amp; 文件上传<br><a href="https://gold.xitu.io/entry/585e444961ff4b005814b3e8/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/585e444961ff4b005814b3e8/view</a></p><p><a href="http://www.jianshu.com/p/e04690cba093" target="_blank" rel="noopener">http://www.jianshu.com/p/e04690cba093</a></p><p>Android 开发人员不得不收集的代码 (持续更新中)<br><a href="https://gold.xitu.io/entry/583cf7bac59e0d006b477dff" target="_blank" rel="noopener">https://gold.xitu.io/entry/583cf7bac59e0d006b477dff</a></p><p>下载不应该让人感到痛苦，Aria，致力于让下载傻瓜化。<br><a href="https://gold.xitu.io/entry/5850f475570c350069de3403" target="_blank" rel="noopener">https://gold.xitu.io/entry/5850f475570c350069de3403</a></p><p>菜单开源库装逼大全<br><a href="http://www.jianshu.com/p/e04690cba093" target="_blank" rel="noopener">http://www.jianshu.com/p/e04690cba093</a></p><p>自定义View<br><a href="https://github.com/xinghongfei/awesome-view" target="_blank" rel="noopener">https://github.com/xinghongfei/awesome-view</a><br>编写自定义 View 并发布到 JCenter<br><a href="https://gold.xitu.io/entry/583bcd0aac502e006c27583d/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/583bcd0aac502e006c27583d/view</a></p><p>AndAndroid 自定义 View 合集<br><a href="https://gold.xitu.io/entry/58466f9fac502e006bb275e0/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/58466f9fac502e006bb275e0/view</a></p><p>打造酷炫 AndroidStudio 插件<br><a href="https://gold.xitu.io/entry/5862648161ff4b00582c467e/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/5862648161ff4b00582c467e/view</a></p><p> PagerSlidingTabStrip 从头到脚  | 掘金技术征文<br><a href="https://gold.xitu.io/entry/5860843ada2f600065977f7d/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/5860843ada2f600065977f7d/view</a></p><p>hellocharts-android-Android 图表开源库的使用 (一)<br><a href="https://gold.xitu.io/entry/58637011ac502e006745f90f/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/58637011ac502e006745f90f/view</a></p><p>仿时钟表盘自定义view<br><a href="http://m.blog.csdn.net/article/details?id=53228258" target="_blank" rel="noopener">http://m.blog.csdn.net/article/details?id=53228258</a></p><p>直接拿去用！每个App都会用到的LoadingLayout<br><a href="https://gold.xitu.io/entry/583c406361ff4b006cc717a2/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/583c406361ff4b006cc717a2/view</a></p><p>一个可以实现滑动解锁，滑动接听效果的控件<br><a href="https://gold.xitu.io/entry/5832947b8ac2470061c46f38/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/5832947b8ac2470061c46f38/view</a></p><p>一款强大的 Android 底部导航<br><a href="https://gold.xitu.io/entry/5833b8458ac247005a1a11fe/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/5833b8458ac247005a1a11fe/view</a></p><p>持续收集 Android Studio 好用的插件~~ 只选对的！<br><a href="https://gold.xitu.io/entry/583543f9d20309005fe2a21a/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/583543f9d20309005fe2a21a/view</a></p><p>RxJava+Retrofit+OkHttp 封装<br><a href="https://gold.xitu.io/entry/58395fcc128fe1006ab1609d/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/58395fcc128fe1006ab1609d/view</a></p><p>基于 ijkplayer 的视频播放器，仿 Bilibili 客户端，集成沉浸式全屏、弹幕、触屏控制、视频源切换等功能<br><a href="https://gold.xitu.io/entry/583d2d8ca22b9d006a9241f8/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/583d2d8ca22b9d006a9241f8/view</a></p><p>高仿百度外卖个人中心，让你的界面和我一起浪起来~<br><a href="https://gold.xitu.io/entry/583fbc5cac502e006cbadc6a/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/583fbc5cac502e006cbadc6a/view</a></p><p>android 表单验证框架，正则、非空、长度、密码等等等<br><a href="https://gold.xitu.io/entry/583fdf38a22b9d007a832d37/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/583fdf38a22b9d007a832d37/view</a></p><p>RxJava+Retrofit+Okhttp+Mvp<br><a href="https://gold.xitu.io/entry/5842753661ff4b005885eaae/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/5842753661ff4b005885eaae/view</a></p><p>自定义对话框应该这样写<br><a href="https://gold.xitu.io/entry/58451816128fe10058aee0ca/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/58451816128fe10058aee0ca/view</a></p><p>Android 通用标题栏组合控件<br><a href="https://gold.xitu.io/entry/5847c1d8128fe10057978b4e/view" target="_blank" rel="noopener">https://gold.xitu.io/entry/5847c1d8128fe10057978b4e/view</a><br>//常用的工具第三方包</p><pre><code>//百分比compile &apos;com.android.support:percent:25.0.0&apos;//web抓包compile &apos;org.jsoup:jsoup:1.10.1&apos;//视频框架compile &apos;fm.jiecao:jiecaovideoplayer:3.6.3&apos;//侧滑删除compile &apos;com.yanzhenjie:recyclerview-swipe:1.0.1&apos;compile &apos;me.codeboy.android:align-text-view:2.3.0&apos;compile &apos;com.yanzhenjie:recyclerview-swipe:1.0.1&apos;compile &apos;com.jcodecraeer:xrecyclerview:1.2.7&apos;//图片加载compile &apos;com.squareup.picasso:picasso:2.5.2&apos;compile &apos;net.steamcrafted:materialiconlib:1.0.3&apos;compile &apos;com.android.support:recyclerview-v7:25.1.0&apos;//卡片compile &apos;com.android.support:cardview-v7:25.1.0&apos;compile &apos;com.android.support:design:25.1.0&apos;//分包 防止65535compile &apos;com.android.support:multidex:1.0.1&apos;compile &apos;com.github.bumptech.glide:glide:3.5.2&apos;//loading 加载 compile &apos;com.wang.avi:library:2.1.2&apos;compile &apos;io.reactivex:rxjava:1.1.6&apos;compile &apos;io.reactivex:rxandroid:1.2.1&apos;compile &apos;com.squareup.okhttp3:logging-interceptor:3.4.0-RC1&apos;compile &apos;com.squareup.okhttp3:okhttp-urlconnection:3.2.0&apos;compile &apos;com.squareup.retrofit2:retrofit:2.1.0&apos;compile &apos;com.squareup.retrofit2:converter-scalars:2.1.0&apos;compile &apos;com.squareup.retrofit2:converter-gson:2.1.0&apos;compile &apos;org.greenrobot:eventbus:3.0.0&apos;compile &apos;com.squareup.okio:okio:1.8.0&apos;compile &apos;com.squareup.retrofit2:adapter-rxjava:2.1.0&apos;//侧滑删除compile &apos;com.nikhilpanju.recyclerviewenhanced:recyclerviewenhanced:1.0.0&apos;compile &apos;com.commit451:PhotoView:1.2.4&apos;compile &apos;com.nineoldandroids:library:2.4.0&apos;Gson 工具//针对安卓做过优化compile &apos;com.alibaba:fastjson:1.1.52.android&apos;    //未优化compile &apos;com.alibaba:fastjson:+&apos;compile &apos;com.google.code.gson:gson:2.2.4&apos;</code></pre><hr><pre><code>//sp存储和读取    SharedPreferences mSharedPreferences = MyApplication.getContextObject().getSharedPreferences(&quot;loginUser&quot;, Context.MODE_PRIVATE);    SharedPreferences.Editor editor = mSharedPreferences.edit();    editor.putInt(&quot;userid&quot;,data.get(0).getData().getUserid());    editor.putString(&quot;username&quot;,data.get(0).getData().getUsername());    editor.putString(&quot;litpic&quot;,data.get(0).getData().getLitpic());    editor.putString(&quot;lastlogintime&quot;,data.get(0).getData().getLastlogintime());    editor.putString(&quot;state&quot;,&quot;1&quot;);    editor.commit();    Log.d(&quot;HomeFragment_4&quot;, &quot;data.get(0).getData().getUserid():&quot; + data.get(0).getData().getUserid());SharedPreferences sp = MyApplication.getContextObject().getSharedPreferences(&quot;loginUser&quot;, Context.MODE_PRIVATE);    int uid=sp.getInt(&quot;userid&quot;,0);    String username=sp.getString(&quot;username&quot;,&quot;&quot;);    String litpic=sp.getString(&quot;litpic&quot;,&quot;&quot;);    String lastlogintime=sp.getString(&quot;lastlogintime&quot;,&quot;&quot;);</code></pre><hr><pre><code>//唤起qqPackageManager manager = mActivity.getPackageManager();    Intent openQQ = manager.getLaunchIntentForPackage(&quot;com.tencent.mobileqq&quot;);    this.startActivity(openQQ);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手记 </tag>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git常用命令</title>
      <link href="/article/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/article/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>自从入驻github越来越喜欢Git了，自然也就离不开使用各种git命令来克隆提交代码了，当然git像svn一样，也有小乌龟窗口可视化程序<a href="https://tortoisegit.org/" target="_blank" rel="noopener">TortoiseGit</a>，需要的可自行下载。</p><p>这节把一些常用的git命令整理下，也方便以后查阅使用。</p><p>转载自：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单</a>，非常感谢阮一峰的这篇文章。</p></blockquote><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt="Git常用6个命令"></p><p>几个专用名词的译名如下。</p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><a id="more"></a><h1 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h1><pre><code># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]</code></pre><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><pre><code># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;</code></pre><h1 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h1><pre><code># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</code></pre><h1 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h1><pre><code># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h1 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h1><pre><code># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h1 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h1><pre><code># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h1 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h1><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h1 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h1><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h1 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h1><pre><code># 生成一个可供发布的压缩包$ git archive</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://gitref.org/creating/" target="_blank" rel="noopener">Git Reference</a></li><li><a href="http://www.cnblogs.com/mengdd/p/4153773.html" target="_blank" rel="noopener">Git常用命令总结</a></li><li><a href="http://blog.csdn.net/dengsilinming/article/details/8000622" target="_blank" rel="noopener">Git 常用命令大全</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客基于主题Yelee(yelog) 添加文章分类</title>
      <link href="/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"/>
      <url>/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://sogrey.github.io/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%A0%87%E7%AD%BE%E4%BA%91%E2%80%9D%E5%92%8C%E2%80%9C%E5%85%B3%E4%BA%8E%E6%88%91%E2%80%9D%E8%8F%9C%E5%8D%95%E9%A1%B9%E9%A1%B5%E9%9D%A2/">Hexo博客基于主题Yelee(yelog) 添加“标签云”和“关于我”菜单项页面</a></p><p>经过上一节，我已经添加了“标签云”和“关于我”等页面，但是回到标签云页面，我们看到页面上显示<code>已有0个分类，共计10个标签</code>，那么这个文章分类该怎么添加?这就是这节要讲的，也算是对上一篇的补充。<br><img src="https://sogrey.github.io/pics/2017-01-11_180103.jpg" alt="标签云页面"></p></blockquote><a id="more"></a><h1 id="1-站点配置"><a href="#1-站点配置" class="headerlink" title="1 站点配置"></a>1 站点配置</h1><p>在站点根目录下的<code>_config.yml</code>里有这么一段：</p><pre><code># Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:</code></pre><p>其中：<code>category_dir: categories</code>就是分配分类目录了，没有的可以按这样配置，下面就是创建了。</p><h1 id="2-创建分类"><a href="#2-创建分类" class="headerlink" title="2 创建分类"></a>2 创建分类</h1><p>跟创建<code>云标签</code>一样：</p><pre><code>hexo new page categories</code></pre><p>在<code>source</code>目录下生成一个<code>categories\index.md</code>文件，编辑它：</p><pre><code>---date: 2017-01-12 02:23:17title: categoriestype: &quot;categories&quot;comments: false---</code></pre><p>在上一篇说道<code>type</code>值为<code>tags</code>是标签云，这里是分类<code>categories</code>。就这么简单不用再做其他输入。</p><h1 id="3-为文章添加分类"><a href="#3-为文章添加分类" class="headerlink" title="3 为文章添加分类"></a>3 为文章添加分类</h1><p>以<a href="https://sogrey.github.io/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%A0%87%E7%AD%BE%E4%BA%91%E2%80%9D%E5%92%8C%E2%80%9C%E5%85%B3%E4%BA%8E%E6%88%91%E2%80%9D%E8%8F%9C%E5%8D%95%E9%A1%B9%E9%A1%B5%E9%9D%A2/">Hexo博客基于主题Yelee(yelog) 添加“标签云”和“关于我”菜单项页面</a>这一篇为例：</p><pre><code>---title: Hexo博客基于主题Yelee(yelog) 添加“标签云”和“关于我”菜单项页面date: 2017-01-11 17:00:30tags: [HEXO,Yelee,yelog,“标签云”,“关于我”]categories: HEXO博客---</code></pre><p>其中：<code>categories: HEXO博客</code>就是设置该文章分类到<code>HEXO博客</code>。</p><blockquote><p>注：文章标签可以添加多个，分类却只能有一个，设置多个只有第一个生效。</p></blockquote><p>此时文章列表上就多了文章分类了，也可以再到<code>标签云</code>页面查看：<br><img src="https://sogrey.github.io/pics/2017-01-12_110538.jpg" alt="分类"></p><p>Good luck!</p>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Yelee </tag>
            
            <tag> yelog </tag>
            
            <tag> 文章分类 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客基于主题Yelee(yelog) 添加“标签云”和“关于我”菜单项页面</title>
      <link href="/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%A0%87%E7%AD%BE%E4%BA%91%E2%80%9D%E5%92%8C%E2%80%9C%E5%85%B3%E4%BA%8E%E6%88%91%E2%80%9D%E8%8F%9C%E5%8D%95%E9%A1%B9%E9%A1%B5%E9%9D%A2/"/>
      <url>/article/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8E%E4%B8%BB%E9%A2%98Yelee-yelog-%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%A0%87%E7%AD%BE%E4%BA%91%E2%80%9D%E5%92%8C%E2%80%9C%E5%85%B3%E4%BA%8E%E6%88%91%E2%80%9D%E8%8F%9C%E5%8D%95%E9%A1%B9%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><ul><li><a href="https://sogrey.github.io/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/">如何在Github Pages搭建个人独立主页？</a></li><li><a href="https://sogrey.github.io/article/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub-pages/">我是如何用hexo搭建github pages</a></li></ul><p>经过前两篇我已经搭建好了一个简单的HEXO博客，目前使用的是主题是<code>yelog</code>,<code>yelog</code>是基于<code>yelee</code>修改而来，在页面的左半边是博主的信息，中间部分有个菜单，依次是<code>主页</code>、<code>所有文章</code>、<code>标签云</code>和<code>关于我</code>，博客搭建起来的时候<code>主页</code>和<code>所有文章</code>已经生效可以直接使用了，至于<code>标签云</code>和<code>关于我</code>这两个页面还并未创建，这节就来创建它们。</p></blockquote><p><img src="https://sogrey.github.io/pics/2017-01-11_171158.jpg" alt="yelog Menu"></p><a id="more"></a><h1 id="1-设置主题配置文件"><a href="#1-设置主题配置文件" class="headerlink" title="1 设置主题配置文件"></a>1 设置主题配置文件</h1><p>在主题配置文件<code>themes\yelog\_config.yml</code>里找到<code>menu</code>,如下：</p><pre><code># Header | 主菜单## About Page: `hexo new page about`## Tags Cloud Page: `hexo new page tags`menu:  主页: /  所有文章: /archives/  #随笔: /tags/随笔  标签云: /tags/  关于我: /about/  更新日志: /logs/</code></pre><p>注：配置文件里用<code>#</code>注释</p><p>参照上面配置可以增删修改菜单项，比<code>标签云: /tags/</code>,表示有个菜单名为<code>标签云</code>,如文章开头的图，冒号后面的<code>/tags/</code>表示它的访问路径，比如我的站点是<code>https://sogrey.github.io/</code>,那么点击<code>标签云</code>菜单访问的是<code>https://sogrey.github.io/tags/</code>.</p><p>看到上面的配置中已经为我们写好的提示如何创建<code>标签云</code>和<code>关于我</code>页面:</p><pre><code>## About Page: `hexo new page about`## Tags Cloud Page: `hexo new page tags`</code></pre><p>下面我来创建<code>标签云</code>页面。</p><h1 id="2-创建标签云页面"><a href="#2-创建标签云页面" class="headerlink" title="2 创建标签云页面"></a>2 创建<code>标签云</code>页面</h1><p>在Hexo博客本地根目录右键选择<code>Git Bash</code>（前提是已安装好<code>Git</code>和<code>Node.js</code>,可参照<a href="https://sogrey.github.io/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/">如何在Github Pages搭建个人独立主页？</a>）,输入命令：</p><pre><code>hexo new page tags</code></pre><p>回车，提示：</p><pre><code>INFO  Created: ...\source\tags\index.md</code></pre><p>就创建完成了。在<code>source\</code>目录下会多出一个<code>tags</code>文件夹，里面有一个<code>index.md</code>文件，打开该文件输入如下：</p><pre><code>---title: 标签云date: 2017-01-10 22:54:00type: &quot;tags&quot;comments: true---</code></pre><p>其中：<code>title</code>和<code>date</code>是标题和创建时间，<code>type</code>表示类型，值<code>tags</code>表示这是个标签云页面，<code>comments</code>是是否允许评论，<code>true</code>表示允许评论。</p><p>这样标签云页面已经创建好了，部署试一下：</p><p><img src="https://sogrey.github.io/pics/2017-01-11_180103.jpg" alt="标签云页面"></p><h1 id="3-创建关于我页面"><a href="#3-创建关于我页面" class="headerlink" title="3 创建关于我页面"></a>3 创建<code>关于我</code>页面</h1><p>创建<code>关于我</code>页面和<code>标签云</code>页面步骤一样；输入命令：</p><pre><code>hexo new page about</code></pre><p>创建<code>about\index.md</code>文件，页面内容由你随意输入：</p><pre><code>---title: 关于我date: 2017-01-10 22:20:12---# 关于我=== 在此输入正文 ===</code></pre><p>部署，预览页面：</p><p><img src="https://sogrey.github.io/pics/2017-01-11_180604.jpg" alt="关于我"></p><p>到此两个页面都已创建完成，可以发布到github或coding了。另外我自己添加了<a href="https://sogrey.github.io/logs/">更新日志</a>页面，有兴趣的也可以自己创建一个，方法与上面创建<code>关于我</code>一样。</p><p>对于yelee主题的使用和配置，可参照<a href="http://moxfive.coding.me/yelee" target="_blank" rel="noopener">这里</a>。<br>Good luck!</p>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Yelee </tag>
            
            <tag> yelog </tag>
            
            <tag> “标签云” </tag>
            
            <tag> “关于我” </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Html5 PPT</title>
      <link href="/article/Html5-PPT/"/>
      <url>/article/Html5-PPT/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&gt;&gt;&gt;&gt;&gt;<a href="http://sogrey.coding.me/html5/" target="_blank" rel="noopener">国内点此预览</a>&lt;&lt;&lt;&lt;&lt;</p><p>&gt;&gt;&gt;&gt;&gt;<a href="https://sogrey.github.io/Html5-ppt/">国际点此预览</a>&lt;&lt;&lt;&lt;&lt;</p><p><img src="https://sogrey.github.io/pics/2017-01-09_221733.jpg" alt="Html5-ppt"><br><img src="https://sogrey.github.io/pics/2017-01-09_221804.jpg" alt="Html5-ppt"></p>]]></content>
      
      
      <categories>
          
          <category> Html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PPT </tag>
            
            <tag> Html5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在Github Pages搭建个人独立主页？</title>
      <link href="/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/"/>
      <url>/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1准备工作"><a href="#1准备工作" class="headerlink" title="1准备工作"></a>1准备工作</h1><h2 id="1-1-Github注册及使用。"><a href="#1-1-Github注册及使用。" class="headerlink" title="1.1 Github注册及使用。"></a>1.1 Github注册及使用。</h2><p>官网是：<a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a>，是github提供的一个服务，我们可以免费的再其上面搭建自己的网站，也有很多人利用github pages作为自己的个人博客站点。GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p><h3 id="1-1-1-Github登录"><a href="#1-1-1-Github登录" class="headerlink" title="1.1.1 Github登录"></a>1.1.1 Github登录</h3><p>登录地址：<a href="https://github.com/login" target="_blank" rel="noopener">https://github.com/login</a>，还没有github账号的小伙伴赶紧去注册一个，点击”<a href="https://github.com/join?source=login" target="_blank" rel="noopener">Create an account</a>“注册不再赘述。<br><img src="https://sogrey.github.io/pics/sogrey_github_20170109101825.png" alt="github登录"></p><a id="more"></a><h3 id="1-1-2-新建仓库"><a href="#1-1-2-新建仓库" class="headerlink" title="1.1.2 新建仓库"></a>1.1.2 新建仓库</h3><p>登录成功之后到<a href="https://github.com/new" target="_blank" rel="noopener">仓库信息填写界面</a>创建一个仓库,须注意仓库的名称必须是：<code>{你的用户名}.github.io</code>，将<code>{你的用户名}</code>换成你自己的名字，例如我自己的<code>Sogrey.github.io</code><br><img src="https://sogrey.github.io/pics/2017-01-09_104430.png" alt="新建github仓库"></p><h3 id="1-1-3-获取git地址"><a href="#1-1-3-获取git地址" class="headerlink" title="1.1.3 获取git地址"></a>1.1.3 获取git地址</h3><p>进入刚仓库点击<code>Clone or download</code>可查看git地址以备后用。<br><img src="https://sogrey.github.io/pics/2017-01-09_104936.png" alt="获取git地址"></p><h2 id="1-2-安装准备软件"><a href="#1-2-安装准备软件" class="headerlink" title="1.2 安装准备软件"></a>1.2 安装准备软件</h2><h3 id="1-2-1-依次下载安装："><a href="#1-2-1-依次下载安装：" class="headerlink" title="1.2.1 依次下载安装："></a>1.2.1 依次下载安装：</h3><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>（<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">Git for Windows 国内下载站</a>）</li></ul><p>选择本地目录作为工作空间，我这里选择的是：<code>E:\github</code>,为方便演示我已另外创建了仓库：<code>Test.github.io</code>,git地址是：<a href="https://github.com/Sogrey/Test.github.io.git" target="_blank" rel="noopener">https://github.com/Sogrey/Test.github.io.git</a>.</p><h3 id="1-2-2-clone到本地"><a href="#1-2-2-clone到本地" class="headerlink" title="1.2.2 clone到本地"></a>1.2.2 clone到本地</h3><p>命令行进入硬盘上任意一个文件夹，我这里选择<code>E:\github</code>，然后执行</p><pre><code>git clone https://github.com/Sogrey/Test.github.io.git</code></pre><p><img src="https://sogrey.github.io/pics/2017-01-09_112759.png" alt="clone到本地"><br>此时你会发现在<code>E:\github</code>目录下会多出文件，正是我们github上的文件目录<br><img src="https://sogrey.github.io/pics/2017-01-09_113346.png" alt="clone到本地"></p><p><img src="https://sogrey.github.io/pics/2017-01-09_113812.png" alt="clone到本地"></p><h1 id="2-新建测试页面"><a href="#2-新建测试页面" class="headerlink" title="2 新建测试页面"></a>2 新建测试页面</h1><h2 id="2-1-新建测试页面文件"><a href="#2-1-新建测试页面文件" class="headerlink" title="2.1 新建测试页面文件"></a>2.1 新建测试页面文件</h2><p>我们在clone下来的目录里新建一个html文档：<code>index.html</code>,必须.git文件夹在同一个目录,输入以下内容：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;Hello world&lt;/title&gt;        &lt;meta charset=&apos;utf-8&apos;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1&gt;Hello world！这是我使用github pages搭建的个人站点。&lt;/h1&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://sogrey.github.io/pics/2017-01-09_115202.png" alt="新建测试页面"></p><h2 id="2-2-上传测试页面"><a href="#2-2-上传测试页面" class="headerlink" title="2.2 上传测试页面"></a>2.2 上传测试页面</h2><p>命令行指定到clone下来的目录里</p><pre><code>cd Test.github.io</code></pre><p><img src="https://sogrey.github.io/pics/2017-01-09_115619.png" alt="命令行指定到clone下来的目录里"><br>下面就是提交了，依次输入以下命令：</p><pre><code>git add .git commit -m &quot;更新index.html，编写测试页面&quot;git push</code></pre><p><img src="https://sogrey.github.io/pics/2017-01-09_120645.png" alt="git 提交"><br>依次执行git add . , git commit -m “注释”，git push，然后输入你的用户名，密码即可。<br>在浏览器直接访问看看：<br><code>http://{你的域名}.github.io</code></p><p>由于这里我已经创建了<code>sogrey.github.io</code>,再次创建会作为<code>sogrey.github.io</code>的一个子目录：<br><img src="https://sogrey.github.io/pics/2017-01-09_125632.png" alt="访问github pages"><br>以上文字出现乱码，解决办法是另存<code>index.html</code>为<code>utf-8 无BOM</code> 格式<br><img src="https://sogrey.github.io/pics/2017-01-09_130649.png" alt="访问github pages"><br>注意：</p><ul><li>如果是创建子目录，仓库名可以不按照 <code>{你的域名}.github.io</code>这种格式，直接自定义，比如把上面<code>Test.github.io</code>改成<code>Test</code>，直接访问<a href="https://sogrey.github.io/Test/">https://sogrey.github.io/Test/</a>即可。</li><li>如果是创建子目录，默认不显示为github pages，设置方法为 <code>Settings</code> -&gt; <code>GitHub Pages</code> -&gt; <code>Source</code> 改为 <code>master branch</code> 点击 <code>Save</code>保存即可。<br><img src="https://sogrey.github.io/pics/2017-01-09_131707.png" alt="创建github pages子目录设置"><br>重新访问<a href="https://sogrey.github.io/Test/">https://sogrey.github.io/Test/</a>试试：<br><img src="https://sogrey.github.io/pics/2017-01-09_132154.png" alt="重新访问"></li></ul><p>到此，一个简单的github pages就建好了。Good luck!</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.csdn.net/lmj623565791/article/details/51319147" target="_blank" rel="noopener">如何利用github打造博客专属域名</a></li><li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li><li><a href="http://www.jianshu.com/p/35e197cb1273" target="_blank" rel="noopener">Hexo搭建Github-Pages博客填坑教程</a></li><li><a href="http://www.jianshu.com/p/b06222fbc135" target="_blank" rel="noopener">用Hexo创建个人博客</a></li></ul><p>Markdown 语法参考：</p><ul><li><a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">Markdown 编辑器语法指南</a></li><li><a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noopener">Markdown——入门指南</a></li><li><a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github pages </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我是如何用hexo搭建github pages</title>
      <link href="/article/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub-pages/"/>
      <url>/article/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub-pages/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1 准备"></a>1 准备</h1><p>首先简单描述一下搭建的大体准备工作：</p><ul><li>1 拥有一个 github pages</li><li>2 本地环境  Git 和 Node.js</li><li>3 在本地电脑里配置 hexo 的环境。（ hexo 与 github pages 绑定，写博文修改博文等，生成静态博客并 push to github 。)</li><li>4 绑定自己的域名（也可以不用绑定，需要绑定的自行百度。）</li></ul><p>本节要讲的是 如何用hexo搭建github pages,对于第1、2两点可参考另一篇<a href="https://sogrey.github.io/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/">如何在Github-Pages搭建个人独立主页？</a></p><a id="more"></a><h1 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2 Hexo"></a>2 Hexo</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="2-1-Hexo-安装"><a href="#2-1-Hexo-安装" class="headerlink" title="2.1 Hexo 安装"></a>2.1 Hexo 安装</h2><p>官网：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p><p>安装流程参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>，避免入坑。</p><h2 id="2-2-Hexo-建站"><a href="#2-2-Hexo-建站" class="headerlink" title="2.2 Hexo 建站"></a>2.2 Hexo 建站</h2><p>Hexo 安装好了之后，就开始进行建站。cmd打开终端 cd 到指定目录（这里使用D盘根目录<code>d:\</code>）并使用如下命令即可建好</p><pre><code>hexo init yourname cd yourname npm install</code></pre><p>其中 yourname 是你的文件夹名字可随意取（本文章假设 yourname 的文件夹名称是 Hexo ）。<br>或直接新建Hexo，在<code>D:\HEXO</code>使用git Bash命令执行亦可,直接在此目录下<code>右键</code> 选择<code>git Bash</code>,依次执行以下命令：</p><pre><code>hexo initnpm install</code></pre><p><img src="https://sogrey.github.io/pics/2017-01-09_151319.png" alt="git Bash命令"><br><img src="https://sogrey.github.io/pics/2017-01-09_161000.jpg" alt="git Bash命令"><br>完成之后会在D盘会创建一个Hexo目录<br><img src="https://sogrey.github.io/pics/2017-01-09_161345.jpg" alt="Hexo目录"><br>建站可参考<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">建站|Hexo</a></p><p><strong>特别提示：如何与 Github pages 进行关联:</strong></p><p>在刚刚创建出来的目录的根目录下存在一个 <code>_config.yml</code> 文件,使用文本编辑器打开，在最末尾配置：</p><pre><code>deploy:  type: git  repository: https://github.com/Sogrey/Sogrey.github.io.git  branch: master</code></pre><p>其中 <code>repository</code> 字段的值替换成你的 github pages 提交代码的git地址,git地址如何获取参见<a href="https://sogrey.github.io/article/%E5%A6%82%E4%BD%95%E5%9C%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%EF%BC%9F/">如何在Github-Pages搭建个人独立主页？</a>中<code>1.1.3 获取git地址</code></p><h2 id="2-3-Hexo-本地发布"><a href="#2-3-Hexo-本地发布" class="headerlink" title="2.3 Hexo 本地发布"></a>2.3 Hexo 本地发布</h2><p>使用终端命令进行发布：</p><pre><code>hexo cleanhexo g #作用同 hexo generatehexo s #作用同 hexo server</code></pre><p><img src="https://sogrey.github.io/pics/2017-01-09_161613.jpg" alt="Hexo 本地发布"><br>命令详解，<code>hexo clean</code>是清除缓存，<code>hexo g</code>是生成本地发布文件夹，<code>hexo s</code>启动本地服务并发布，发布成功之后浏览器查看<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br><img src="https://sogrey.github.io/pics/2017-01-09_161808.jpg" alt="Hexo 本地发布"></p><p>如需停止本地服务，命令行按 <code>ctrl+c</code></p><p>Hexo 命令参考<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="2-4-Hexo-发布到github-pages"><a href="#2-4-Hexo-发布到github-pages" class="headerlink" title="2.4 Hexo 发布到github pages"></a>2.4 Hexo 发布到github pages</h2><p>当然这存在于本地，而并未发布到github pages服务器，所以需要使用终端命令进行发布：</p><pre><code>hexo cleanhexo g #作用同 hexo generatehexo d #作用同 hexo deploy</code></pre><p>命令详解，<code>hexo clean</code>是清除缓存，<code>hexo g</code>是生成本地发布文件夹，<code>hexo d</code>才是最后的发布到 github pages 上，期间会依次弹出两个输入框，依次输入你的github用户名和密码。更多的 hexo 命令操作请参考官方文档即可。不过一般用来用去无非就是创建页面、发布这么几条命令而已。</p><blockquote><p>最后提示一点，可能会遇到的问题，在执行<code>hexo init</code>时，若提示</p><p>SSL certificate problem: unable to get local issuer certificate</p><p>可以 先执行<code>git config --global http.sslVerfiy false</code> </p></blockquote><p>到此，就可以到github pages去查看上传的页面了。Good lock!</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.tuicool.com/articles/MramqqJ" target="_blank" rel="noopener">我的博客是如何搭建的（github pages + HEXO + 域名绑定）</a></li><li><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="noopener">HEXO+Github,搭建属于自己的博客</a></li><li><a href="https://segmentfault.com/a/1190000004947261" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li><li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li><li><a href="http://www.cnblogs.com/liulangmao/p/4323064.html" target="_blank" rel="noopener">使用hexo搭建github.io博客(一)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Github pages </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/article/hello-world/"/>
      <url>/article/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
